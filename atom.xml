<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rocklei123 米宝窝</title>
  
  <subtitle>水滴石穿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-03T03:09:07.946Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rocklei123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix基于JMX监控中间件</title>
    <link href="http://yoursite.com/2019/07/01/Zabbix%E5%9F%BA%E4%BA%8EJMX%E7%9B%91%E6%8E%A7%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/07/01/Zabbix基于JMX监控中间件/</id>
    <published>2019-07-01T01:34:54.000Z</published>
    <updated>2019-07-03T03:09:07.946Z</updated>
    
    <content type="html"><![CDATA[<p>本主题为通过zabbix监控中间件。</p><p>Zabbix 基于JMX agent(zabbix-java-gateway) 获取JVM MBean 信息。</p><a id="more"></a><h1 id="Zabbix-Agent安装"><a href="#Zabbix-Agent安装" class="headerlink" title="Zabbix Agent安装"></a>Zabbix Agent安装</h1><p><strong>注意：</strong>如果您希望监控目标主机的操作系统相关指标，如CPU、内存、文件系统等信息，那么需要在目标主机安装 zabbix agent。</p><h2 id="rpm包安装方式"><a href="#rpm包安装方式" class="headerlink" title="rpm包安装方式"></a>rpm包安装方式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh zabbix-agent-4.0.0-1.1rc2.el7.x86_64</span><br></pre></td></tr></table></figure><h2 id="源码包安装后打tar包介质–解压安装agent"><a href="#源码包安装后打tar包介质–解压安装agent" class="headerlink" title="源码包安装后打tar包介质–解压安装agent"></a>源码包安装后打tar包介质–解压安装agent</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">tar -xvf zabbix_agent.tar.gz</span><br></pre></td></tr></table></figure><h1 id="Zabbix-Agent配置"><a href="#Zabbix-Agent配置" class="headerlink" title="Zabbix Agent配置"></a>Zabbix Agent配置</h1><h2 id="rpm安装配置"><a href="#rpm安装配置" class="headerlink" title="rpm安装配置"></a>rpm安装配置</h2><p>rpm安装方式配置文件路径为/etc/zabbix/zabbix_agentd.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LogFile=/tmp/zabbix_agentd.log  #日志文件路径</span><br><span class="line">Server=192.168.100.1            #zabbix server 服务端地址</span><br><span class="line">ServerActive=192.168.100.1      #zabbix server 服务端地址</span><br><span class="line">Hostname=192.168.100.104        #被监控端主机ip</span><br></pre></td></tr></table></figure><h2 id="源码包安装后打tar包介质–配置"><a href="#源码包安装后打tar包介质–配置" class="headerlink" title="源码包安装后打tar包介质–配置"></a>源码包安装后打tar包介质–配置</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>源码包安装后打tar包介质-安装方式配置文件路径在解压目录，如:/usr/local/zabbix_agent/etc/zabbix_agentd.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LogFile=/tmp/zabbix_agentd.log  #日志文件路径</span><br><span class="line">Server=192.168.100.1            #zabbix server 服务端地址</span><br><span class="line">ServerActive=192.168.100.1      #zabbix server 服务端地址</span><br><span class="line">Hostname=192.168.100.104        #被监控端主机ip</span><br></pre></td></tr></table></figure><h3 id="添加为服务与启停服务脚本"><a href="#添加为服务与启停服务脚本" class="headerlink" title="添加为服务与启停服务脚本"></a>添加为服务与启停服务脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/init.d/ </span><br><span class="line">vi zabbix_agentd</span><br></pre></td></tr></table></figure><p>脚本内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> chkconfig: 2345 10 90 </span><br><span class="line"><span class="meta">#</span> description: myservice ....</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Zabbix</span><br><span class="line"><span class="meta">#</span> Copyright (C) 2001-2018 Zabbix SIA</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This program is free software; you can redistribute it and/or modify</span><br><span class="line"><span class="meta">#</span> it under the terms of the GNU General Public License as published by</span><br><span class="line"><span class="meta">#</span> the Free Software Foundation; either version 2 of the License, or</span><br><span class="line"><span class="meta">#</span> (at your option) any later version.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> This program is distributed in the hope that it will be useful,</span><br><span class="line"><span class="meta">#</span> but WITHOUT ANY WARRANTY; without even the implied warranty of</span><br><span class="line"><span class="meta">#</span> MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span><br><span class="line"><span class="meta">#</span> GNU General Public License for more details.</span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span> You should have received a copy of the GNU General Public License</span><br><span class="line"><span class="meta">#</span> along with this program; if not, write to the Free Software</span><br><span class="line"><span class="meta">#</span> Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Start/Stop the Zabbix agent daemon.</span><br><span class="line"><span class="meta">#</span> Place a startup script in /sbin/init.d, and link to it from /sbin/rc[023].d </span><br><span class="line">SERVICE="Zabbix agent"</span><br><span class="line">DAEMON=/usr/local/zabbix_agent/sbin/zabbix_agentd  </span><br><span class="line">PIDFILE=/tmp/zabbix_agentd.pid</span><br><span class="line"></span><br><span class="line">case $1 in</span><br><span class="line">  'start')</span><br><span class="line">    if [ -x $&#123;DAEMON&#125; ]</span><br><span class="line">    then</span><br><span class="line">      $DAEMON</span><br><span class="line">      # Error checking here would be good...</span><br><span class="line">      echo "$&#123;SERVICE&#125; started."</span><br><span class="line">    else</span><br><span class="line">      echo "Can't find file $&#123;DAEMON&#125;."</span><br><span class="line">      echo "$&#123;SERVICE&#125; NOT started."</span><br><span class="line">    fi</span><br><span class="line">  ;;</span><br><span class="line">  'stop')</span><br><span class="line">    if [ -s $&#123;PIDFILE&#125; ]</span><br><span class="line">    then</span><br><span class="line">      if kill `cat $&#123;PIDFILE&#125;` &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">      then</span><br><span class="line">        echo "$&#123;SERVICE&#125; terminated."</span><br><span class="line">        rm -f $&#123;PIDFILE&#125;</span><br><span class="line">      fi</span><br><span class="line">    fi</span><br><span class="line">  ;;</span><br><span class="line">  'restart')</span><br><span class="line">    $0 stop</span><br><span class="line">    sleep 10</span><br><span class="line">    $0 start</span><br><span class="line">  ;;</span><br><span class="line">  *)</span><br><span class="line">    echo "Usage: $0 start|stop|restart"</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><p>添加命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x zabbix_agentd </span><br><span class="line">chkconfig --add zabbix_agentd</span><br><span class="line">chkconfig zabbix_agentd on</span><br></pre></td></tr></table></figure><p>启停命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/zabbix_agentd start</span><br><span class="line">/etc/init.d/zabbix_agentd stop</span><br><span class="line">/etc/init.d/zabbix_agentd restart</span><br></pre></td></tr></table></figure><h1 id="Zabbix-服务端配置"><a href="#Zabbix-服务端配置" class="headerlink" title="Zabbix 服务端配置"></a>Zabbix 服务端配置</h1><p>请确保zabbix server已经配置java gateway,如果您已经配置，可略过此步骤。</p><h2 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h2><h3 id="配置zabbix-java-gateway-conf"><a href="#配置zabbix-java-gateway-conf" class="headerlink" title="配置zabbix_java_gateway.conf"></a>配置zabbix_java_gateway.conf</h3><p>vi /etc/zabbix/zabbix_java_gateway.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LISTEN_IP=&quot;0.0.0.0&quot;</span><br><span class="line">LISTEN_PORT=10052</span><br><span class="line">PID_FILE=&quot;/var/run/zabbix/zabbix_java.pid&quot;</span><br><span class="line">START_POLLERS=5</span><br><span class="line">TIMEOUT=3</span><br></pre></td></tr></table></figure><p>配置完成后就可以启动zabbix-server 和 zabbix-java-gateway</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-server.service</span><br><span class="line">systemctl start zabbix-java-gateway.service</span><br></pre></td></tr></table></figure><h3 id="配置zabbix-zabbix-server-conf"><a href="#配置zabbix-zabbix-server-conf" class="headerlink" title="配置zabbix/zabbix_server.conf"></a>配置zabbix/zabbix_server.conf</h3><p>修改zabbix-server的配置，编辑/etc/zabbix/zabbix_server.conf ，修改下面几个参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JavaGateway的服务器IP地址，一般与zabbix server同一台主机，可直接写zabbix  server地址</span><br><span class="line">JavaGateway=XXX.XXX.XXX.XXX</span><br><span class="line">JavaGateway的服务端口</span><br><span class="line">JavaGatewayPort=10052</span><br><span class="line">从javaGateway采集数据的进程数</span><br><span class="line">StartJavaPollers=5</span><br></pre></td></tr></table></figure><p>配置文件修改后，重启zabbix-server：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-server.service</span><br></pre></td></tr></table></figure><h1 id="被监控端JVM开启JMX"><a href="#被监控端JVM开启JMX" class="headerlink" title="被监控端JVM开启JMX"></a>被监控端JVM开启JMX</h1><p>使用JMX前需要先开启JMX，默认是关闭的，在启动JAVA程序时,如何开始请参考官方文档<br><a href="https://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/1.5.0/docs/guide/management/agent.html</a></p><p>下面介绍几种常用中间件JMX开启方式：</p><h2 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>Tomcat 编辑TOMCAT_HOME/bin/catalina.sh 在开头加入如下几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Djava.rmi.server.hostname=JMX_HOST" # 修改 JMX_HOST</span><br><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Djavax.management.builder.initial=" </span><br><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote=true" </span><br><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.port=JMX_PORT" # 修改JMS PORT</span><br><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.ssl=false" </span><br><span class="line">CATALINA_OPTS="$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.authenticate=false"</span><br></pre></td></tr></table></figure><p>注意：JMX_HOST为tomcat的主机名或IP地址，JMX_PORT为JMX端口，通常使用12345，然后重启tomcat，JMX就开启了。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Djava.rmi.server.hostname=127.0.0.1"</span></span><br><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Djavax.management.builder.initial="</span> </span><br><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote=true"</span> </span><br><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.port=12345"</span></span><br><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.ssl=false"</span></span><br><span class="line">set CATALINA_OPTS=<span class="string">"$&#123;CATALINA_OPTS&#125; -Dcom.sun.management.jmxremote.authenticate=false"</span></span><br></pre></td></tr></table></figure><h2 id="Weblogic"><a href="#Weblogic" class="headerlink" title="Weblogic"></a>Weblogic</h2><p>Weblogic 编辑WL_DOMAIN_HOME/bin/setDomainEnv.cmd，在文件结尾加入下面几行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Djava.rmi.server.hostname=JMX_HOST"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote=true"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.port=JMX_PORT"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.ssl=false"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.authenticate=false"</span><br></pre></td></tr></table></figure><p>本地环境配置示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote=true" </span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Djava.rmi.server.hostname=192.168.100.1"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.port=12345"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.ssl=false"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Dcom.sun.management.jmxremote.authenticate=false"</span><br><span class="line">JAVA_OPTIONS="$&#123;JAVA_OPTIONS&#125; -Djavax.management.builder.initial=weblogic.management.jmx.mbeanserver.WLSMBeanServerBuilder"</span><br></pre></td></tr></table></figure><h2 id="IBM-WebSphere"><a href="#IBM-WebSphere" class="headerlink" title="IBM WebSphere"></a>IBM WebSphere</h2><p>进入WebSphere Administrative Console open Servers → Server Types → WebSphere application servers → WAS_SERVER_NAME → Java and Process Management → Process definition → Java Virtual Machine.</p><p>在“Generic JVM arguments”增加下面环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Djavax.management.builder.initial=</span><br></pre></td></tr></table></figure><p>然后再进入 WebSphere Administrative Console, open Servers → Server Types → WebSphere application servers → WAS_SERVER_NAME → Java and Process Management → Process definition → Java Virtual Machine → Custom properties.</p><p>增加下面几个环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Name: java.rmi.server.hostname</span><br><span class="line">Value: JMX_HOST</span><br><span class="line">Name: javax.management.builder.initial</span><br><span class="line">Value: none</span><br><span class="line">Name: com.sun.management.jmxremote</span><br><span class="line">Value: true</span><br><span class="line">Name: com.sun.management.jmxremote.port</span><br><span class="line">Value: JMX_PORT</span><br><span class="line">Name: com.sun.management.jmxremote.ssl</span><br><span class="line">Value: false</span><br><span class="line">Name: com.sun.management.jmxremote.authenticate</span><br><span class="line">Value: false</span><br></pre></td></tr></table></figure><p>应用更改，重启应用就开启了。</p><h2 id="Oracle-GlassFish"><a href="#Oracle-GlassFish" class="headerlink" title="Oracle GlassFish"></a>Oracle GlassFish</h2><p>进入GlassFish Console, open GAS_CONFIG → JVM Settings → JVM Options.<br>加入下面的环境变量到“JVM options”:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Value: -Djava.rmi.server.hostname=JMX_HOST</span><br><span class="line">Value: -Dcom.sun.management.jmxremote=true</span><br><span class="line">Value: -Dcom.sun.management.jmxremote.port=JMX_PORT</span><br><span class="line">Value: -Dcom.sun.management.jmxremote.ssl=false</span><br><span class="line">Value: -Dcom.sun.management.jmxremote.authenticate=false</span><br></pre></td></tr></table></figure><p>重启就开启了。</p><h1 id="JMX相关参数注意事项"><a href="#JMX相关参数注意事项" class="headerlink" title="JMX相关参数注意事项"></a>JMX相关参数注意事项</h1><p>-Djava.rmi.server.hostname=JMX_HOST</p><p>在多网卡主机上，启动weblogic,建议增加-Djava.rmi.server.hostname=JMX_HOST参数，-Djava.rmi.server.hostname= <strong>被监控端Weblogic使用的网卡IP</strong>。否则使用jconsole或JRMC、jvisual工具连接时，会报出RMI(java.net.ConnectException: Connection refused: connect错误。</p><h1 id="测试和查看JMX的配置和状态信息"><a href="#测试和查看JMX的配置和状态信息" class="headerlink" title="测试和查看JMX的配置和状态信息"></a>测试和查看JMX的配置和状态信息</h1><h2 id="基于jmxcmd-jar命令行方式测试"><a href="#基于jmxcmd-jar命令行方式测试" class="headerlink" title="基于jmxcmd.jar命令行方式测试"></a>基于jmxcmd.jar命令行方式测试</h2><p>命令行参数建议使用jmxcmd.jar，下载地址如下：</p><p><a href="https://sourceforge.net/projects/jmxcmd/" target="_blank" rel="noopener">https://sourceforge.net/projects/jmxcmd/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[tomcat@localhost tmp]$ java -jar jmxcmd.jar - 192.168.100.1:8098 &gt; weblogic_mebean.txt</span><br><span class="line">查看所有mbean</span><br><span class="line"></span><br><span class="line">[tomcat@localhost tmp]$ java -jar jmxcmd.jar - 192.168.100.1:8098  java.lang:type=Memory NonHeapMemoryUsage</span><br><span class="line">01/09/2019 10:46:18 +0800 de.layereight.jmxcmd.Client NonHeapMemoryUsage: </span><br><span class="line">committed: 271056896</span><br><span class="line">init: 270991360</span><br><span class="line">max: 587202560</span><br><span class="line">used: 92159504</span><br><span class="line">查看非堆内存</span><br><span class="line">[tomcat@localhost tmp]$ </span><br><span class="line">[tomcat@localhost tmp]$ java -jar jmxcmd.jar - 192.168.100.1:8098  com.bea:Name=ThreadPoolRuntime,ServerRuntime=srv_13_22_7003,Type=ThreadPoolRuntime QueueLength</span><br><span class="line">01/09/2019 10:28:10 +0800 de.layereight.jmxcmd.Client QueueLength: 0</span><br><span class="line">[tomcat@localhost tmp]$ </span><br><span class="line">查看srv_13_22_7003 的线程池队列长度</span><br><span class="line">[tomcat@localhost tmp]$ java -jar jmxcmd.jar - 192.168.100.1:8098  com.bea:Name=ThreadPoolRuntime,ServerRuntime=srv_13_22_7003,Type=ThreadPoolRuntime HoggingThreadCount</span><br><span class="line">01/09/2019 10:42:36 +0800 de.layereight.jmxcmd.Client HoggingThreadCount: 0</span><br><span class="line">[tomcat@localhost tmp]$  </span><br><span class="line">查看srv_13_22_7003 的线程池Hogging线程数</span><br></pre></td></tr></table></figure><h2 id="基于Jconsole测试"><a href="#基于Jconsole测试" class="headerlink" title="基于Jconsole测试"></a>基于Jconsole测试</h2><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1547015840014.png" alt="1547015840014"></p><p><strong>Jconsole查看</strong></p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/Zabbix%E5%9F%BA%E4%BA%8EJMX%E7%9B%91%E6%8E%A7%E4%B8%AD%E9%97%B4%E4%BB%B6/1547016063506.png" alt="1547016063506"></p><h2 id="基于JRMC测试"><a href="#基于JRMC测试" class="headerlink" title="基于JRMC测试"></a>基于JRMC测试</h2><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1547015878482.png" alt="1547015878482"></p><p><strong>JRMC查看</strong></p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1547016244429.png" alt="1547016244429"></p><h1 id="Mbean"><a href="#Mbean" class="headerlink" title="Mbean"></a>Mbean</h1><p>Weblogic Mbean在线文档：WebLogic Server® MBean Reference</p><p><a href="https://docs.oracle.com/middleware/11119/wls/WLMBR/core/index.html" target="_blank" rel="noopener">https://docs.oracle.com/middleware/11119/wls/WLMBR/core/index.html</a></p><p>Tomcat Mbean在线文档</p><p><a href="http://tomcat.apache.org/tomcat-7.0-doc/monitoring.html" target="_blank" rel="noopener">http://tomcat.apache.org/tomcat-7.0-doc/monitoring.html</a></p><h1 id="同一主机上监控多个Java进程Key健冲突问题"><a href="#同一主机上监控多个Java进程Key健冲突问题" class="headerlink" title="同一主机上监控多个Java进程Key健冲突问题"></a>同一主机上监控多个Java进程Key健冲突问题</h1><p>生产环境中我们经常使用同一台主机来搭建多个Tomcat或Weblogic节点对外提供服务，可是在监控主机时会碰到这样的问题，在被监控主机上使用模板，只能监控其中一个，如果想监控多个实例，我们只能通过添加多个模板来实现。这里提供两种解决方案：</p><h2 id="对每个JVM进程当做一台主机"><a href="#对每个JVM进程当做一台主机" class="headerlink" title="对每个JVM进程当做一台主机"></a>对每个JVM进程当做一台主机</h2><p>在zabbix 中建立两台主机，jmx接口不同。</p><p>缺点，主机监控数据</p><p><strong>tomcat1</strong>:</p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1551322667467.png" alt="1551322667467"></p><p><strong>tomcat2</strong>:</p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1551322730164.png" alt="1551322730164"></p><h2 id="使用空格防止Key健冲突"><a href="#使用空格防止Key健冲突" class="headerlink" title="使用空格防止Key健冲突"></a>使用空格防止Key健冲突</h2><p>在同一主机上，zabbix不允键值重复，但是监控的项目是一样的，不可能键值写的不重复，经过几番搜索，找到方法如下：</p><p>只要在箭头处添加1个空格就可以，也可以是多个。（注意位置不要错，在逗到后面）</p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1551773907058.png" alt="1551773907058"></p><p><strong>错误方式：</strong></p><p><img src="/2019/07/01/Zabbix基于JMX监控中间件/1551323034173.png" alt="1551323034173"></p><h1 id="欢迎关注米宝窝，持续更新中，谢谢！"><a href="#欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="欢迎关注米宝窝，持续更新中，谢谢！"></a>欢迎关注米宝窝，持续更新中，谢谢！</h1><p>[米宝窝 <a href="https://rocklei123.github.io/" target="_blank" rel="noopener">https://rocklei123.github.io/</a> ](</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本主题为通过zabbix监控中间件。&lt;/p&gt;
&lt;p&gt;Zabbix 基于JMX agent(zabbix-java-gateway) 获取JVM MBean 信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Zabbix" scheme="http://yoursite.com/categories/Zabbix/"/>
    
    
      <category term="Zabbix" scheme="http://yoursite.com/tags/Zabbix/"/>
    
      <category term="JMX" scheme="http://yoursite.com/tags/JMX/"/>
    
  </entry>
  
  <entry>
    <title>zabbix基于snmp协议监控weblogic</title>
    <link href="http://yoursite.com/2019/07/01/zabbix%E5%9F%BA%E4%BA%8Esnmp%E5%8D%8F%E8%AE%AE%E7%9B%91%E6%8E%A7weblogic%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/"/>
    <id>http://yoursite.com/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/</id>
    <published>2019-07-01T01:34:54.000Z</published>
    <updated>2019-07-03T03:09:00.750Z</updated>
    
    <content type="html"><![CDATA[<p>本主题为通过zabbix监控中间件（基于snmp协议）。</p><a id="more"></a><h1 id="zabbix相关介绍"><a href="#zabbix相关介绍" class="headerlink" title="zabbix相关介绍"></a>zabbix相关介绍</h1><p>​    本文档讲述的是关于zabbix基于snmp协议监控weblogic相关实现。</p><p>​    这里首先我们要知道要使用zabbix进行监控，至少需要他的两个部分来实现组成。</p><p>​    第一部分是在服务端需要部署的zabbix_server，这个程序是部署在LAMP的相关环境下的，后续会有相关文档进行对于zabbix_server安装的说明，这里就不多做赘述了。</p><p>​    第二部分是在客户端需要部署的zabbix_agent，这个程序是不需要相关的运行环境，只需要在客户端进行相关的配置，以及安装就可以了。</p><h1 id="zabbix-agent端的部署"><a href="#zabbix-agent端的部署" class="headerlink" title="zabbix_agent端的部署"></a>zabbix_agent端的部署</h1><p>​    首先登录到被监控端Linux 服务器上，安装zabbix agent  ，过程不在本文档赘述（本人环境使用rpm包安装）。安装位置在 /etc/zabbix/zabbix_agentd.conf。编辑 /etc/zabbix/zabbix_agentd.conf配置如下几项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PidFile=/var/run/zabbix/zabbix_agentd.pid</span><br><span class="line">LogFile=/var/log/zabbix/zabbix_agentd.log  日志位置</span><br><span class="line">Server=127.0.0.1         服务器端IP</span><br><span class="line">ListenPort=10050</span><br><span class="line">ServerActive=127.0.0.1   服务器端IP</span><br><span class="line">Hostname=127.0.0.1 (监控目标端主机名称)  这里配置的是主机名称，这个名称必须与zabbix_server配置的主机名称是一致的。</span><br></pre></td></tr></table></figure><p>查看状态、停止、启动相关命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">源码包安装的agent启动：</span><br><span class="line">./zabbix_agentd -c /wetc/zabbix/conf/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">rpm包安装的agent：</span><br><span class="line">Centos6 或者redhat6 </span><br><span class="line">chkconfig --list 查看服务名称</span><br><span class="line"> service zabbix-agent   status</span><br><span class="line"> service zabbix-agent   stop</span><br><span class="line"> service zabbix-agent   start</span><br><span class="line">CentOs7 或者Redhat7 </span><br><span class="line">systemctl stop  zabbix-agent.service </span><br><span class="line">systemctl start  zabbix-agent.service </span><br><span class="line">systemctl status  zabbix-agent.service</span><br></pre></td></tr></table></figure><p>之后我们可以查看相关的日志文件，也就是zabbix_agentd.log文件中的内容，来查看程序的启动情况。</p><p>/var/log/zabbix/zabbix_agentd.log </p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547004802350.png" alt="1547004802350"></p><p><strong>可能出现的问题</strong></p><p>当我们启动agent时，可能日志中会报出如下错误：</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547004894106.png" alt="1547004894106"></p><p>这是因为在server端没有配置相应名称的hostname所导致的。</p><h1 id="被监控端Weblogic设置"><a href="#被监控端Weblogic设置" class="headerlink" title="被监控端Weblogic设置"></a>被监控端Weblogic设置</h1><p>我们监控服务器时，需要经过相关的SNMP协议来对服务器进行监控，这里我们需要在控制台上进行相关的配置。</p><p>首先我们登录相关的控制台：</p><p>会在页面中看到如下内容，点击新建</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/wpsA32C.tmp.png" alt="img"> </p><p>这里面输入需要创建的SNMP相关的名称，这里请遵循相应的命名规则来进行命名。</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/wpsA33D.tmp.png" alt="img"> </p><p>之后点入新创建的SNMP进行相关内容的配置</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/wpsA34D.tmp.png" alt="img"> </p><p>这里先输入 SNMP UDP端口 这里我输入的为8098，后输入主要AgentX端口 同样为8098这里的端口号，请遵循创建时的相应规则。陷阱版本选择V1<img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547005117125.png" alt="1547005117125"></p><p>将ServerSNMPAgent部署到目标节点上。选择启用后，进行保存，并点击标签中的目标项。</p><p>目标项中选择SNMP协议相对应的端点，来进行目标的指向，当所有的节点SNMP均配置完成后，于控制台的配置基本完成。</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547007446759.png" alt="1547007446759"></p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547007466634.png" alt="1547007466634"></p><h1 id="测试访问联通性"><a href="#测试访问联通性" class="headerlink" title="测试访问联通性"></a>测试访问联通性</h1><h2 id="确保Weblogic监听SNMP"><a href="#确保Weblogic监听SNMP" class="headerlink" title="确保Weblogic监听SNMP"></a>确保Weblogic监听SNMP</h2><p>以上配置完成后，需要重启Weblogic节点，查看Weblogic节点启动日志，会出现如下信息，表示Weblogic配置完成，并且已经监听SNMP端口。</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547007579228.png" alt="1547007579228"></p><h2 id="测试工具测试"><a href="#测试工具测试" class="headerlink" title="测试工具测试"></a>测试工具测试</h2><h3 id="安装测试工具snmpwalk"><a href="#安装测试工具snmpwalk" class="headerlink" title="安装测试工具snmpwalk"></a>安装测试工具snmpwalk</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install net-snmp-utils</span><br></pre></td></tr></table></figure><h3 id="测试srv-13-22-7003-节点-ExecuteThreadTotalCount"><a href="#测试srv-13-22-7003-节点-ExecuteThreadTotalCount" class="headerlink" title="测试srv_13_22_7003 节点 ExecuteThreadTotalCount"></a>测试srv_13_22_7003 节点 ExecuteThreadTotalCount</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 210.72.13.22:8098  1.3.6.1.4.1.140.625.367.1.25.16.35.6.159.237.53.118.39.151.17.79.45.166.52.193.171.147</span><br></pre></td></tr></table></figure><p>测试srv_13_22_7003 节点 ExecuteThreadTotalCount，如果执行成功出现如下信息表示<strong>Weblogic SNMP 配置成功：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SNMPv2-SMI::enterprises.140.625.367.1.25.16.35.6.159.237.53.118.39.151.17.79.45.166.52.193.171.147 = INTEGER: 6</span><br></pre></td></tr></table></figure><h1 id="zabbix-server页面相关配置"><a href="#zabbix-server页面相关配置" class="headerlink" title="zabbix_server页面相关配置"></a>zabbix_server页面相关配置</h1><h2 id="主机的创建"><a href="#主机的创建" class="headerlink" title="主机的创建"></a>主机的创建</h2><p>基本的准备工作完成之后，我们需要登录zabbix_server控制台进行主机监控项的配置</p><ul><li><p>进入登录页面点击Configuration –&gt; Hosts –&gt; Create host进行主机的创建。</p></li><li><p>输入Host name ,这里再次强调Host name的内容需要与<strong>agent端配置文件</strong>中的Host name内容一致</p></li><li><p>Agent interface中输入需要监控的服务器IP地址，并输入相应的监控端口，这里的端口与zabbix_agentd.conf中配置的一致，这里我并有进行配置，只是用了默认的10050，如果有需要可以修改文件中的变量Listen Port进行相关配置。</p></li></ul><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547009340217.png" alt="1547009340217"></p><ul><li>点击Add，基本的主机便建立完成了</li></ul><p>返回到Hosts页面 发现新建的主机 之后点进去进行相关的配置操作。</p><h2 id="SNMP配置"><a href="#SNMP配置" class="headerlink" title="SNMP配置"></a>SNMP配置</h2><p>这里进行的SNMP配置与控制台的SNMP配置相对应，ip为被监控主机地址，而端口则为控制台所配置的UDP端口。</p><p>例如：第一个UDP端口为8098，所以这里相对应的端口号也为8098。</p><h2 id="监控项的配置"><a href="#监控项的配置" class="headerlink" title="监控项的配置"></a>监控项的配置</h2><p><strong>于相应主机栏中，选择items,点击进入</strong></p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547009559782.png" alt="1547009559782"></p><p><strong>Name：</strong>首先输入Name,这里的Name为需要监控的内容名称，可以自己决定取名，但最好遵循相应的规则，这里我选择监控队列数，因为监控的是第一台服务器的第一个节点，所以这里的name我命名为7003-QueueLength</p><p><strong>Type</strong>选择SNMPv1 agent 这里的类型和控制台所配置的陷阱版本是相对应的。</p><p><strong>key 和SNMP OID</strong> 相同，通过MIB 浏览器来获得：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">queueLength  1.3.6.1.4.1.140.625.367.1.35.16.35.6.159.237.53.118.39.151.17.79.45.166.52.193.171.147</span><br></pre></td></tr></table></figure><p>OID 信息可以通过如下命令输出到文件中查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 210.72.13.22:8098 1.3.6.1.4.1.140.625 &gt; weblogic_oid.txt</span><br></pre></td></tr></table></figure><p><strong>在进入监控项页面点击创建监控项，并填入相关内容：</strong></p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547009134835.png" alt="1547009134835"></p><h2 id="OID的获取"><a href="#OID的获取" class="headerlink" title="OID的获取"></a>OID的获取</h2><h3 id="WebLogic-所有-OID-信息查询"><a href="#WebLogic-所有-OID-信息查询" class="headerlink" title="WebLogic 所有 OID 信息查询"></a>WebLogic 所有 OID 信息查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">snmpwalk -v 1 -c public 210.72.13.22:8098 1.3.6.1.4.1.140.625 &gt; weblogic_oid.txt</span><br></pre></td></tr></table></figure><ul><li><p>WebLogic SNMP Management Guide请参考</p><p><a href="https://docs.oracle.com/cd/E13222_01/wls/docs90/snmpman/snmpagent.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E13222_01/wls/docs90/snmpman/snmpagent.html</a></p></li><li><p>在线版本WebLogic Server® 9.0 MIB Reference</p><p><a href="https://docs.oracle.com/cd/E13222_01/wls/docs90/snmp/index.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E13222_01/wls/docs90/snmp/index.html</a></p></li><li><p>离线版本WebLogic Server® 9.0 MIB Reference</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost lib]# ls -l *.asn1</span><br><span class="line">-rwxr-x--- 1 tomcat tomcat 1879180 Aug 23 14:11 BEA-WEBLOGIC-MIB.asn1</span><br><span class="line">[root@localhost lib]# </span><br><span class="line">[root@localhost lib]# pwd</span><br><span class="line">/home/tomcat/Oracle/Middleware/wlserver_10.3/server/lib</span><br><span class="line">[root@localhost lib]#</span><br></pre></td></tr></table></figure><ul><li><p>离线版查看工具：MIB Browser</p><p><a href="http://ireasoning.com/downloadmibbrowserfree.php" target="_blank" rel="noopener">http://ireasoning.com/downloadmibbrowserfree.php</a></p></li></ul><h2 id="离线MIB-Browser的使用"><a href="#离线MIB-Browser的使用" class="headerlink" title="离线MIB Browser的使用"></a>离线MIB Browser的使用</h2><p>运行MIB Browser setup.exe</p><p>在安装时按正常顺序安装就可以了，安装好后双击进入MIB Browser</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/wps7DDE.tmp.png" alt="img"> </p><p>点击File –&gt; Load MIBs 加载BEA-WEBLOGIC-MIB.asn1文件，即可开始使用。</p><p>在图中Address位置，输入服务器的ip地址和UDP端口，点击Advanced,连接到相关地址。</p><p>查找相关的关键字，例如这里查找QueueLength</p><p>选中查找到的内容</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/wps6571.tmp.png" alt="img"> </p><p>会于页面左边显示相应的内容，此时我们就获得了相应的OID了</p><h2 id="验证Zabbix与目标主机SNMP连通性"><a href="#验证Zabbix与目标主机SNMP连通性" class="headerlink" title="验证Zabbix与目标主机SNMP连通性"></a>验证Zabbix与目标主机SNMP连通性</h2><p>zabbix控制台-&gt;目标主机-&gt;监控项 显示已启用为正常</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547010092558.png" alt="1547010092558"></p><p>如果被监控主机SNMP选项出现红色，表示该连接有问题，建议查看具体的日志：</p><p><img src="/2019/07/01/zabbix基于snmp协议监控weblogic安装使用手册/1547010485171.png" alt="1547010485171"></p><h1 id="欢迎关注米宝窝，持续更新中，谢谢！"><a href="#欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="欢迎关注米宝窝，持续更新中，谢谢！"></a>欢迎关注米宝窝，持续更新中，谢谢！</h1><p>[米宝窝 <a href="https://rocklei123.github.io/" target="_blank" rel="noopener">https://rocklei123.github.io/</a> ](</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本主题为通过zabbix监控中间件（基于snmp协议）。&lt;/p&gt;
    
    </summary>
    
      <category term="Zabbix" scheme="http://yoursite.com/categories/Zabbix/"/>
    
    
      <category term="Zabbix" scheme="http://yoursite.com/tags/Zabbix/"/>
    
      <category term="SNMP" scheme="http://yoursite.com/tags/SNMP/"/>
    
  </entry>
  
  <entry>
    <title>WebSphere Application Server 调优</title>
    <link href="http://yoursite.com/2019/07/01/WebSphere%20Application%20Server%20%E8%B0%83%E4%BC%98/"/>
    <id>http://yoursite.com/2019/07/01/WebSphere Application Server 调优/</id>
    <published>2019-07-01T01:34:54.000Z</published>
    <updated>2019-07-03T03:13:11.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WebSphere-Application-Server-调优（base-on-Was-8-5-5）"><a href="#WebSphere-Application-Server-调优（base-on-Was-8-5-5）" class="headerlink" title="WebSphere Application Server 调优（base on Was 8.5.5）"></a>WebSphere Application Server 调优（base on Was 8.5.5）</h1><p>作者：周磊，rocklei123.北京                                                             2019.1.10</p><h1 id="WebSphere-性能优化概述"><a href="#WebSphere-性能优化概述" class="headerlink" title="WebSphere 性能优化概述"></a>WebSphere 性能优化概述</h1><h2 id="性能问题发生在-WAS-和操作系统的各个环节中"><a href="#性能问题发生在-WAS-和操作系统的各个环节中" class="headerlink" title="性能问题发生在 WAS 和操作系统的各个环节中"></a>性能问题发生在 WAS 和操作系统的各个环节中</h2><p>性能问题可能发生于系统的各个环节中，当性能问题出来后很难马上就定位性能的瓶颈在哪里，即使找到了性能瓶颈，在进行调优的时候也要考虑系统整体环境，从上下文中分析，确定调优的策略；系统中一个或者多个“短板”的存在，就能让系统无法达到设计时的目标，无法达到预期的性能提升。</p><a id="more"></a><p><img src="https://www.ibm.com/developerworks/cn/websphere/library/techarticles/1106_zhuxl_websphereenhancement/images/image01.jpg" alt="å¾ 1. æ§è½é®é¢åçå¨ WAS åæä½ç³&quot;ç&quot;çåä¸ªç¯èä¸­"></p><h2 id="调优前需要知道的"><a href="#调优前需要知道的" class="headerlink" title="调优前需要知道的"></a>调优前需要知道的</h2><ul><li><p>调优是一个持续的过程</p></li><li><p>调优需要有工具和数据的支撑</p><ul><li>漏斗原则</li><li>绘制吞吐率曲线</li></ul></li><li><p>WAS 性能调优没有捷径和魔术，因为每一个应用都有自己独特的特性和资源需求，而且他们使用 WAS 的资源也有各种不同的方式，每一套调优的参数和策略仅适用于当前的系统环境，在实际的系统环境中不能简单的将一种调优策略原封不动的移植到另外一个系统环境中，这样往往得不到预期的调优目的，还可能照成更多的性能瓶颈。</p></li></ul><h2 id="WAS-性能差的几种表现及解决方法"><a href="#WAS-性能差的几种表现及解决方法" class="headerlink" title="WAS 性能差的几种表现及解决方法"></a>WAS 性能差的几种表现及解决方法</h2><p>系统性能差一般有以下两种非常明显的表现形式</p><ul><li><p>第一种是 CPU 使用不高，用户感觉交易响应时间很长；</p><ul><li>可以断定是由于系统的某一小部分造成了瓶颈，导致了所有的请求都在等待。</li></ul></li><li><p>第二种是 CPU 使用很高，用户感觉交易响应时间很长。</p><ul><li>比较复杂。可能的根源之一是硬件资源不够。根源之二是应用系统中产生了多个大对象。根源之三是程序算法有问题。</li></ul></li></ul><h2 id="推荐WebSphere-官方调优文档"><a href="#推荐WebSphere-官方调优文档" class="headerlink" title="推荐WebSphere 官方调优文档"></a>推荐WebSphere 官方调优文档</h2><p>WebSphere Application Server 调优：建议官方查看调整完整概要文件</p><p><a href="https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tfullp_tun.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tfullp_tun.html</a></p><h1 id="检查硬件配置和设置"><a href="#检查硬件配置和设置" class="headerlink" title="检查硬件配置和设置"></a>检查硬件配置和设置</h1><ol><li>优化磁盘速度</li><li>提高处理器速度和增大处理器高速缓存</li><li>增大系统内存</li><li>使网卡和网络交换机以全双工方式工作</li></ol><h1 id="调整操作系统"><a href="#调整操作系统" class="headerlink" title="调整操作系统"></a>调整操作系统</h1><ul><li>调整 Windows 系统</li><li>调整 Linux 系统</li><li>调整 AIX 系统</li><li>调整 Solaris 系统</li><li>调整 HP 系统</li></ul><h2 id="调整-Linux-系统"><a href="#调整-Linux-系统" class="headerlink" title="调整 Linux 系统"></a>调整 Linux 系统</h2><p>根据调整需求，配置下列设置和变量：</p><ul><li><p>更改 TCP 参数</p><ul><li><p><strong>描述：</strong> Linux 提供了许多可调 TCP 参数，其缺省值对于 WebSphere Application Server 来说可能就足够了。在某些例外情况下，可能必须调整这些参数。例如，您可能会减少特定状态（例如，TIME_WAIT）下套接字的数目、修改 TCP 保持活动操作或者修改其他功能。</p></li><li><p>如何查看或设置：</p><p>请查阅 Linux 分发中“man tcp”下提供的详细信息。</p></li></ul></li><li><p>Linux 文件描述符 (ulimit)</p><ul><li><strong>描述：</strong>指定支持打开的文件数。通常，缺省设置适合于大多数应用程序。 如果将此参数值设置得太小，那么可能会显示文件打开错误、内存分配故障或连接建立错误。</li><li><strong>如何查看或设置：</strong>请参阅有关 <strong>ulimit</strong> 命令的 UNIX 参考页面以了解不同 shell 的语法。对于 KornShell shell (ksh) 程序，要将 <strong>ulimit</strong> 命令设置为 8000，请发出 <strong>ulimit -n 8000</strong> 命令。使用 <strong>ulimit -a</strong> 命令来显示所有系统资源限制的当前值。</li><li><strong>缺省值：</strong>对于 SUSE Linux Enterprise Server 9 (SLES 9)，缺省值是 1024。</li><li><strong>建议值：</strong>8000</li></ul></li><li><p>连接储备</p><ul><li><p>描述：</p><p>当由于入局连接请求比率过高而导致连接故障时，请更改下列参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo 3000 &gt; /proc/sys/net/core/netdev_max_backlog</span><br><span class="line">echo 3000 &gt; /proc/sys/net/core/somaxconn</span><br></pre></td></tr></table></figure></li></ul></li><li><p>TCP_KEEPALIVE_INTERVAL</p><ul><li><p><strong>描述：</strong>确定两次 isAlive 时间间隔探测之间的等待时间。</p></li><li><p>如何查看或设置：</p><p>发出以下命令来设置此值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 15 &gt; /proc/sys/net/ipv4/tcp_keepalive_intvl</span><br></pre></td></tr></table></figure></li><li><p><strong>缺省值：</strong>75 秒</p></li><li><p><strong>建议值：</strong>15 秒</p></li></ul></li><li><p>TCP_KEEPALIVE_PROBES</p><ul><li><p><strong>描述：</strong>确定超时前的探测次数。</p></li><li><p>如何查看或设置：</p><p>发出以下命令来设置此值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 5  &gt; /proc/sys/net/ipv4/tcp_keepalive_probes</span><br></pre></td></tr></table></figure></li><li><p><strong>缺省值：</strong>9 秒</p></li><li><p><strong>建议值：</strong>5 秒</p></li></ul></li></ul><h2 id="调整-AIX-系统"><a href="#调整-AIX-系统" class="headerlink" title="调整 AIX 系统"></a>调整 AIX 系统</h2><p>根据需要，更改下列配置设置或变量：</p><ul><li><p>TCP_TIMEWAIT</p><ul><li><p><strong>描述：</strong>指定时间（以 15 秒为时间间隔），TCP/IP 必须经过该时间之后才能释放已关闭的连接并复用其资源。例如，如果对此属性指定值 1，那么 TCP/IP 必须经过 15 秒之后才能释放已关闭的连接并复用其资源。</p></li><li><p>关闭与释放之间的这段时间称为 TIME_WAIT 状态或者两倍最大段生存期 (2MSL) 状态。此时间期间，重新打开到客户机和服务器的连接的成本少于建立新连接。通过减少此条目的值，TCP/IP 可以更快地释放关闭的连接，并为新连接提供更多资源。如果运行中的应用程序要求快速释放连接或创建新连接，或者由于许多连接处于 TIME_WAIT 状态而导致吞吐量较低，请调整此参数。</p></li><li><p>如何查看或设置：</p><p>发出以下命令以将 TCP_TIMEWAIT 状态设置为 1（15 秒）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/sbin/no –o tcp_timewait =1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装了 DB2® 的 AIX 操作系统</p><ul><li><strong>描述：</strong>如果将 DB2 日志文件与物理数据库文件分开存储，那么可以提高性能。您还可以将日志和数据库文件从包含日志文件系统 (JFS) 服务的驱动器中分离出来。AIX 使用特定的卷组和文件系统来进行 JFS 记录。</li><li><strong>如何查看或设置：</strong>使用 AIX filemon 实用程序来查看所有文件系统输入和输出，并在战略上选择 DB2 日志文件的文件系统。根据 DB2 日志记录信息来设置 DB2 日志位置。</li><li><strong>缺省值：</strong>DB2 日志文件的缺省位置通常是存储数据库表的磁盘驱动器。</li><li><strong>建议值：</strong>将日志文件移动到不用于存储 DB2 数据并且具有最低输入或输出活动量的磁盘。</li></ul></li><li><p>AIX 文件描述符 (ulimit)</p><ul><li><p><strong>描述：</strong>对用户帐户指定资源使用的各种限制。ulimit -a 命令显示所有 ulimit 限制，其中包括允许打开的文件数。打开文件设置的缺省数目 (2000) 通常足以供大多数应用程序使用。如果对此参数设置的值太小，在打开文件或建立连接时就可能会出错。由于此值限制服务器进程可打开的文件描述符数，因此如果值太小，就会导致性能欠佳。</p></li><li><p>如何查看或设置：</p><p>执行以下步骤将打开文件限制值更改为 10,000 个文件：</p><ol><li><p>打开命令窗口。</p></li><li><p>编辑/etc/security/limits文件。将以下行添加到运行WebSphere Application Server进程的用户帐户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nofiles =  10000 </span><br><span class="line">nofiles_hard = 10000</span><br></pre></td></tr></table></figure></li><li><p>保存所作的更改。</p></li><li><p>重新启动 AIX 系统。</p></li><li><p>要验证结果，请在命令行上输入 ulimit -a 命令。</p></li></ol></li><li><p><strong>缺省值：</strong>对于 AIX 操作系统，缺省设置是 2000。</p></li><li><p>建议值：</p><p>该值取决于应用程序并专门应用于应用程序数据和应用程序堆栈。</p><p>增加 ulimit 文件描述符限制值可提高性能。根据应用程序的不同，可能需要增加其他限制的值。对数据或堆栈 ulimit 的任何更改应该确保数据+堆栈 &lt; 256MB（仅限于 32 位 WebSphere Application Server）。</p><p>对于数据，建议您将 ulimit 更改为“无限制”。</p></li></ul></li><li><p>AIX ARP 表存储区大小</p><ul><li><p>如何查看或设置：</p><p>netstat -p arp</p><p>将显示已发送的 ARP 包数和已从 ARP 表中清除的 ARP 条目数。如果要清除的条目数较大，请增大 ARP 表大小。使用arp -a来显示 ARP 表散列分布。设置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no -r -o arptab_size=10</span><br></pre></td></tr></table></figure></li><li><p><strong>缺省值：</strong>14400 个半秒（2 小时）。</p></li><li><p><strong>建议值：</strong>600 个半秒（5 分钟）。</p></li></ul></li><li><p>TCP_KEEPINTVL</p><ul><li><p><strong>描述：</strong>指定为了验证连接而发送的各个包之间的时间间隔。</p></li><li><p>如何查看或设置：</p><p>使用以下命令来将此值设置为5秒：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no -o tcp_keepintvl=10</span><br></pre></td></tr></table></figure></li><li><p><strong>缺省值：</strong>150（1/2 秒）</p></li><li><p><strong>建议值：</strong>10（1/2 秒）</p></li></ul></li><li><p>TCP_KEEPINIT</p><ul><li><p><strong>描述：</strong>指定 TCP 连接的初始超时值。</p></li><li><p>如何查看或设置：使用以下命令来将此值设置为20秒：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no -o tcp_keepinit=40</span><br></pre></td></tr></table></figure></li><li><p><strong>缺省值：</strong>150（1/2 秒）</p></li><li><p><strong>建议值：</strong>40（1/2 秒）</p></li></ul></li><li><p>为 Java 虚拟机堆分配大页 (16 MB)</p><p>某些应用程序要求使用非常大的堆以提高性能。通过使用 CPU 和操作系统提供的大页支持，可以降低 CPU 管理大型堆的开销。以下步骤以大页 (16 MB) 形式分配 4 GB 的 RAM：</p><ol><li><p>作为 root 用户，运行下列命令以保留 4 GB 的大页：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vmo  -r  -o  lgpg_regions=256  -o lgpg_size=16777216  </span><br><span class="line">bosboot  -ad  /dev/ipldevice  </span><br><span class="line">reboot   -q</span><br></pre></td></tr></table></figure></li><li><p>在重新引导后，运行以下命令以便在 AIX 操作系统上启用大页支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmo -p -o  v_pinshm=1</span><br></pre></td></tr></table></figure></li><li><p>作为 root 用户，为用户添加下列能力：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chuser  capabilities=CAP_BYPASS_RAC_VMM,CAP_PROPAGATE  $USER</span><br></pre></td></tr></table></figure></li><li><p>将-Xlp Java 选项添加至 Java 命令。</p><ol><li>单击服务器 &gt; 服务器类型 &gt; WebSphere 应用程序服务器 &gt; server_name。</li><li>在服务器基础结构下，单击 Java 和进程管理 &gt; 进程定义 &gt; Java 虚拟机。</li><li>在通用 JVM 参数字段中，添加 -Xlp。</li></ol></li><li><p>添加EXTSHM 定制属性并设置为OFF。</p><ol><li>单击服务器 &gt; 服务器类型 &gt; WebSphere 应用程序服务器 &gt; server_name。</li><li>在服务器基础结构下，单击 Java 和进程管理 &gt; 进程定义 &gt; 环境条目 &gt; 新建。</li><li>在名称字段中，输入 EXTSHM。</li><li>在值字段中，输入 OFF。</li></ol></li><li><p>使用以下命令验证所使用的大页支持：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat  -l  1</span><br></pre></td></tr></table></figure><p>Note当应用程序运行时，“alp”列包含非零值。</p></li></ol><p>启用大页可能会出现严重后果。有关大页的更多详细信息，请参阅有关 AIX 大页的信息。</p><p>如果不想使用大页选项，也可以选择中等页面选项。中等页面大小选项在性能收益方面类似或接近于大页面。但是，它并不涉及为特定用户或进程保留物理内存的问题。有关更多信息，请阅读“调整 Java 虚拟机”信息。</p></li><li><p>其他 AIX 信息</p><p>考虑本文档未阐述的其他 AIX 操作系统设置。您还可以调整下列设置：</p><ul><li>适配器发送和接收队列</li><li>TCP/IP 套接字缓冲区</li><li>IP 协议 mbuf 池性能</li><li>更新文件描述符</li><li>更新调度程序</li></ul><p>有关 AIX 操作系统的更多信息，请参阅性能：学习资源信息。</p></li></ul><h2 id="调整HP-Unix-系统"><a href="#调整HP-Unix-系统" class="headerlink" title="调整HP Unix 系统"></a>调整HP Unix 系统</h2><p><a href="https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tprf_tunehp.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tprf_tunehp.html</a></p><p><strong>为什么要调整 TCP/IP 缓冲区</strong></p><p>WebSphere® Application Server 广泛地使用了 TCP/IP 套接字通信机制。对于 TCP/IP 套接字连接，发送和接收缓冲区大小定义了接收窗口。接收窗口指定在发送被中断前可以发送而不会被接收的数据量。如果发送太多数据，就会使缓冲区过载并中断传输。数据传输中断控制机制称为流量控制。如果 TCP/IP 缓冲区的接收窗口太小，接收窗口缓冲区就会频繁地过载，流量控制机制就会停止数据传输，直到接收缓冲区被清空为止。</p><h2 id="调整操作系统总结"><a href="#调整操作系统总结" class="headerlink" title="调整操作系统总结"></a>调整操作系统总结</h2><table><thead><tr><th>对象名</th><th>属性名</th><th>建议值</th></tr></thead><tbody><tr><td>操作系统参数</td><td>tcp_keepidle</td><td>600</td></tr><tr><td></td><td>tcp_keepintvl</td><td>10</td></tr><tr><td></td><td>tcp_keepinit</td><td>40</td></tr><tr><td></td><td>Soft FILE Size</td><td>-1</td></tr><tr><td></td><td>Soft CPU Time</td><td>-1</td></tr><tr><td></td><td>Soft STACK Size</td><td>-1</td></tr><tr><td></td><td>Soft CORE File Size</td><td>-1</td></tr><tr><td></td><td>Hard FILE Size</td><td>-1</td></tr><tr><td></td><td>Hard CPU Time</td><td>-1</td></tr><tr><td></td><td>Hard STACK Size</td><td>-1</td></tr><tr><td></td><td>Hard CORE File Size</td><td>-1</td></tr></tbody></table><h1 id="调整-JVM"><a href="#调整-JVM" class="headerlink" title="调整 JVM"></a>调整 JVM</h1><h2 id="版本查看"><a href="#版本查看" class="headerlink" title="版本查看"></a>版本查看</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –fullversion</span><br></pre></td></tr></table></figure><h2 id="选择稳定的JVM"><a href="#选择稳定的JVM" class="headerlink" title="选择稳定的JVM"></a>选择稳定的JVM</h2><ul><li><p>选择稳定的JDK：<br>刚刚GA的版本不稳定，比如1.5.0_00 1.6.0_00<br>刚增加新特性的版本不稳定，比如1.7.0_80  1.8.0_74<br>安装JDK之前，先看厂商的Release Notes</p></li><li><p>根据平台和应用，选择合适厂商的JDK：<br>HP-UX只能选择HP JDK，AIX只能选择IBM JDK<br>Windows、Linux可以选择SUN JDK和JRockit<br>Solaris平台，最好使用SUN JDK<br>开源JDK，目前生产环境中用的极少 </p></li></ul><h2 id="调整-IBM-Java-虚拟机"><a href="#调整-IBM-Java-虚拟机" class="headerlink" title="调整 IBM Java 虚拟机"></a>调整 IBM Java 虚拟机</h2><h3 id="IBM-JVM-内存结构"><a href="#IBM-JVM-内存结构" class="headerlink" title="IBM JVM 内存结构"></a>IBM JVM 内存结构</h3><p><img src="/2019/07/01/WebSphere Application Server 调优/1547038435814.png" alt="1547038435814"></p><h3 id="IBM-GC算法"><a href="#IBM-GC算法" class="headerlink" title="IBM GC算法"></a>IBM GC算法</h3><p>虽然每个策略都有独特优点，但对于 WebSphere Application Server V8.0 及更高版本，gencon 是缺省垃圾回收策略。应用程序服务器的先前版本指定 optthruput 作为缺省垃圾回收策略。</p><table><thead><tr><th>策略</th><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>针对吞吐量进行优化</td><td>-Xgcpolicy:optthruput（可选）</td><td>默认策略（WAS8以前版本）。提供高吞吐量，但垃圾回收暂停时间较长。在垃圾回收期间，将停止所有应用程序线程，以便进行标记、清理并根据需要进行压缩。gencon 策略对于大部分应用程序而言已经够用了。</td></tr><tr><td>针对停顿时间进行优化</td><td>-Xgcpolicy:optavgpause</td><td>策略通过在应用程序运行期间执行垃圾回收的标记和清理阶段来缩短垃圾回收暂停时间。此策略会对整体吞吐量产生轻微的性能影响。</td></tr><tr><td>分代并发</td><td>-Xgcpolicy:gencon</td><td>默认策略（WAS8以后版本）此策略与分代垃圾回收器配合使用。分代模式尝试实现高吞吐量并同时缩短垃圾回收暂停时间。为了实现此目标，将堆分为新区域和旧区域。长生命周期对象将被提升到旧空间，而短生命周期对象将在新空间中被迅速地作为垃圾回收。gencon 策略能使许多应用程序受益匪浅。但是，它并不适合所有应用程序，并且通常难以调整。</td></tr><tr><td>子池</td><td>-Xgcpolicy:subpool</td><td>策略可以提高多处理器系统（通常使用 8 个以上处理器）的性能。此策略仅适用于 IBM System i® System p® 和 System z® 处理器。subpool 策略与 gencon 策略类似，只是它将堆划分为子池以提高对象分配可伸缩性。</td></tr></tbody></table><p>将 <strong>gcpolicy</strong> 设置为 gencon 会禁用并发标记。除非应用程序响应时间不规律（这表示可能存在暂停时间问题），否则，使用 gencon 策略应可获得最佳的吞吐量结果。</p><p>将 <strong>gcpolicy</strong> 设置为 optavgpause 会使用缺省值来启用并发标记。此设置将减少由正常垃圾回收所引起的应用程序响应时间不规律情况。但是，此选项可能会降低整体吞吐量。</p><h3 id="切换到其他-GC-策略的原因-IBM"><a href="#切换到其他-GC-策略的原因-IBM" class="headerlink" title="切换到其他 GC 策略的原因-IBM"></a>切换到其他 GC 策略的原因-IBM</h3><table><thead><tr><th>GC收集器</th><th style="text-align:left">切换到其他 GC 策略的原因-IBM</th></tr></thead><tbody><tr><td>optavgpause</td><td style="text-align:left">我的应用程序无法忍受那么长的 GC 停顿时间。如果 GC 停顿时间能够减少的话，性能降低一些也可以接受。 我的应用程序正在一个 64 位平台上运行并使用非常大的堆 —— 超过 3 或 4GB。 我的应用程序是一个 GUI 应用程序，我很关注用户响应时间。</td></tr><tr><td>gencon</td><td style="text-align:left">我的应用程序分配了许多短期存活的对象。 堆空间出现碎片化。 我的应用程序是基于事务的（也就是说，在事务提交之后，事务中的对象就不再存活了）。</td></tr><tr><td>subpool</td><td style="text-align:left">在大型多处理器计算机上，我遇到了可伸缩性问题。</td></tr></tbody></table><h3 id="除此之外之外建议增加参数"><a href="#除此之外之外建议增加参数" class="headerlink" title="除此之外之外建议增加参数"></a>除此之外之外建议增加参数</h3><p>IBM JDK<br>-verbose:gc -Xverbosegclog:&lt;path_GC_log_file_name&gt;<br>-verbose:gc -Xverbosegclog:gc.log<br>-verbose:gc -Xverbosegclog:/tmp/gc.log</p><h3 id="中国银行标准环境建议参数"><a href="#中国银行标准环境建议参数" class="headerlink" title="中国银行标准环境建议参数"></a>中国银行标准环境建议参数</h3><h4 id="配置应用程序服务器-Server-JVM参数"><a href="#配置应用程序服务器-Server-JVM参数" class="headerlink" title="配置应用程序服务器(Server)JVM参数"></a>配置应用程序服务器(Server)JVM参数</h4><p>进入管理控制台-&gt;应用程序服务器-&gt;<em>server_name</em>-&gt;java和进程管理-&gt;进程定义-&gt;java虚拟机，对server进行如下设置：</p><h5 id="64位WAS"><a href="#64位WAS" class="headerlink" title="64位WAS"></a>64位WAS</h5><ul><li><strong>报表类、批量操作等需要占用大量内存的系统如下设置：</strong></li></ul><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆1024，最大堆6144；</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx1536m -Djava.net.preferIPv4Stack=true –<strong>配置应用程序服务器(Server)JVM参数</strong></p><p>进入管理控制台-&gt;应用程序服务器-&gt;<em>server_name</em>-&gt;java和进程管理-&gt;进程定义-&gt;java虚拟机，对server进行如下设置：</p><p><strong>1、64位WAS</strong> </p><p><strong>报表类、批量操作等需要占用大量内存的系统如下设置：</strong></p><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆1024，最大堆6144；</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx1536m -Djava.net.preferIPv4Stack=true –Xdisableexplicitgc -Xgc:preferredHeapBase=0x100000000</p><p>点击确定和保存之后，重启WAS Server生效。</p><p><strong>非报表类、批量操作，对内存无特殊要求的系统如下设置：</strong></p><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆1024，最大堆3072；</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx768m -Djava.net.preferIPv4Stack=true -Xdisableexplicitgc</p><p>点击确定和保存之后，重启WAS Server生效。</p><p><strong>测试环境</strong></p><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆512，最大堆1024；（如有特殊需求可自定义）</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx768m -Djava.net.preferIPv4Stack=true –Xdisableexplicitgc</p><p>点击确定和保存之后，重启WAS Server生效。</p><p><strong>2、32位WAS</strong> </p><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆512，最大堆1536； </p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns128m -Xmnx384m -Djava.net.preferIPv4Stack=true -Xdisableexplicitgc    </p><p>点击确定和保存之后，重启WAS Server生效。-Xgc:preferredHeapBase=0x100000000</p><p>点击确定和保存之后，重启WAS Server生效。</p><ul><li><strong>非报表类、批量操作，对内存无特殊要求的系统如下设置：</strong></li></ul><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆1024，最大堆3072；</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx768m -Djava.net.preferIPv4Stack=true -Xdisableexplicitgc</p><p>点击确定和保存之后，重启WAS Server生效。</p><ul><li><strong>测试环境</strong></li></ul><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆512，最大堆1024；（如有特殊需求可自定义）</p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns256m -Xmnx768m -Djava.net.preferIPv4Stack=true –Xdisableexplicitgc</p><p>点击确定和保存之后，重启WAS Server生效。</p><h5 id="32位WAS"><a href="#32位WAS" class="headerlink" title="32位WAS"></a>32位WAS</h5><p>打开详细垃圾回收；</p><p>JVM具体设置的参数为：初始堆512，最大堆1536； </p><p>JVM通用参数：</p><p>-Xgcpolicy:gencon -Xmns128m -Xmnx384m -Djava.net.preferIPv4Stack=true -Xdisableexplicitgc    </p><p>点击确定和保存之后，重启WAS Server生效。</p><h3 id="IBM-JDK-调优更多信息建议参考"><a href="#IBM-JDK-调优更多信息建议参考" class="headerlink" title="IBM JDK 调优更多信息建议参考"></a>IBM JDK 调优更多信息建议参考</h3><p><a href="https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tprf_tunejvm_v61.html" target="_blank" rel="noopener">https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/tprf_tunejvm_v61.html</a></p><h2 id="调整-HotSpot-Java-虚拟机（Solaris-和-HP-UX）"><a href="#调整-HotSpot-Java-虚拟机（Solaris-和-HP-UX）" class="headerlink" title="调整 HotSpot Java 虚拟机（Solaris 和 HP-UX）"></a>调整 HotSpot Java 虚拟机（Solaris 和 HP-UX）</h2><h3 id="HotSpot-JVM-内存结构"><a href="#HotSpot-JVM-内存结构" class="headerlink" title="HotSpot JVM 内存结构"></a>HotSpot JVM 内存结构</h3><p><img src="/2019/07/01/WebSphere Application Server 调优/1547039702466.png" alt="1547039702466"></p><h3 id="HotSpot-JVM-GC"><a href="#HotSpot-JVM-GC" class="headerlink" title="HotSpot  JVM GC"></a>HotSpot  JVM GC</h3><p>根据回收器，简单分为：</p><ul><li>串行  –XX:+UseSerialGC<br>Out of Box算法，年轻代串行复制，年老代串行标记整理，主要用于桌面应用</li><li>并行  –XX:+UseParallelGC<br>​     年轻代暂停应用程序，多个垃圾收集线程并行的复制收集，年老代暂停应用程序，与串行收集器一样，单垃圾收集线程标记整理。JDK 6.0启用该算法后，默认启用了-XX:+UseParallelOldGC，性能大为提高</li><li>并发(Concurrent Low Pause Collector) –XX:+UseConcMarkSweepGC<br>​     启用该参数，默认启用了-XX:+UseParNewGC；简单的说，并发是指用户线程与垃圾收集线程并发，程序在继续运行，而垃圾收集程序运行于其他CPU上。</li><li>Garbage First (G1) Garbage Collector<br>​     -XX:MaxGCPauseMillis=200  -XX:+UseG1GC<br>​      JDK7u04  以后引入， heap&gt;6G建议使用。 实际生产环境中还很少使用</li></ul><h3 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h3><ul><li>即使G1出来几年了，生产环境很多的JVM实例还是采用ParNew+CMS的组合</li><li>不只是CMS，就是G1，以及JDK11的ZGC都没有做到完全的并发。就目前笔者了解到的所有GC中，只有Azul的C4是完全并发的。</li></ul><p><strong>CMS收集器工作过程</strong></p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547038780024.png" alt="1547038780024"></p><p><strong>CMS收集器主要参数</strong></p><ul><li><p>-XX:CMSInitiatingOccupancyFraction=80（默认是92%）</p></li><li><p>-XX:+UseCMSInitiatingOccupancyOnly 表示只有在达到阈值才会进行回收。</p></li><li><p>-XX:CMSWaitDuration=5000 轮询的时间控制（默认是2秒钟）。<br>内存碎片问题，从而埋下发生FullGC导致长时间STW的隐患。</p></li><li><p>-XX:+UseCMSCompactAtFullCollection （默认值就是true）</p></li><li><p>-XX:CMSFullGCsBeforeCompaction=0在上一次CMS并发GC执行过后，到底还要再执行多少次full GC才会做压缩。（默认值是0）</p></li><li><p>-XX:CMSInitiatingPermOccupancyFraction：当永久区占用率达到这一百分比时，启动CMS回收</p></li></ul><p><strong>CMS GC要决定是否在full GC时做压缩，会依赖几个条件。其中，</strong><br>第一种条件，UseCMSCompactAtFullCollection 与 CMSFullGCsBeforeCompaction 是搭配使用的；前者目前默认就是true了，也就是关键在后者上。<br>第二种条件是用户调用了System.gc()，而且DisableExplicitGC没有开启。<br>第三种条件是young gen报告接下来如果做增量收集会失败；简单来说也就是young gen预计old gen没有足够空间来容纳下次young GC晋升的对象。</p><h3 id="考虑下列调整参数："><a href="#考虑下列调整参数：" class="headerlink" title="考虑下列调整参数："></a>考虑下列调整参数：</h3><ul><li>-XX:MaxPermSize（永久区域）</li><li>-Xmx（最大 Java 堆大小）</li><li>-XX:+DisableExplicitGC （禁用显式垃圾回收以消除任何不必要或不合时宜的主要垃圾回收循环）</li><li>调整区域大小以优化垃圾回收操作。</li></ul><h3 id="Sun-JDK常用参数"><a href="#Sun-JDK常用参数" class="headerlink" title="Sun JDK常用参数"></a>Sun JDK常用参数</h3><p>-XX:+UseSerialGC：在新生代和老年代使用串行收集器<br>-XX:+UseParNewGC：在新生代使用并行收集器<br>-XX:+UseParallelGC ：新生代使用并行回收收集器（ 使用Parallel收集器+ 老年代串行）<br>-XX:+UseParallelOldGC：使用Parallel收集器+ 老年代并行<br>-XX:ParallelGCThreads：设置用于垃圾回收的线程数<br>-XX:+UseConcMarkSweepGC:设置并发收集器<br>-XX:ParallelCMSThreads：设定CMS的线程数量<br>-Xms:初始堆大小<br>-Xmx:最大堆大小<br>-XX:SurvivorRatio：设置eden区大小和survivior区大小的比例<br>-XX:NewRatio:新生代和老年代的比<br>-XX:NewSize=n:设置年轻代大小</p><h3 id="除此之外建议参数"><a href="#除此之外建议参数" class="headerlink" title="除此之外建议参数"></a>除此之外建议参数</h3><p>Sun JDK<br>-verbose:gc -Xloggc:gc.log<br>-verbosegc -XX:+PrintGCDetails -Xloggc:ms1gc.log<br>-verbosegc -XX:+PrintGCDetails -Xloggc:/tmp/ms1gc.log<br>-XX:+HeapDumpOnOutOfMemoryError<br>-XX:HeapDumpPath=${目录}</p><h3 id="中国银行标准环境参数"><a href="#中国银行标准环境参数" class="headerlink" title="中国银行标准环境参数"></a>中国银行标准环境参数</h3><h4 id="配置应用程序服务器-Server-JVM参数-1"><a href="#配置应用程序服务器-Server-JVM参数-1" class="headerlink" title="配置应用程序服务器(Server)JVM参数"></a>配置应用程序服务器(Server)JVM参数</h4><p>进入管理控制台-&gt;应用程序服务器-&gt;<em>server_name</em>-&gt;java和进程管理-&gt;进程定义-&gt;java虚拟机，对server进行如下设置：打开详细垃圾回收，JVM堆调整为1024～3072。</p><h4 id="建议在HP系统的WAS中添加如下通用JVM参数："><a href="#建议在HP系统的WAS中添加如下通用JVM参数：" class="headerlink" title="建议在HP系统的WAS中添加如下通用JVM参数："></a>建议在HP系统的WAS中添加如下通用JVM参数：</h4><p>-XX:MaxPermSize=768m -Xverbosegc:file=Xverbosegc.out -XX:+HeapDump -XX:+HeapDumpOnOutOfMemoryError -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintHeapAtGC -server</p><p>可以防止永久代空间不足，输出更详细的垃圾回收日志，以及在内存溢出和执行kill -3时生成heapdump。其中-XX:MaxPermSize=768m 指定永久代为heap最大堆的1/4，即最大堆为3G时，设为768m，如果最大堆为6G，则设1536m。点击确定和保存之后，重启WAS Server生效。</p><h1 id="Websphere-JVM-日志优化"><a href="#Websphere-JVM-日志优化" class="headerlink" title="Websphere JVM 日志优化"></a>Websphere JVM 日志优化</h1><p>JVM日志设置：将SystemOut.log和SystemErr.log设置成为每天循环写入的格式，循环30天，具体可参考下图：</p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547042330610.png" alt="1547042330610"></p><h1 id="WebSphere-系统队列介绍和调优"><a href="#WebSphere-系统队列介绍和调优" class="headerlink" title="WebSphere 系统队列介绍和调优"></a>WebSphere 系统队列介绍和调优</h1><h2 id="WebSphere-排队网络"><a href="#WebSphere-排队网络" class="headerlink" title="WebSphere 排队网络"></a>WebSphere 排队网络</h2><p>当客户端发出一个请求时，该请求会从网络端开始依次进入 WehSphere 服务器的各个组件，这些请求会在各个组件中进行排队等候使用服务器资源或者等待进入下一个组件进一步被服务器处理请求，每个组件里的请求组成请求队列，而组件依次排列，就够成了 WebSphere 排队网络。正如下图所示，该排队网络包括互联网、Web 服务器、Web 容器、EJB 容器以及数据库端的连接池队列等等。WebSphere 队列里的各个组件是互相资源依赖的，对请求的平均服务时间依赖于服务器队列中每个组件在同一时间的最大并发数。</p><p><img src="/2019/07/01/WebSphere Application Server 调优/WebSphere%20Application%20Server%20%E8%B0%83%E4%BC%98/1547096742625.png" alt="1547096742625"></p><h2 id="保守队列和开放队列"><a href="#保守队列和开放队列" class="headerlink" title="保守队列和开放队列"></a>保守队列和开放队列</h2><ul><li><p>开发队列</p><ul><li>EJB 容器则继承了对象请求代理（ORB）的队列特性，属于开放队列。</li></ul></li><li><p>保守队列中的用户请求有两种状态</p><ul><li>激活状态</li><li>等待状态。</li></ul></li></ul><p>在 WebSphere 服务器的队列网络中，Web 服务器、Web 容器以及数据库连接池都属于保守队列。EJB 容器则继承了对象请求代理（ORB）的队列特性，属于开放队列。</p><h2 id="WebSphere-中的队列调优漏斗原则"><a href="#WebSphere-中的队列调优漏斗原则" class="headerlink" title="WebSphere 中的队列调优漏斗原则"></a>WebSphere 中的队列调优漏斗原则</h2><p>WAS 调优的第一原则就是漏斗原则。一般来说，让客户不能及时得到处理的请求在网络中等待，比让它们在 WebSphere 服务器中等待要好。下图的设置使得只有即将被服务器接受处理的请求才能进入 WAS 的排队网络，这样更能提高服务器的稳定性，而不至于当大量请求突然进入 WAS 时引起资源耗尽的情况。</p><p><img src="/2019/07/01/WebSphere Application Server 调优/WebSphere%20Application%20Server%20%E8%B0%83%E4%BC%98/1547097090736.png" alt="1547097090736"></p><p>在上图的例子中，我们可以看出，在 WebSphere 排队网络中，从上到下队列中处理请求的并发数越来越小。当 200 客户端请求到达 Web 服务器的时候，因为 Web 服务器设置了自己的最大并发数是 75，所以剩下的 125 个客户请求只能暂留在网络中进行排队等待被 Web 服务器处理；当这 75 个请求经过 Web 服务器被处理后，其中 25 个仍在停留在 Web 服务器中排队，而剩下的 50 个请求则进去 Web 容器被进一步处理；直到最后有 25 个请求到达最后的数据库端，这时请求被处理完毕。在这个系统中，每一个组件都在充分的工作，没有因为等待请求到来而造成的资源浪费，因为在任何一个时刻，每个队列里都有少量请求在等待着被下一个组件处理。因为大量的请求被阻止在 WebSphere 服务器的外面（网络），所以 WebSphere 的各个组件不会因为大量请求同时到来而引起资源耗尽，这样的设置增加了系统的稳定性。</p><h2 id="绘制吞吐率曲线"><a href="#绘制吞吐率曲线" class="headerlink" title="绘制吞吐率曲线"></a>绘制吞吐率曲线</h2><p>我们需要画出系统在运行时的吞吐率曲线，要完成曲线，需要准备一个测试用例，然后将系统运行起来，我们的目的是要将系统的潜能发挥到最大，即系统运行达到一个资源利用的饱和点。系统运行达到饱和点最有代表性新的特征就是 CPU 的利用率接近 100%。</p><ul><li><p>所有的队列并发数都设置为一个较大的值，而且各个队列的值也设成是相等的</p></li><li><p>在每一次的测试后，增加用户并发数，迭代测试（1,5,10,25,50,100,150,200…）</p></li><li><p>记录下每次系统的吞吐率和响应时间，就得到了类似于下图的吞吐率曲线。</p></li></ul><p><img src="/2019/07/01/WebSphere Application Server 调优/WebSphere%20Application%20Server%20%E8%B0%83%E4%BC%98/1547097534061.png" alt="1547097534061"></p><h2 id="根据应用的实际情况来调整队列"><a href="#根据应用的实际情况来调整队列" class="headerlink" title="根据应用的实际情况来调整队列"></a>根据应用的实际情况来调整队列</h2><p>仅仅根据上面的准则来调优 WAS 是远远不够的，我们还应根据应用的使用环境和访问模型来调整各个队列的大小。并不是所有的请求都会从上一个队列进入到下一个队列中，比如，有些请求可能在经过 Web 服务器处理后就返回给客户端了，因为这些用户仅仅是想请求一些静态的页面内容，这时我们可以将 Web 服务器的队列值设的大一些，我们上面将 Web 服务器设成 75 就是这样的考虑；又比如，如果在一个应用中，大部分的请求都需要进行复杂而耗时的数据库操作，这时我们就应该考虑同时加大数据库连接池和 Web 容器的队列值大小。所以，在我们实际的调优中，必须结合具体的应用来确定合适的值，并在不断调整的过程中，监控 CPU 和内存的使用，避免系统资源耗尽的情况出现。</p><h2 id="WebSphere-池资源调优的最佳实践"><a href="#WebSphere-池资源调优的最佳实践" class="headerlink" title="WebSphere 池资源调优的最佳实践"></a>WebSphere 池资源调优的最佳实践</h2><h3 id="ORB-调优"><a href="#ORB-调优" class="headerlink" title="ORB 调优"></a>ORB 调优</h3><p><strong>Websphere 架构</strong></p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547099913542.png" alt="1547099913542"></p><p><strong>WAS EJB容器</strong></p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547099823133.png" alt="1547099823133"></p><p>可以使用 WAS 管理控制台进行 ORB 线程池的配置，位于 Application servers &gt; AppServer name &gt; Thread pools &gt; ORB.thread.pool</p><ul><li><p>第一种场景中，servlet 主要做一些持续时间非常短的远程调用，servlet 可以重用已经存在的 ORB 线程。在这种情况下，ORB 线程池可以设的比较小，例如只要设置为 Web 容易最大并发量的一半就行；</p></li><li><p>第二种场景中，持续时间比较长的 EJB 调用将会长期的占用 ORB 连接，因此该连接被重用的机会很小，所以在这种场景中，最好将 ORB 线程池的大小与 Web 容器的最大并发量设置成相等，或者更大。</p></li></ul><p><img src="/2019/07/01/WebSphere Application Server 调优/1547100192761.png" alt="1547100192761"></p><h3 id="Web-容器线程池"><a href="#Web-容器线程池" class="headerlink" title="Web 容器线程池"></a>Web 容器线程池</h3><p><strong>WebContainer线程池</strong></p><p><strong>中国银行标准环境调优</strong>： 调整WebContainer线程池最小大小和最大大小分别为100、100。确认后保存。</p><p><strong>调优准则</strong>：一般来说，每个服务器 CPU，5 至 10 个线程将会提供最佳吞吐量。</p><p><strong>调优参考：</strong>另外我们也可以利用 WAS 自带的 TPV 来帮助我们设置 Web 容器线程池。对系统做一个压力测试，保持一定的负载，观测 TPV 中的 <code>PercentMaxed</code> 和 <code>ActiveCount</code>的值。</p><ul><li>PercentMaxed 表示所有线程被使用的平均百分比，如果该值较大，那么就应该增大线程池的值</li><li>ActiveCount 表示被激活的线程个数，如果该值远小于当前线程池的大小，那么可以考虑减小线程池的值。`</li></ul><h3 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h3><p>见下文《JDBC数据库连接池优化》</p><h1 id="调整传输通道服务"><a href="#调整传输通道服务" class="headerlink" title="调整传输通道服务"></a>调整传输通道服务</h1><p><strong>此小结非重点内容，请着重关注中国银行标准环境设置建议总结</strong></p><p>传输通道服务管理 HTTP 和 JMS 请求的客户机连接和 I/O 处理。这些 I/O 服务基于 Java™ 提供的非分块 I/O（NIO）功能。</p><p>通过更改一个或多个与传输链相关联的传输通道的缺省设置值，可以提高该通道的性能。</p><p><img src="https://www.ibm.com/support/knowledgecenter/zh/SSEQTP_8.5.5/com.ibm.websphere.base.doc/ae/images/trun_cfstuning.gif" alt="åä¸ååä¸­æ ¸å¿ç&quot;ä¹é´çéä¿¡"></p><ul><li><p>调整 TCP 传输通道设置。</p><ol><li>减小指定的最大打开连接数属性值。 此参数控制可供服务器使用的最大连接数。如果让此参数保留为缺省值 20000（它是最大连接数），那么可能会导致停止的 Web 站点处于失败状态，因为产品会继续接受连接，因而会增加连接及相关联的工作的积压。应将缺省值更改为一个小很多的值（例如 500），然后应执行其他调整和测试，以确定应为特定 Web 站点或应用程序部署指定的最佳值。</li><li>如果关闭客户机连接前未能及时地将数据写回到客户机，那么，请更改“不活动超时”参数值。此参数控制可供服务器使用的最大连接数。接收到新连接后，TCP 传输通道先等待足够的数据到达，然后再将该连接分派给 TCP 传输通道上特定于协议的通道。如果在对“不活动超时”参数指定的时间段内未接收到足够的数据，TCP 传输通道就会关闭该连接。此参数的缺省值是 60 秒。此值适合于大多数应用程序。如果工作负载涉及许多连接，并且所有这些连并非都能够在 60 秒内接受服务，那么应该增大对此参数指定的值。</li></ol></li></ul><h2 id="中国银行标准环境设置建议总结"><a href="#中国银行标准环境设置建议总结" class="headerlink" title="中国银行标准环境设置建议总结"></a>中国银行标准环境设置建议总结</h2><p><strong>Maximum open connections</strong></p><p>将该标准定为1500，但由于该值与server数量和webserver的数量密切相关，所以具体的值还需要根据实际的server数量和webserver数量来调整：</p><p>在管理控制台中，单击服务器 &gt; 应用程序服务器 &gt; server_name。然后在 Web 容器设置下，单击Web 容器传输链-&gt; WCInboundDefault &gt; TCP inbound channel (TCP_2),</p><p>将Maximum open connections 的值由20000修改为1500。</p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547100911024.png" alt="1547100911024"></p><h1 id="调整-Web-服务器"><a href="#调整-Web-服务器" class="headerlink" title="调整 Web 服务器"></a>调整 Web 服务器</h1><h3 id="通过用性"><a href="#通过用性" class="headerlink" title="通过用性"></a>通过用性</h3><p><strong>整 IBM® HTTP Server 2.0.47.1、Apache 2.0.48、IBM HTTP Server 6.0 和 IBM HTTP Server 6.1。</strong></p><p>监视 CPU 利用率并检查 IBM HTTP Server 的 error_log 和 http_plugin.log 文件可以帮助您诊断 Web 服务器性能问题。</p><h3 id="打开IBM-HTTP-Server-监视功能"><a href="#打开IBM-HTTP-Server-监视功能" class="headerlink" title="打开IBM HTTP Server 监视功能"></a>打开IBM HTTP Server 监视功能</h3><p>也可以将 IBM HTTP Server 配置为显示状态页面：</p><ul><li><p>编辑 IBM HTTP Server 的 httpd.conf 文件，从此文件的下列各行中除去注释字符 (#)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#LoadModule status_module, modules/ApacheModuleStatus.dll,</span><br><span class="line">#&lt;Location/server-status&gt;</span><br><span class="line">#SetHandler server-status</span><br><span class="line">#&lt;/Location&gt;</span><br></pre></td></tr></table></figure></li><li><p>保存更改并重新启动 IBM HTTP Server。</p></li><li><p>在 Web 浏览器中，访问 <a href="http://your_host/server-status。或者，单击重新装入以更新状态。" target="_blank" rel="noopener">http://your_host/server-status。或者，单击重新装入以更新状态。</a></p></li><li><p>（可选）如果浏览器支持刷新，那么转至 <a href="http://your_host/server-status?refresh=5" target="_blank" rel="noopener">http://your_host/server-status?refresh=5</a> 以便每 5 秒钟刷新一次。</p></li></ul><p>所有这些 Web 服务器都将分配一个线程来处理每个客户机连接。通过确保有足够的线程可用于最大数目的并发客户机连接，有助于确保在此层面不存在瓶颈。可以通过更改 Web 服务器系统上的 httpd.conf 文件来调整这些 Web 服务器的设置。</p><p>您可以检查 IBM HTTP Server 的 error_log 文件，以了解是否有任何警告指出已达到最大客户机数 (MaxClients)。有几个参数可用于确定 Web 服务器支持的最大客户机数，具体取决于特定的操作系统平台。请参阅 <a href="http://httpd.apache.org/docs-2.0/mod/mpm_common.html#maxclients" target="_blank" rel="noopener">http://httpd.apache.org/docs-2.0/mod/mpm_common.html#maxclients</a> 以获取 MaxClients 参数的描述。</p><h3 id="响应“连接被拒绝”错误消息"><a href="#响应“连接被拒绝”错误消息" class="headerlink" title="响应“连接被拒绝”错误消息"></a>响应“连接被拒绝”错误消息</h3><ul><li>ListenBacklog 参数向操作系统指示所允许的最大暂挂连接数。虽然 IBM HTTP Server 的缺省值是 511</li></ul><ul><li>StartServers 参数指示最初要启动的 IBM HTTP Server 进程数。通过预先启动这些 IBM HTTP Server 线程/进程，可以减少用户必须等待新进程启动的机率。您应该将此参数设置为等于 MinSpareServers 参数值，以便立即启动此客户机负载所需的最小 IBM HTTP Server 进程数。</li></ul><h3 id="防止在用户数出现变化时频繁地创建和破坏客户机线程-进程"><a href="#防止在用户数出现变化时频繁地创建和破坏客户机线程-进程" class="headerlink" title="防止在用户数出现变化时频繁地创建和破坏客户机线程/进程"></a>防止在用户数出现变化时频繁地创建和破坏客户机线程/进程</h3><p> 您可以使用 MinSpareServers 和 MaxSpareServers 来指定可以处于空闲状态的服务器（客户机线程/进程）的最小数目和最大数目。为了防止在用户数出现变化时频繁地创建和破坏客户机线程/进程，请将此范围设置成足够大，以包括最大并发用户数。</p><p>中国银行标准环境建议值</p><table><thead><tr><th></th><th style="text-align:left">参数建议值</th></tr></thead><tbody><tr><td>IHS参数</td><td style="text-align:left">ServerLimit 16<br>ThreadLimit 100<br>StartServers 16<br>MaxClients 1600<br>MinSpareThreads 160<br>MaxSpareThreads 1600<br>ThreadsPerChild 100<br>MaxRequestsPerChild 0</td></tr></tbody></table><h1 id="JDBC数据源连接池优化"><a href="#JDBC数据源连接池优化" class="headerlink" title="JDBC数据源连接池优化"></a>JDBC数据源连接池优化</h1><h2 id="连接池大小调优"><a href="#连接池大小调优" class="headerlink" title="连接池大小调优"></a>连接池大小调优</h2><h3 id="调整方法"><a href="#调整方法" class="headerlink" title="调整方法"></a>调整方法</h3><p>进入管理控制台 &gt; 资源 &gt; 数据源 &gt; ${datasource_name} &gt; 连接池属性 :</p><p>设置最小/最大连接数为：10/80. </p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547042466625.png" alt="1547042466625"></p><h3 id="调整依据"><a href="#调整依据" class="headerlink" title="调整依据"></a>调整依据</h3><table><thead><tr><th>监测值名称</th><th>描述</th><th>调优策略</th></tr></thead><tbody><tr><td>PooSize</td><td>连接池的大小</td><td>PooSize 会随着新连接的建立而增加，会随着连接的销毁而减少；应该为连接池设立一个最大值。</td></tr><tr><td>PercentUsed</td><td>连接池线程被使用的百分比</td><td>如果该值长时间都很小，那么你应该调小 PooSize，反之应该增大。</td></tr><tr><td>WaitingThreadCount</td><td>单位时间内正在等待建立数据库连接的线程的个数</td><td>系统最佳的性能体现在该值总是保持在很小的数目，如果该值偏大，则需要对系统进行调优</td></tr><tr><td>PercentMaxed</td><td>数据库所有连接都被使用的时间所占的百分比</td><td>确保这个值不会长时间的达到 100%，如果是那样，那么你该考虑增大 PooSize 值</td></tr></tbody></table><h2 id="数据源语句缓存"><a href="#数据源语句缓存" class="headerlink" title="数据源语句缓存"></a>数据源语句缓存</h2><p><img src="/2019/07/01/WebSphere Application Server 调优/1547093886516.png" alt="1547093886516"></p><h1 id="调整-Web-应用程序"><a href="#调整-Web-应用程序" class="headerlink" title="调整 Web 应用程序"></a>调整 Web 应用程序</h1><ul><li>调整 URL 高速缓存</li><li>调整会话</li></ul><h2 id="调整-URL-高速缓存"><a href="#调整-URL-高速缓存" class="headerlink" title="调整 URL 高速缓存"></a>调整 URL 高速缓存</h2><p>URL 调用高速缓存用来存放关于将请求 URL 映射至 Servlet 资源的信息。此高速缓存基于 Web 容器，而且供所有 Web 容器线程共享。将为每个可用于处理请求的 Web 容器线程创建所请求大小的高速缓存。调用高速缓存的缺省大小为 500。如果当前正在使用 500 个以上的唯一 URL（每个 JavaServer Page 都是一个唯一的 URL），那么应该增大调用高速缓存的大小。</p><p>高速缓存越大，使用的 Java 堆内存量就越大，因此还可能需要增大最大 Java 堆大小。例如，如果<br>每个高速缓存条目需要 2 KB，最大线程大小设为 25，并且 URL 调用高速缓存大小是 100，那么需<br>要 5MB 的 Java 堆。</p><p><strong>调整过程 Procedure</strong><br>在管理控制台中，单击服务器 &gt; 服务器类型 &gt; WebSphere 应用程序服务器，然后选择要调整的<br>应用程序服务器。<br>单击 Java 和进程管理。<br>在“其他属性”下单击进程定义。<br>在“其他属性”下面，单击 Java 虚拟机。<br>在“其他属性”下面，单击定制属性。<br>在“名称”字段中指定 invocationCacheSize，并在“值”字段中指定高速缓存的大小。 调用高速缓存<br>的缺省大小为 500 条目。因为调用高速缓存不再基于线程，所以由用户指定的调用高速缓存大小<br>乘以 10，以提供与前发行版相似的功能。例如，如果指定调用高速缓存大小为 50，那么 Web<br>容器将创建大小为 500 的高速缓存。<br>单击应用，然后单击保存以保存更改。<br>停止并重新启动应用程序服务器。</p><h2 id="调整会话"><a href="#调整会话" class="headerlink" title="调整会话"></a>调整会话</h2><ul><li><p>Session 会话超时</p><p>完成后使用 javax.servlet.http.HttpSession.invalidate() 释放 HttpSession 对象。HttpSession 对象<br>在 Web 容器中存活到：</p><ul><li>应用程序使用 javax.servlet.http.HttpSession.invalidate 方法明确地、程序化地释放它；频繁、<br>程序化的无效是应用程序注销功能的一部分。</li><li>WebSphere Application Server 在已分配的 HttpSession 到期时（缺省 = 1800 秒或 30 分<br>钟）将其销毁。</li></ul></li><li><p>当开发要在 HTTP 会话中存储的新对象时，实现 java.io.Serializable 接口</p><p>如果类未实现Serializable 接口，那么 JVM 无法将该类的状态保持到数据库或另一个 JVM 中。可序列化类的所<br>有子类型都是可序列化的。以下是此变量的示例：<br> public class MyObject implements java.io.Serializable {…}</p></li><li><p>会话亲缘关系</p><p>使用会话亲缘关系，用户将为第一个请求在 server1上启动；然后，对于每个后续的请求，用户将被导向回 server1</p></li></ul><h1 id="应用程序优化及APM工具"><a href="#应用程序优化及APM工具" class="headerlink" title="应用程序优化及APM工具"></a>应用程序优化及APM工具</h1><h2 id="应用程序代码优化"><a href="#应用程序代码优化" class="headerlink" title="应用程序代码优化"></a>应用程序代码优化</h2><p>开发人员控制</p><h2 id="性能调优工具"><a href="#性能调优工具" class="headerlink" title="性能调优工具"></a>性能调优工具</h2><h3 id="APM工具"><a href="#APM工具" class="headerlink" title="APM工具"></a>APM工具</h3><ul><li>国外</li></ul><p><strong>Dynatrace、NewRelic、AppDynamics、CA、Compuware</strong>、Riverbed、IBM、Dell、Microsoft、Splunk、HP、Orcale、BMC Software、Netscout、amics、Ruxit、zoho</p><ul><li>国内</li></ul><p>云智慧、OneAPM、彩讯、博睿、上海天旦、听云</p><ul><li><p>开源</p><p>pinpoint、zipkin、cat、skywalking</p></li></ul><p><img src="/2019/07/01/WebSphere Application Server 调优/1547095180490.png" alt="1547095180490"></p><h3 id="IBM-官方推荐工具PTT"><a href="#IBM-官方推荐工具PTT" class="headerlink" title="IBM 官方推荐工具PTT"></a>IBM 官方推荐工具PTT</h3><p><a href="http://www.ibm.com/developerworks/cn/websphere/downloads/peformtuning.html" target="_blank" rel="noopener">WebSphere Application Server Perfroamcne Tuning Toolkit </a></p><p>WebSphere Application Server Performance Tuning Toolkit（简称 PTT）是一款轻量级的基于 eclipse 的客户端软件。启动后的界面如下图 1 所示， 其中，Hosts view 用于创建到 Dmgr（网络部署版）或者 Server(Base 版 ) 的 Soap 连接，连接后系统的<strong>拓扑结构</strong>会显示在 Topology view 里，Main Area 主要用来显示<strong>监控信息</strong>，包括主监控面板，每个 Server 的图形化监控页面和详细数据信息等。Tuning Parameters View 和 Scripts View 主要用于性能调优。Tuning Parameters View 用于察看和修改每个<strong>服务器的性能参数</strong>，比如 JVM 的最大堆大小、垃圾回收策略，各种容器和线程池的大小，HTTP 连接相关设置等。Tuning Parameters View 可以方便得调整 Server 级别的性能参数，尤其是批量调整，但对于很多比较复杂的调优参数，比如 DB 和 JMS 连接池等，则需要通过远程执行 Wsadmin 脚本来优化。</p><h4 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h4><p><img src="/2019/07/01/WebSphere Application Server 调优/1547095642027.png" alt="1547095642027"></p><h4 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h4><p><img src="/2019/07/01/WebSphere Application Server 调优/1547095740204.png" alt="1547095740204"></p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547095757651.png" alt="1547095757651"></p><h4 id="规则引擎与警告"><a href="#规则引擎与警告" class="headerlink" title="规则引擎与警告"></a>规则引擎与警告</h4><p>预定义规则如下：</p><ul><li>如果 Java Heap 使用超过 85%，抛出一个运行时警告。</li><li>如果线程池使用超过 90%，抛出一个线程池警告。</li><li>如果平均 CPU 使用率超过 90%，抛出一个运行时警告。</li><li>如果有 servlet 错误发生，抛出一个 servlet 警告。</li><li>如果有 JDBC 连接超时，抛出一个连接警告。</li><li>如果出现超过 1000 个 prepared statement 被废弃，抛出一个连接警告。</li><li>如果有线程等待连接，抛出一个连接警告。</li><li>如果发生 JCA 连接错误，抛出一个 JCA 警告。</li><li>如果已经无法容纳新的 session，抛出一个 session 警告。</li><li>如果有 Thread hung 发生，抛出一个线程池警告。</li><li>如果有交易回滚发生，抛出一个交易警告。</li><li>如果有交易超时发生，抛出一个交易警告。</li><li>如果有代理请求失败，抛出一个代理警告。</li><li>如果检测到 servlet 性能下降，抛出一个 servlet 警告。</li><li>如果检测到 JDBC 性能问题，抛出一个 警告。</li></ul><h4 id="在线调整参数"><a href="#在线调整参数" class="headerlink" title="在线调整参数"></a>在线调整参数</h4><h4 id="生成-Dump-文件和启用-Trace"><a href="#生成-Dump-文件和启用-Trace" class="headerlink" title="生成 Dump 文件和启用 Trace"></a>生成 Dump 文件和启用 Trace</h4><h4 id="报表模块"><a href="#报表模块" class="headerlink" title="报表模块"></a>报表模块</h4><p><img src="/2019/07/01/WebSphere Application Server 调优/1547096309712.png" alt="1547096309712"></p><p>更多PTT工具学习建议查看</p><ul><li><a href="http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1207_suipf_ptt/1207_suipf_ptt.html?ca=drs-" target="_blank" rel="noopener">WebSphere 应用服务器性能调优工具，第 1 部分: 概述</a></li><li><a href="http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1207_wangy_ptt2/1207_wangy_ptt2.html?ca=drs-" target="_blank" rel="noopener">WebSphere 应用服务器性能调优工具，第 2 部分: 性能监控</a></li><li><a href="http://www.ibm.com/developerworks/cn/websphere/library/techarticles/1208_zhangt_ptt3/1208_zhangt_ptt3.html?ca=drs-" target="_blank" rel="noopener">WebSphere 应用服务器性能调优工具，第 3 部分: 性能调优</a></li></ul><h1 id="所有调优总结"><a href="#所有调优总结" class="headerlink" title="所有调优总结"></a>所有调优总结</h1><table><thead><tr><th>对象名</th><th>属性名</th><th>建议值</th></tr></thead><tbody><tr><td>操作系统参数</td><td>tcp_keepidle</td><td>600</td></tr><tr><td>tcp_keepintvl</td><td>10</td><td></td></tr><tr><td>tcp_keepinit</td><td>40</td><td></td></tr><tr><td>Soft FILE Size</td><td>-1</td><td></td></tr><tr><td>Soft CPU Time</td><td>-1</td><td></td></tr><tr><td>Soft STACK Size</td><td>-1</td><td></td></tr><tr><td>Soft CORE File Size</td><td>-1</td><td></td></tr><tr><td>Hard FILE Size</td><td>-1</td><td></td></tr><tr><td>Hard CPU Time</td><td>-1</td><td></td></tr><tr><td>Hard STACK Size</td><td>-1</td><td></td></tr><tr><td>Hard CORE File Size</td><td>-1</td><td></td></tr><tr><td>WAS参数</td><td>JVM堆设置</td><td>1024~3072</td></tr><tr><td>JVM日志</td><td>24h*30</td><td></td></tr><tr><td>WebContainer线程池</td><td>100~100</td><td></td></tr><tr><td>通用JVM参数</td><td>-Xmns256m -Xmnx768m-Djava.net.preferIPv4Stack=true</td><td></td></tr><tr><td>JDBC连接池大小</td><td>10/80</td><td></td></tr><tr><td>Dmgr超时参数</td><td>invalidationTimeout=”180”</td><td></td></tr><tr><td>IHS参数</td><td>ServerLimit 16ThreadLimit 100StartServers 16MaxClients 1600MinSpareThreads 160MaxSpareThreads 1600ThreadsPerChild 100MaxRequestsPerChild 0</td></tr></tbody></table><p><strong>注：</strong>如果是报表类、批量操作等需要占用大量内存的系统，建议JVM堆调整为1024~6144，在JVM通用参数中添加参数为-Xmns256m -Xmnx1536m -Djava.net.preferIPv4Stack=true</p><h1 id="欢迎关注rocklei123的技术点滴"><a href="#欢迎关注rocklei123的技术点滴" class="headerlink" title="欢迎关注rocklei123的技术点滴"></a>欢迎关注rocklei123的技术点滴</h1><p>技术博客: <a href="https://rocklei123.github.io/" target="_blank" rel="noopener">https://rocklei123.github.io/</a><br>CSDN : <a href="http://blog.csdn.net/rocklei123" target="_blank" rel="noopener">http://blog.csdn.net/rocklei123</a><br>微公众号: rocklei123的技术点滴</p><p><img src="/2019/07/01/WebSphere Application Server 调优/1547101672613.png" alt="1547101672613"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WebSphere-Application-Server-调优（base-on-Was-8-5-5）&quot;&gt;&lt;a href=&quot;#WebSphere-Application-Server-调优（base-on-Was-8-5-5）&quot; class=&quot;headerlink&quot; title=&quot;WebSphere Application Server 调优（base on Was 8.5.5）&quot;&gt;&lt;/a&gt;WebSphere Application Server 调优（base on Was 8.5.5）&lt;/h1&gt;&lt;p&gt;作者：周磊，rocklei123.北京                                                             2019.1.10&lt;/p&gt;
&lt;h1 id=&quot;WebSphere-性能优化概述&quot;&gt;&lt;a href=&quot;#WebSphere-性能优化概述&quot; class=&quot;headerlink&quot; title=&quot;WebSphere 性能优化概述&quot;&gt;&lt;/a&gt;WebSphere 性能优化概述&lt;/h1&gt;&lt;h2 id=&quot;性能问题发生在-WAS-和操作系统的各个环节中&quot;&gt;&lt;a href=&quot;#性能问题发生在-WAS-和操作系统的各个环节中&quot; class=&quot;headerlink&quot; title=&quot;性能问题发生在 WAS 和操作系统的各个环节中&quot;&gt;&lt;/a&gt;性能问题发生在 WAS 和操作系统的各个环节中&lt;/h2&gt;&lt;p&gt;性能问题可能发生于系统的各个环节中，当性能问题出来后很难马上就定位性能的瓶颈在哪里，即使找到了性能瓶颈，在进行调优的时候也要考虑系统整体环境，从上下文中分析，确定调优的策略；系统中一个或者多个“短板”的存在，就能让系统无法达到设计时的目标，无法达到预期的性能提升。&lt;/p&gt;
    
    </summary>
    
      <category term="WebSphere" scheme="http://yoursite.com/categories/WebSphere/"/>
    
    
      <category term="WebSphere" scheme="http://yoursite.com/tags/WebSphere/"/>
    
      <category term="中间件" scheme="http://yoursite.com/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>基于Ant的持续集成环境</title>
    <link href="http://yoursite.com/2018/12/26/%E5%9F%BA%E4%BA%8EAnt%E7%9A%84%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2018/12/26/基于Ant的持续集成环境/</id>
    <published>2018-12-26T13:47:53.000Z</published>
    <updated>2018-12-26T14:56:14.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>​    项目组有一套企业级JavaWeb应用，以前在发布新版本时，都是通过ant将核心源码混淆后打成jar，再通过开发工具导出成war包，然后将加密混淆后的jar添加到war包中，部署到tomcat中。整个流程虽然不够复杂，但整个流程下来至少30分钟。最初的想法就是想让这一切工作全部自动化，节省项目新版本发布时间。</p><a id="more"></a><h1 id="软件选择"><a href="#软件选择" class="headerlink" title="软件选择"></a>软件选择</h1><p>​    考察了一些现有持续集成软件，觉得Jenkins 和 Ant都能满足需求。</p><p>​    Jenkins 功能很强大：UI界面、邮件通知、测试报告、分布式构建、多种插件支持。想学习建议参考这篇就够了《<a href="https://www.cnblogs.com/zz0412/p/jenkins03.html" target="_blank" rel="noopener">Jenkins入门系列之——03PDF文档下载</a>》</p><p>​    考虑到现有环境一个Ant足以，而且对Ant相对有些了解，所以决定使用Ant搞定持续集成环境。</p><h1 id="基于Ant的持续集成环境"><a href="#基于Ant的持续集成环境" class="headerlink" title="基于Ant的持续集成环境"></a>基于Ant的持续集成环境</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li><p>JDK 安装：提供java编译与运行环境</p></li><li><p>Ant 安装并配置环境变量</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/</span><br><span class="line">wget http://mirrors.hust.edu.cn/apache//ant/binaries/apache-ant-1.9.13-bin.tar.gz</span><br><span class="line">tar -zxvf apache-ant-1.9.13-bin.tar.gz</span><br></pre></td></tr></table></figure><ul><li>Ant 配置环境变量vi /etc/profile 编辑成功后执行source /etc/profile</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export ANT_HOME=/usr/apache-ant-1.9.13</span><br><span class="line">export PATH=$PATH:$ANT_HOME/bin</span><br></pre></td></tr></table></figure><ul><li>目录准备</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[tomcat@localhost packageEnv]$ pwd</span><br><span class="line">/home/tomcat/packageEnv</span><br><span class="line">[tomcat@localhost packageEnv]$ </span><br><span class="line">[tomcat@localhost packageEnv]$ ll</span><br><span class="line">-rw-rw-r-- 1 tomcat tomcat 14606 12月 24 17:06 build.xml  //核心build文件</span><br><span class="line">drwxrwxr-x 5 tomcat tomcat    59 12月 25 19:49 checkout   //svn源码检出目录</span><br><span class="line">drwxrwxr-x 2 tomcat tomcat   131 12月 25 19:52 encryption //加密程序存放目录</span><br><span class="line">drwxr-xr-x 9 tomcat tomcat  4096 12月 19 10:10 smartam   //tomcat软件目录，已经更名smartam</span><br><span class="line">[tomcat@localhost packageEnv]$</span><br></pre></td></tr></table></figure><ul><li>svnant准备</li></ul><p>实现ant可以从svn服务器上检出代码要使用svnant相关的jar文件。</p><p>下载地址：<a href="http://subclipse.tigris.org/files/documents/906/49042/svnant-1.3.1.zip" target="_blank" rel="noopener">http://subclipse.tigris.org/files/documents/906/49042/svnant-1.3.1.zip</a></p><p>将下载好的svnant解压将 ib目录下的所有jar复制到ant主目录中的lib目录下。</p><ul><li><p>混淆工具</p><p>yguard  下载后放置在项目中，和src 同级目录中。 下载地址：<a href="https://www.yworks.com/downloads" target="_blank" rel="noopener">https://www.yworks.com/downloads</a></p></li></ul><h2 id="build-流程"><a href="#build-流程" class="headerlink" title="build  流程"></a>build  流程</h2><ol><li>properties配置文件准备</li><li>打印环境及 properties信息</li><li>停止tomcat</li><li>定义ant.svn.classpath，使用svn任务时可以使用</li><li>设置svn相关属性</li><li>清理旧文件</li><li>创建初始化目录结构</li><li>从svn 检出源码</li><li>初始化classpath</li><li>编译java源码</li><li>将class文件打成 jar包</li><li>混淆源代码</li><li>将混淆后的jar包加密</li><li>打成war包</li><li>将war包部署tomcat </li><li>启动tomcat</li></ol><p>整个流程下来我们只需要登录目标服务器，切换到/home/tomcat/packageEnv 目录，执行ant命令即可。</p><h2 id="核心build-xml"><a href="#核心build-xml" class="headerlink" title="核心build.xml"></a>核心build.xml</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project name=&quot;smartam&quot; default=&quot;start_tomcat&quot; basedir=&quot;./&quot;&gt;</span><br><span class="line">    &lt;property environment=&quot;env&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;webapp.name&quot; value=&quot;smartam&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;ant.name&quot; value=&quot;/usr/apache-ant-1.9.13&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;svn.url&quot; value=&quot;svn://127.0.0.1/smartam&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;svn.username&quot; value=&quot;rocklei123&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;svn.password&quot; value=&quot;xxxxxx&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;svn.checkout.dir&quot; value=&quot;$&#123;basedir&#125;/checkout&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;svn.checkout.project&quot; value=&quot;$&#123;svn.checkout.dir&#125;/$&#123;webapp.name&#125;&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;catalina.home&quot; value=&quot;/home/tomcat/packageEnv/smartam&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;dist.dir&quot; value=&quot;$&#123;svn.checkout.dir&#125;/dist&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;build.dir&quot; value=&quot;$&#123;svn.checkout.dir&#125;/build&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;build.class&quot; value=&quot;$&#123;build.dir&#125;/classes&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;build.config&quot; value=&quot;$&#123;build.dir&#125;/META-INF&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;webRoot.dir&quot; value=&quot;$&#123;svn.checkout.project&#125;/WebRoot&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;src.dir&quot; value=&quot;$&#123;svn.checkout.project&#125;/src&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;metainf.dir&quot; value=&quot;$&#123;svn.checkout.project&#125;/src/META-INF&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;lib.dir&quot; value=&quot;$&#123;webRoot.dir&#125;/WEB-INF/lib&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;app.jar&quot; value=&quot;$&#123;webapp.name&#125;_original.jar&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;obf.jar&quot; value=&quot;$&#123;webapp.name&#125;.jar&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;encryption.dir&quot; value=&quot;$&#123;basedir&#125;/encryption&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;encrypted.webapp.jar.dir&quot; value=&quot;$&#123;encryption.dir&#125;/$&#123;webapp.name&#125;_encrypted.jar&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;encrypt.program.jar&quot; value=&quot;$&#123;encryption.dir&#125;/JarByteCodeEncrypt.jar&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;shrinklog&quot; value=&quot;$&#123;webapp.name&#125;_shrinklog.xml&quot;/&gt;</span><br><span class="line">    &lt;property name=&quot;renamelog&quot; value=&quot;$&#123;webapp.name&#125;_renamelog.xml&quot;/&gt;</span><br><span class="line">    &lt;!-- 使用eclipse jdt进行编译，而不使用JDK编译</span><br><span class="line">    &lt;property name=&quot;build.compiler&quot; value=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot; /&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">&lt;!-- 打印环境变量和属性赋值情况--&gt;</span><br><span class="line">    &lt;echoproperties/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name=&quot;stop_tomcat&quot; description=&quot;停止Tomcat&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;start tomcat...&quot;/&gt;</span><br><span class="line">        &lt;exec executable=&quot;/bin/sh&quot; os=&quot;Linux&quot; dir=&quot;$&#123;catalina.home&#125;/bin&quot; failonerror=&quot;false&quot;&gt;</span><br><span class="line">            &lt;env key=&quot;PATH&quot; path=&quot;$&#123;env.PATH&#125;:&quot;/&gt;</span><br><span class="line">            &lt;env key=&quot;CATALINA_HOME&quot; path=&quot;$&#123;catalina.home&#125;&quot;/&gt;</span><br><span class="line">            &lt;arg value=&quot;stopsmartam.sh&quot;/&gt;</span><br><span class="line">        &lt;/exec&gt;</span><br><span class="line">        &lt;sleep seconds=&quot;2&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end stop tomcat...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 定义ant.svn.classpath，使用svn任务时可以使用--&gt;</span><br><span class="line">    &lt;path id=&quot;ant.svn.classpath&quot;&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;ant.home&#125;/lib&quot;&gt;</span><br><span class="line">            &lt;include name=&quot;*.jar&quot;/&gt;</span><br><span class="line">        &lt;/fileset&gt;</span><br><span class="line">    &lt;/path&gt;</span><br><span class="line">    &lt;pathconvert pathsep=&quot;$&#123;line.separator&#125;|   |-- &quot; property=&quot;echo.path.svn&quot; refid=&quot;ant.svn.classpath&quot;&gt;</span><br><span class="line">    &lt;/pathconvert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;typedef resource=&quot;org/tigris/subversion/svnant/svnantlib.xml&quot; classpathref=&quot;ant.svn.classpath&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--  设置svn相关属性  --&gt;</span><br><span class="line">    &lt;svnSetting id=&quot;svn.setting&quot; svnkit=&quot;true&quot; username=&quot;$&#123;svn.username&#125;&quot; password=&quot;$&#123;svn.password&#125;&quot;</span><br><span class="line">                javahl=&quot;false&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- show ant classpath jars --&gt;</span><br><span class="line">    &lt;target name=&quot;print_ant_classpath&quot; depends=&quot;stop_tomcat&quot; description=&quot;输出ant classpath&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;|-- ant svn classpath&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;|   |&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;|   |-- $&#123;echo.path.svn&#125;&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 删除之前的目录结构 --&gt;</span><br><span class="line">    &lt;target name=&quot;clear&quot; description=&quot;清理旧文件&quot; depends=&quot;print_ant_classpath&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin clean up directory...&quot;/&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;build.config&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;build.dir&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete file=&quot;$&#123;dist.dir&#125;/$&#123;webapp.name&#125;.war&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;dist.dir&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;svn.checkout.project&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete dir=&quot;$&#123;svn.checkout.dir&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete file=&quot;$&#123;catalina.home&#125;/webapps/$&#123;webapp.name&#125;.war&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete file=&quot;$&#123;catalina.home&#125;/webapps/$&#123;webapp.name&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete includeemptydirs=&quot;true&quot; quiet=&quot;true&quot;&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;catalina.home&#125;/logs/&quot; includes=&quot;**/*&quot;/&gt;</span><br><span class="line">        &lt;/delete&gt;</span><br><span class="line">        &lt;delete file=&quot;$&#123;encryption.dir&#125;/$&#123;obf.jar&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;delete file=&quot;$&#123;encrypted.webapp.jar.dir&#125;&quot; quiet=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end clean up directory...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 创建目录结构 --&gt;</span><br><span class="line">    &lt;target name=&quot;init&quot; depends=&quot;clear&quot; description=&quot;创建初始化目录结构&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin mkdir directory...&quot;/&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;build.dir&#125;/classes&quot;/&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;dist.dir&#125;&quot;/&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;build.config&#125;&quot;/&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;svn.checkout.project&#125;&quot;/&gt;</span><br><span class="line">        &lt;mkdir dir=&quot;$&#123;svn.checkout.dir&#125;&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end mkdir directory...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 检出代码 这里使用 export 不是checkout 二者区别 checkout会svn相关信息文件检出，export只是检出最新的文件  &lt;export srcUrl=&quot;$&#123;svn.url&#125;&quot; destPath=&quot;$&#123;svn.checkout.project&#125;&quot; force=&quot;true&quot;/&gt;--&gt;</span><br><span class="line">    &lt;target name=&quot;checkout&quot; depends=&quot;init&quot; description=&quot;从svn下载源码&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin svn checkout...&quot;/&gt;</span><br><span class="line">        &lt;svn refid=&quot;svn.setting&quot;&gt;</span><br><span class="line">            &lt;checkout url=&quot;$&#123;svn.url&#125;&quot; destPath=&quot;$&#123;svn.checkout.project&#125;&quot; force=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;/svn&gt;</span><br><span class="line">        &lt;echo message=&quot;end svn checkout...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 初始化classpath --&gt;</span><br><span class="line">    &lt;path id=&quot;project.classpath&quot;&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;lib.dir&#125;&quot;&gt;</span><br><span class="line">            &lt;include name=&quot;**/*.jar&quot;/&gt;</span><br><span class="line">        &lt;/fileset&gt;</span><br><span class="line">        &lt;!-- 添加tomcat类路径 --&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;catalina.home&#125;/lib&quot;&gt;</span><br><span class="line">            &lt;include name=&quot;*.jar&quot;/&gt;</span><br><span class="line">        &lt;/fileset&gt;</span><br><span class="line">    &lt;/path&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 初始化yguard classpath --&gt;</span><br><span class="line">    &lt;path id=&quot;yguard.classpath&quot;&gt;</span><br><span class="line">        &lt;!-- 添加yguard类路径 --&gt;</span><br><span class="line">        &lt;fileset dir=&quot;$&#123;svn.checkout.project&#125;&quot;&gt;</span><br><span class="line">            &lt;include name=&quot;yguard.jar&quot;/&gt;</span><br><span class="line">        &lt;/fileset&gt;</span><br><span class="line">    &lt;/path&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 编译java --&gt;</span><br><span class="line">    &lt;target name=&quot;compile&quot; depends=&quot;checkout&quot; description=&quot;编译java文件&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin compile...&quot;/&gt;</span><br><span class="line">        &lt;javac srcdir=&quot;$&#123;src.dir&#125;&quot; destdir=&quot;$&#123;build.dir&#125;/classes&quot; includeantruntime=&quot;false&quot; nowarn=&quot;on&quot; source=&quot;1.7&quot;</span><br><span class="line">               target=&quot;1.7&quot; deprecation=&quot;true&quot; debug=&quot;true&quot; encoding=&quot;UTF-8&quot; classpathref=&quot;project.classpath&quot;&gt;</span><br><span class="line">            &lt;compilerarg line=&quot;-Xlint:unchecked&quot;/&gt;</span><br><span class="line">        &lt;/javac&gt;</span><br><span class="line">        &lt;echo message=&quot;end compile...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 将class文件打成 jar包 --&gt;</span><br><span class="line">    &lt;target name=&quot;pack&quot; depends=&quot;compile&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin pack...&quot;/&gt;</span><br><span class="line">        &lt;jar jarfile=&quot;$&#123;build.dir&#125;/$&#123;app.jar&#125;&quot;&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;build.dir&#125;/classes&quot;&gt;</span><br><span class="line">                &lt;exclude name=&quot;**/test/&quot;/&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.class&quot;/&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line"></span><br><span class="line">            &lt;fileset dir=&quot;$&#123;src.dir&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.xml&quot;/&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.properties&quot;/&gt;</span><br><span class="line">                &lt;include name=&quot;**/*.sql&quot;/&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line"></span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;!-- If this is an Applet or Web Start application, include</span><br><span class="line">                     the proper attributes from https://docs.oracle.com/javase/8/docs/technotes/guides/jweb/index.html --&gt;</span><br><span class="line">                &lt;attribute name=&quot;Codebase&quot; value=&quot;www.olm.com.cn&quot;/&gt;</span><br><span class="line">                &lt;attribute name=&quot;Ant-Version&quot; value=&quot;$&#123;ant.version&#125;&quot;/&gt;</span><br><span class="line">                &lt;attribute name=&quot;Built-JDK&quot; value=&quot;$&#123;java.runtime.version&#125; $&#123;java.vendor&#125;&quot;/&gt;</span><br><span class="line">                &lt;!-- Who is building this jar? --&gt;</span><br><span class="line">                &lt;attribute name=&quot;Built-By&quot; value=&quot;rocklei123&quot;/&gt;</span><br><span class="line">                &lt;!-- Information about the program itself --&gt;</span><br><span class="line">                &lt;attribute name=&quot;Implementation-Vendor&quot;</span><br><span class="line">                           value=&quot;Beijing Orient LegendMarker Software Development Co.Ltd&quot;/&gt;</span><br><span class="line">                &lt;attribute name=&quot;Implementation-Title&quot; value=&quot;smartam&quot;/&gt;</span><br><span class="line">                &lt;attribute name=&quot;Implementation-Version&quot; value=&quot;3.2.0beta&quot;/&gt;</span><br><span class="line">            &lt;/manifest&gt;</span><br><span class="line">        &lt;/jar&gt;</span><br><span class="line">        &lt;echo message=&quot;end pack...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 混淆任务--&gt;</span><br><span class="line">    &lt;target depends=&quot;pack&quot; name=&quot;yguard&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin yguard jar...&quot;/&gt;</span><br><span class="line">        &lt;taskdef name=&quot;yguard&quot; classname=&quot;com.yworks.yguard.YGuardTask&quot; classpathref=&quot;yguard.classpath&quot;/&gt;</span><br><span class="line">        &lt;!-- the following can be adjusted to your needs --&gt;</span><br><span class="line">        &lt;yguard&gt;</span><br><span class="line">            &lt;inoutpair in=&quot;$&#123;build.dir&#125;/$&#123;app.jar&#125;&quot; out=&quot;$&#123;build.dir&#125;/$&#123;obf.jar&#125;&quot;/&gt;</span><br><span class="line">            &lt;externalclasses&gt;</span><br><span class="line">                &lt;fileset dir=&quot;$&#123;lib.dir&#125;&quot;&gt;</span><br><span class="line">                    &lt;include name=&quot;**/*.jar&quot;/&gt;</span><br><span class="line">                &lt;/fileset&gt;</span><br><span class="line">                &lt;fileset dir=&quot;$&#123;catalina.home&#125;/lib&quot;&gt;</span><br><span class="line">                    &lt;include name=&quot;*.jar&quot;/&gt;</span><br><span class="line">                &lt;/fileset&gt;</span><br><span class="line">            &lt;/externalclasses&gt;</span><br><span class="line"></span><br><span class="line">            &lt;shrink logfile=&quot;$&#123;build.dir&#125;/$&#123;shrinklog&#125;&quot;&gt;</span><br><span class="line">                &lt;keep&gt;</span><br><span class="line">                    &lt;class classes=&quot;none&quot; methods=&quot;public&quot; fields=&quot;public&quot;&gt;</span><br><span class="line">                        &lt;patternset&gt;</span><br><span class="line">                            &lt;exclude name=&quot;com.xxxx&quot;/&gt;</span><br><span class="line">                        &lt;/patternset&gt;</span><br><span class="line">                    &lt;/class&gt;</span><br><span class="line">                &lt;/keep&gt;</span><br><span class="line">            &lt;/shrink&gt;</span><br><span class="line">            &lt;rename logfile=&quot;$&#123;build.dir&#125;/$&#123;renamelog&#125;&quot; conservemanifest=&quot;true&quot;&gt;</span><br><span class="line">                &lt;keep&gt;</span><br><span class="line">                    &lt;class classes=&quot;private&quot; methods=&quot;private&quot; fields=&quot;private&quot;&gt;</span><br><span class="line">                        &lt;patternset&gt;</span><br><span class="line">&lt;!-- 不混淆的类--&gt;</span><br><span class="line">                            &lt;include name=&quot;com.olm.**.action.**.*&quot;/&gt;</span><br><span class="line">                            &lt;include name=&quot;com.olm.**.impl.**.*&quot;/&gt;</span><br><span class="line">                            &lt;include name=&quot;com.olm.**.entity.**.*&quot;/&gt;</span><br><span class="line">                        &lt;/patternset&gt;</span><br><span class="line">                    &lt;/class&gt;</span><br><span class="line">                    &lt;package&gt;</span><br><span class="line">                        &lt;patternset&gt;</span><br><span class="line">                            &lt;include name=&quot;com.xxx.*&quot;/&gt;</span><br><span class="line">                        &lt;/patternset&gt;</span><br><span class="line">                    &lt;/package&gt;</span><br><span class="line">                &lt;/keep&gt;</span><br><span class="line">            &lt;/rename&gt;</span><br><span class="line">        &lt;/yguard&gt;</span><br><span class="line">        &lt;echo message=&quot;end yguard jar...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 将混淆后的jar包加密 --&gt;</span><br><span class="line">    &lt;target name=&quot;encrypt&quot; depends=&quot;yguard&quot; description=&quot;将混淆后的jar包加密&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin encrypt jar...&quot;/&gt;</span><br><span class="line">        &lt;copy file=&quot;$&#123;build.dir&#125;/$&#123;obf.jar&#125;&quot; todir=&quot;$&#123;encryption.dir&#125;&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;copy Obfuscator jar name of  $&#123;build.dir&#125;/$&#123;obf.jar&#125; to drictory $&#123;encryption.dir&#125;&quot;/&gt;</span><br><span class="line">        &lt;java jar=&quot;$&#123;encrypt.program.jar&#125;&quot; failonerror=&quot;true&quot; fork=&quot;true&quot; maxmemory=&quot;128m&quot;&gt;</span><br><span class="line">            &lt;classpath&gt;</span><br><span class="line">                &lt;pathelement location=&quot;$&#123;encrypt.program.jar&#125;&quot;/&gt;</span><br><span class="line">            &lt;/classpath&gt;</span><br><span class="line">        &lt;/java&gt;</span><br><span class="line">        &lt;sleep seconds=&quot;5&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end encrypt jar...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 打成war包, 名称默认为 项目名    --&gt;</span><br><span class="line">    &lt;target name=&quot;war&quot; depends=&quot;encrypt&quot; description=&quot;将工程打成war包&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin war...&quot;/&gt;</span><br><span class="line">        &lt;copy file=&quot;$&#123;encrypted.webapp.jar.dir&#125;&quot; todir=&quot;$&#123;lib.dir&#125;&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;copy encrypted jar file name of  $&#123;encrypted.webapp.jar.dir&#125; to directory $&#123;lib.dir&#125;...&quot;/&gt;</span><br><span class="line">        &lt;war destfile=&quot;$&#123;dist.dir&#125;/$&#123;webapp.name&#125;.war&quot; basedir=&quot;$&#123;webRoot.dir&#125;&quot; webxml=&quot;$&#123;webRoot.dir&#125;/WEB-INF/web.xml&quot;&gt;</span><br><span class="line">            &lt;lib dir=&quot;$&#123;lib.dir&#125;&quot;/&gt;</span><br><span class="line">            &lt;fileset dir=&quot;$&#123;webRoot.dir&#125;&quot;&gt;</span><br><span class="line">                &lt;include name=&quot;**/**.*&quot;/&gt;</span><br><span class="line">                &lt;exclude name=&quot;**/test/&quot;/&gt;</span><br><span class="line">                &lt;exclude name=&quot;$&#123;webRoot.dir&#125;/WEB-INF/classes/&quot;/&gt;</span><br><span class="line">                &lt;exclude name=&quot;**/*.jar&quot;/&gt;</span><br><span class="line">                &lt;exclude name=&quot;**/*.class&quot;/&gt;</span><br><span class="line">            &lt;/fileset&gt;</span><br><span class="line">        &lt;/war&gt;</span><br><span class="line">        &lt;echo message=&quot;end war...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- copy war包 tomcat的deploy目录    --&gt;</span><br><span class="line">    &lt;target name=&quot;deploy&quot; depends=&quot;war&quot; description=&quot;部署项目&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;begin deploy...&quot;/&gt;</span><br><span class="line">        &lt;copy file=&quot;$&#123;dist.dir&#125;/$&#123;webapp.name&#125;.war&quot; todir=&quot;$&#123;catalina.home&#125;/webapps&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end deploy...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line"></span><br><span class="line">    &lt;target name=&quot;start_tomcat&quot; depends=&quot;deploy&quot;&gt;</span><br><span class="line">        &lt;echo message=&quot;starting tomcat...&quot;/&gt;</span><br><span class="line">        &lt;exec executable=&quot;/bin/sh&quot; os=&quot;Linux&quot; dir=&quot;$&#123;catalina.home&#125;/bin&quot; failonerror=&quot;true&quot;&gt;</span><br><span class="line">            &lt;env key=&quot;PATH&quot; path=&quot;$&#123;env.PATH&#125;:&quot;/&gt;</span><br><span class="line">            &lt;env key=&quot;CATALINA_HOME&quot; path=&quot;$&#123;catalina.home&#125;&quot;/&gt;</span><br><span class="line">            &lt;arg value=&quot;startup.sh&quot;/&gt;</span><br><span class="line">        &lt;/exec&gt;</span><br><span class="line">        &lt;sleep seconds=&quot;5&quot;/&gt;</span><br><span class="line">        &lt;echo message=&quot;end start tomcat...&quot;/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="/2018/12/26/基于Ant的持续集成环境/1545836156133.png" alt="1545836156133"></p><p>Build成功后可直接访问项目地址，查看最新的发布结果。</p><h1 id="希望-大家手动敲一遍代码，会收获颇丰！"><a href="#希望-大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="希望  大家手动敲一遍代码，会收获颇丰！"></a>希望  大家手动敲一遍代码，会收获颇丰！</h1><h1 id="欢迎关注米宝窝，持续更新中，谢谢！"><a href="#欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="欢迎关注米宝窝，持续更新中，谢谢！"></a>欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p><p><a href="https://blog.csdn.net/zhouleiblog" target="_blank" rel="noopener">https://blog.csdn.net/zhouleiblog</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h1&gt;&lt;p&gt;​    项目组有一套企业级JavaWeb应用，以前在发布新版本时，都是通过ant将核心源码混淆后打成jar，再通过开发工具导出成war包，然后将加密混淆后的jar添加到war包中，部署到tomcat中。整个流程虽然不够复杂，但整个流程下来至少30分钟。最初的想法就是想让这一切工作全部自动化，节省项目新版本发布时间。&lt;/p&gt;
    
    </summary>
    
      <category term="持续集成" scheme="http://yoursite.com/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Ant" scheme="http://yoursite.com/tags/Ant/"/>
    
      <category term="持续集成" scheme="http://yoursite.com/tags/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"/>
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
      <category term="yguard" scheme="http://yoursite.com/tags/yguard/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot热部署及优缺点比较</title>
    <link href="http://yoursite.com/2018/12/18/Spring-Boot%E7%83%AD%E9%83%A8%E7%BD%B2%E5%8F%8A%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2018/12/18/Spring-Boot热部署及优缺点比较/</id>
    <published>2018-12-18T01:14:47.000Z</published>
    <updated>2018-12-18T05:39:28.628Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中我们修改一个Java文件后想看到效果不得不重启应用，这导致大量时间花费，我们希望不重启应用的情况下，程序可以自动部署（热部署）。有以下四种情况，如何能实现热部署。</p><a id="more"></a><h1 id="1、模板引擎（不支持Java代码修改热部署）"><a href="#1、模板引擎（不支持Java代码修改热部署）" class="headerlink" title="1、模板引擎（不支持Java代码修改热部署）"></a>1、模板引擎（不支持Java代码修改热部署）</h1><p>在Spring Boot中开发情况下禁用模板引擎的cache<br>页面模板改变ctrl+F9可以重新编译当前页面并生效</p><h1 id="2、Spring-Loaded"><a href="#2、Spring-Loaded" class="headerlink" title="2、Spring Loaded"></a>2、Spring Loaded</h1><h2 id="2-1-Spring-Loaded介绍"><a href="#2-1-Spring-Loaded介绍" class="headerlink" title="2.1 Spring Loaded介绍"></a>2.1 Spring Loaded介绍</h2><p>Spring官方提供的热部署程序，实现修改类文件的热部署。</p><h2 id="2-2-Spring-Loaded-使用"><a href="#2-2-Spring-Loaded-使用" class="headerlink" title="2.2 Spring Loaded 使用"></a>2.2 Spring Loaded 使用</h2><ul><li><p>下载Spring Loaded（项目地址<a href="https://github.com/spring-projects/spring-loaded），放在项目的C:/lib目录中(放在项目目录也可以，在使用时使用相对路径)，然后把idea的run参数里的VM参数设置为：" target="_blank" rel="noopener">https://github.com/spring-projects/spring-loaded），放在项目的C:/lib目录中(放在项目目录也可以，在使用时使用相对路径)，然后把idea的run参数里的VM参数设置为：</a><br>-javaagent:C:/lib/springloaded-1.2.8.RELEASE.jar –noverify</p></li><li><p>再次修改java文件即时生效，我们修改方法的返回值，这样在run 项目的时候，也能进行热部署了。直接访问就可以得到修改后的结果了。</p></li></ul><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545108652972.png" alt="1545108652972"></p><h3 id="2-2-3-Spring-Loaded缺点"><a href="#2-2-3-Spring-Loaded缺点" class="headerlink" title="2.2.3 Spring Loaded缺点"></a>2.2.3 Spring Loaded缺点</h3><p>引自spring-loaded官方 <a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener">https://github.com/spring-projects/spring-loaded</a></p><p>Q. Does it reload anything that might change in a class file? A. No, you can’t change the hierarchy of a type. Also there are certain constructor patterns of usage it can’t actually handle right now.</p><p>并非所有改变都支持热部署，对框架支持比较弱。</p><h1 id="3、JRebel（推荐）"><a href="#3、JRebel（推荐）" class="headerlink" title="3、JRebel（推荐）"></a>3、JRebel（推荐）</h1><p>收费的一个热部署软件，安装插件使用即可。</p><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545107985824.png" alt="1545107985824"></p><p>Jrebel 破解建议查看：<a href="https://blog.csdn.net/lawsonjin/article/details/76422807" target="_blank" rel="noopener">https://blog.csdn.net/lawsonjin/article/details/76422807</a></p><h1 id="4、Spring-Boot-Devtools（推荐）"><a href="#4、Spring-Boot-Devtools（推荐）" class="headerlink" title="4、Spring Boot Devtools（推荐）"></a>4、Spring Boot Devtools（推荐）</h1><h2 id="4-1-Spring-Boot-Devtools原理"><a href="#4-1-Spring-Boot-Devtools原理" class="headerlink" title="4.1 Spring Boot Devtools原理"></a>4.1 Spring Boot Devtools原理</h2><p>深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类，称为restart ClassLoader,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。</p><h2 id="4-2-Spring-Boot-Devtools配置步骤"><a href="#4-2-Spring-Boot-Devtools配置步骤" class="headerlink" title="4.2 Spring Boot Devtools配置步骤"></a>4.2 Spring Boot Devtools配置步骤</h2><h3 id="4-2-1-maven-依赖"><a href="#4-2-1-maven-依赖" class="headerlink" title="4.2.1 maven 依赖"></a>4.2.1 maven 依赖</h3><p>maven引入 Spring Boot Devtools 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖myboot项目的项目如果想要使用devtools，需要重新引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-2-maven-插件"><a href="#4-2-2-maven-插件" class="headerlink" title="4.2.2 maven 插件"></a>4.2.2 maven 插件</h3><p>在pom.xml文件中，增加如下插件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如果没有该项配置，devtools不会起作用，即应用不会restart ,(这里一直没搞懂)--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-3-特殊配置"><a href="#4-2-3-特殊配置" class="headerlink" title="4.2.3 特殊配置"></a>4.2.3 特殊配置</h3><p>（1） devtools可以实现页面热部署（即页面修改后会立即生效，这个可以直接在application.properties或application.yml 文件中配置spring.thymeleaf.cache=false来实现），实现类文件热部署（类文件修改后不会立即生效），实现对属性文件的热部署。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  thymeleaf:</span></span><br><span class="line"><span class="attr">    cache:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  devtools:</span></span><br><span class="line"><span class="attr">    restart:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      additional-paths:</span> <span class="string">src/main/java</span></span><br><span class="line"><span class="attr">      exclude:</span> <span class="string">WEB-INF/**</span></span><br></pre></td></tr></table></figure><p>（2）配置了后在修改java文件后也就支持了热启动，不过这种方式是属于项目重启（速度比较快的项目重启），会清空session中的值，也就是如果有用户登陆的话，项目重启后需要重新登陆。</p><p>（3）默认情况下，/META-INF/maven，/META-INF/resources，/resources，/static，/templates，/public这些文件夹下的文件修改不会使应用重启，但是会重新加载（devtools内嵌了一个LiveReload server，当资源发生改变时，浏览器刷新）。</p><p><strong>如果你是eclipse开发，现在已经可以重启项目来使用了。但是，如果你是idea的话，请看4.2.4 的设置！</strong></p><h3 id="4-2-4-IDEA-配合Spring-Boot-Devtools特殊配置"><a href="#4-2-4-IDEA-配合Spring-Boot-Devtools特殊配置" class="headerlink" title="4.2.4 IDEA 配合Spring Boot Devtools特殊配置"></a>4.2.4 IDEA 配合Spring Boot Devtools特殊配置</h3><p>Intellij IEDA和Eclipse不同，Eclipse设置了自动编译之后，修改类它会自动编译，而IDEA在非RUN或DEBUG</p><h4 id="4-2-4-1-在设置中打开自动编译"><a href="#4-2-4-1-在设置中打开自动编译" class="headerlink" title="4.2.4.1 在设置中打开自动编译"></a>4.2.4.1 在设置中打开自动编译</h4><p>左上角File-&gt;Settings-&gt;Build,Execution,Deployment-&gt;Compiler,选中Build project automaticall</p><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545110399527.png" alt="1545110399527"></p><h4 id="4-2-4-2-打开运行时编译"><a href="#4-2-4-2-打开运行时编译" class="headerlink" title="4.2.4.2 打开运行时编译"></a>4.2.4.2 打开运行时编译</h4><p>按快捷键 Shift+Ctrl+Alt+/ ，选择 Registryctrl+shift+alt+/（maintenance）<br>勾选compiler.automake.allow.when.app.running</p><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545110475278.png" alt="1545110475278"></p><h4 id="4-2-4-3-关闭自动保存"><a href="#4-2-4-3-关闭自动保存" class="headerlink" title="4.2.4.3 关闭自动保存"></a>4.2.4.3 关闭自动保存</h4><h5 id="关闭自动保存"><a href="#关闭自动保存" class="headerlink" title="关闭自动保存"></a>关闭自动保存</h5><p>File—&gt;settings—-&gt;System Settings—&gt;去掉勾选synchronize files on frame or editor tab activation和去掉勾选save files on frame deactivation </p><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545111482945.png" alt="1545111482945"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">synchronize files on frame or editor tab activation，就是当前应用是intellij时，自动保存文件，比如从浏览器切换到intellij，intellij就是active，会自动保存。</span><br><span class="line"></span><br><span class="line">save files on frame deactivation,就是从intellij切换到其他应用时，保存文件。</span><br></pre></td></tr></table></figure><h5 id="标志修改文件为星号"><a href="#标志修改文件为星号" class="headerlink" title="标志修改文件为星号"></a>标志修改文件为星号</h5><p>File—-&gt;Settings—–&gt;Editor—-&gt;General—-&gt;Editor tabs—-&gt;勾选 mark modified files as asterisk </p><p><img src="/2018/12/18/Spring-Boot热部署及优缺点比较/1545111450758.png" alt="1545111450758"></p><h2 id="4-3-Spring-Boot-Devtools-测试问题反馈"><a href="#4-3-Spring-Boot-Devtools-测试问题反馈" class="headerlink" title="4.3 Spring Boot Devtools 测试问题反馈"></a>4.3 Spring Boot Devtools 测试问题反馈</h2><p>实际测试发现有些修改，需要一并修改标有@SpringBootApplication注解的类，才可以保证修改部署成功,特别是修改Controller标注的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#5-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="5.欢迎关注米宝窝，持续更新中，谢谢！"></a>5.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中我们修改一个Java文件后想看到效果不得不重启应用，这导致大量时间花费，我们希望不重启应用的情况下，程序可以自动部署（热部署）。有以下四种情况，如何能实现热部署。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
      <category term="微服务" scheme="http://yoursite.com/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（四）-源码解析AOP原理</title>
    <link href="http://yoursite.com/2018/12/16/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%914-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90AOP%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/</id>
    <published>2018-12-16T11:48:27.000Z</published>
    <updated>2018-12-26T16:32:06.244Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Spring AOP 基础</strong></p><p><strong>AOP：【动态代理】</strong><br>      指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式；</p><p><strong>实现Spring AOP三部曲：</strong></p><ol><li><p>将业务逻辑组件和切面类都加入到容器中；告诉Spring哪个是切面类（@Aspect）</p></li><li><p>在切面类上的每一个通知方法上标注通知注解，告诉Spring何时何地运行（切入点表达式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">通知方法：</span><br><span class="line">前置通知(@Before)：logStart：在目标方法运行之前运行</span><br><span class="line">后置通知(@After)：logEnd：在目标方法运行结束之后运行（无论方法正常结束还是异常结束）</span><br><span class="line">返回通知(@AfterReturning)：logReturn：在目标方法正常返回之后运行</span><br><span class="line">异常通知(@AfterThrowing)：logException：在目标方法出现异常以后运行</span><br><span class="line">环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）</span><br></pre></td></tr></table></figure></li><li><p>开启基于注解的aop模式；@EnableAspectJAutoProxy</p></li></ol><a id="more"></a><hr><p>下文为Spring AOP源码解析</p><hr><h1 id="1-EnableAspectJAutoProxy是什么？"><a href="#1-EnableAspectJAutoProxy是什么？" class="headerlink" title="1.@EnableAspectJAutoProxy是什么？"></a>1.@EnableAspectJAutoProxy是什么？</h1><p> AOP原理：【以@EnableAspectJAutoProxy为入口分析，看给容器中注册了什么组件？这个组件什么时候工作？这个组件的功能是什么？】</p><ul><li>@Import(AspectJAutoProxyRegistrar.class)：给容器中导入AspectJAutoProxyRegistrar</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;AspectJAutoProxyRegistrar.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAspectJAutoProxy &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">proxyTargetClass</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">exposeProxy</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar接口，ImportBeanDefinitionRegistrar接口我们在前面Bean注册时曾提过，实现该接口可以允许自定义给容器中注册Bean。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AspectJAutoProxyRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    AspectJAutoProxyRegistrar() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(registry);</span><br><span class="line">        AnnotationAttributes enableAspectJAutoProxy = AnnotationConfigUtils.attributesFor(importingClassMetadata, EnableAspectJAutoProxy.class);</span><br><span class="line">        <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"proxyTargetClass"</span>)) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (enableAspectJAutoProxy.getBoolean(<span class="string">"exposeProxy"</span>)) &#123;</span><br><span class="line">            AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong>利用AspectJAutoProxyRegistrar自定义给容器中注册bean；BeanDefinetion定义信息为<br> internalAutoProxyCreator=AnnotationAwareAspectJAutoProxyCreator</p><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544966035065.png" alt="1544966035065"></p><p><strong>总结：给容器中注册一个AnnotationAwareAspectJAutoProxyCreator；</strong></p><h1 id="2AnnotationAwareAspectJAutoProxyCreator"><a href="#2AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="2AnnotationAwareAspectJAutoProxyCreator"></a>2AnnotationAwareAspectJAutoProxyCreator</h1><h2 id="2-1-AnnotationAwareAspectJAutoProxyCreator-的继承关系"><a href="#2-1-AnnotationAwareAspectJAutoProxyCreator-的继承关系" class="headerlink" title="2.1 AnnotationAwareAspectJAutoProxyCreator 的继承关系"></a>2.1 AnnotationAwareAspectJAutoProxyCreator 的继承关系</h2><p>AnnotationAwareAspectJAutoProxyCreator<br>              -&gt;AspectJAwareAdvisorAutoProxyCreator<br>                  -&gt;AbstractAdvisorAutoProxyCreator<br>                      -&gt;AbstractAutoProxyCreator<br>                              implements SmartInstantiationAwareBeanPostProcessor, BeanFactoryAware<br><strong>总结：</strong>关注SmartInstantiationAwareBeanPostProcessor后置处理器（在bean初始化完成前后做事情）、BeanFactoryAware自动装配BeanFactory</p><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544966392400.png" alt="1544966392400"></p><h2 id="2-2-注册AnnotationAwareAspectJAutoProxyCreator"><a href="#2-2-注册AnnotationAwareAspectJAutoProxyCreator" class="headerlink" title="2.2 注册AnnotationAwareAspectJAutoProxyCreator"></a>2.2 注册AnnotationAwareAspectJAutoProxyCreator</h2><p>着重关注如下几个类的方法，了解创建和注册AnnotationAwareAspectJAutoProxyCreator的过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AbstractAutoProxyCreator.setBeanFactory()</span><br><span class="line">AbstractAutoProxyCreator.有后置处理器的逻辑；</span><br><span class="line">AbstractAdvisorAutoProxyCreator.setBeanFactory()-》initBeanFactory()</span><br><span class="line">AnnotationAwareAspectJAutoProxyCreator.initBeanFactory()</span><br></pre></td></tr></table></figure><p>以下是创建和注册AnnotationAwareAspectJAutoProxyCreator的过程</p><h3 id="2-2-1-容器准备工作"><a href="#2-2-1-容器准备工作" class="headerlink" title="2.2.1 容器准备工作"></a>2.2.1 容器准备工作</h3><ul><li>1）、传入配置类，创建ioc容器</li><li>2）、注册配置类，调用refresh（）刷新容器；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnnotationConfigApplicationContext</span><span class="params">(Class... annotatedClasses)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>();</span><br><span class="line">    <span class="keyword">this</span>.register(annotatedClasses);</span><br><span class="line">    <span class="keyword">this</span>.refresh();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3）、registerBeanPostProcessors(beanFactory);注册bean的后置处理器来方便拦截bean的创建；</li></ul><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544967723945.png" alt="1544967723945"></p><h3 id="2-2-2-registerBeanPostProcessors-beanFactory-流程"><a href="#2-2-2-registerBeanPostProcessors-beanFactory-流程" class="headerlink" title="2.2.2 registerBeanPostProcessors(beanFactory) 流程"></a>2.2.2 registerBeanPostProcessors(beanFactory) 流程</h3><ul><li>1）、先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor</li></ul><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544969617607.png" alt="1544969617607"></p><ul><li>2）、给容器中加别的BeanPostProcessor</li><li>3）、优先注册实现了PriorityOrdered接口的BeanPostProcessor；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// First, register the BeanPostProcessors that implement PriorityOrdered.</span></span><br><span class="line">sortPostProcessors(priorityOrderedPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, priorityOrderedPostProcessors);</span><br></pre></td></tr></table></figure><ul><li>4）、再给容器中注册实现了Ordered接口的BeanPostProcessor；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Next, register the BeanPostProcessors that implement Ordered.</span></span><br><span class="line">List&lt;BeanPostProcessor&gt; orderedPostProcessors = <span class="keyword">new</span> ArrayList&lt;BeanPostProcessor&gt;();</span><br><span class="line"><span class="keyword">for</span> (String ppName : orderedPostProcessorNames) &#123;</span><br><span class="line">    BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</span><br><span class="line">    orderedPostProcessors.add(pp);</span><br><span class="line">    <span class="keyword">if</span> (pp <span class="keyword">instanceof</span> MergedBeanDefinitionPostProcessor) &#123;</span><br><span class="line">        internalPostProcessors.add(pp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sortPostProcessors(orderedPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, orderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">//其中AbstractAutoProxyCreator 实现了Order接口，就是通过此时注册的</span></span><br><span class="line">AbstractAutoProxyCreator extends ProxyProcessorSupport </span><br><span class="line">ProxyProcessorSupport extends ProxyConfig implements Ordered</span><br></pre></td></tr></table></figure><ul><li><ul><li><p>（a） BeanPostProcessor pp = beanFactory.getBean(ppName, BeanPostProcessor.class);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title">FactoryBeanRegistrySupport</span> <span class="keyword">implements</span> <span class="title">ConfigurableBeanFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGetBean(name, requiredType, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>（b）然而IOC容器中第一次不会存在该bean,尝试创建Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBeanFactory</span> <span class="keyword">extends</span> <span class="title">FactoryBeanRegistrySupport</span> <span class="keyword">implements</span> <span class="title">ConfigurableBeanFactory</span></span></span><br><span class="line"><span class="class">// <span class="title">Create</span> <span class="title">bean</span> <span class="title">instance</span>.</span></span><br><span class="line"><span class="class"><span class="title">if</span> (<span class="title">mbd</span>.<span class="title">isSingleton</span>()) </span>&#123;</span><br><span class="line"><span class="comment">//获取单实例bean为空，尝试createBean</span></span><br><span class="line">    sharedInstance = getSingleton(beanName, <span class="keyword">new</span> ObjectFactory&lt;Object&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> createBean(beanName, mbd, args);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (BeansException ex) &#123;</span><br><span class="line">                <span class="comment">// Explicitly remove instance from singleton cache: It might have been put there</span></span><br><span class="line">                <span class="comment">// eagerly by the creation process, to allow for circular reference resolution.</span></span><br><span class="line">                <span class="comment">// Also remove any beans that received a temporary reference to the bean.</span></span><br><span class="line">                destroySingleton(beanName);</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>（c）执行createBean:481, AbstractAutowireCapableBeanFactory 和doCreateBean:553, AbstractAutowireCapableBeanFactory</li><li>（d）initializeBean:1618, AbstractAutowireCapableBeanFactory 详细initializeBean过程见（6）</li></ul></li><li><p>5）、注册没实现优先级接口的BeanPostProcessor；</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Now, register all regular BeanPostProcessors.</span></span><br><span class="line">registerBeanPostProcessors(beanFactory, nonOrderedPostProcessors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Finally, re-register all internal BeanPostProcessors.</span></span><br><span class="line">sortPostProcessors(internalPostProcessors, beanFactory);</span><br><span class="line">registerBeanPostProcessors(beanFactory, internalPostProcessors);</span><br></pre></td></tr></table></figure><ul><li><p>6）、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；</p><ul><li>创建internalAutoProxyCreator的BeanPostProcessor【(类型为)AnnotationAwareAspectJAutoProxyCreator】</li><li>1）、创建Bean的实例 doCreateBean（）553, AbstractAutowireCapableBeanFactory</li><li>2）、populateBean；给bean的各种属性赋值</li></ul><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544970821277.png" alt="1544970821277"></p><ul><li><p>3）、initializeBean：初始化bean；</p><ul><li>1）、invokeAwareMethods()：处理Aware接口的方法回调</li><li>2）、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的postProcessBeforeInitialization（）</li><li>3）、invokeInitMethods()；执行自定义的初始化方法</li><li>4）、applyBeanPostProcessorsAfterInitialization()；执行后置处理器的postProcessAfterInitialization（）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                invokeAwareMethods(beanName, bean);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, getAccessControlContext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        invokeAwareMethods(beanName, bean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Object wrappedBean = bean;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(</span><br><span class="line">            (mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>),</span><br><span class="line">            beanName, <span class="string">"Invocation of init method failed"</span>, ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">        wrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> wrappedBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4）、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；–&gt;aspectJAdvisorsBuilder</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initBeanFactory</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.initBeanFactory(beanFactory);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.aspectJAdvisorFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.aspectJAdvisorFactory = <span class="keyword">new</span> ReflectiveAspectJAdvisorFactory(beanFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.aspectJAdvisorsBuilder = <span class="keyword">new</span> AnnotationAwareAspectJAutoProxyCreator.BeanFactoryAspectJAdvisorsBuilderAdapter(beanFactory, <span class="keyword">this</span>.aspectJAdvisorFactory);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>7）、把BeanPostProcessor注册到BeanFactory中；registerBeanPostProcessors(beanFactory, internalPostProcessors);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register the given BeanPostProcessor beans.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanPostProcessors</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    ConfigurableListableBeanFactory beanFactory, List&lt;BeanPostProcessor&gt; postProcessors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (BeanPostProcessor postProcessor : postProcessors) &#123;</span><br><span class="line">        beanFactory.addBeanPostProcessor(postProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2-3-创建和注册AnnotationAwareAspectJAutoProxyCreator的过程总结"><a href="#2-2-3-创建和注册AnnotationAwareAspectJAutoProxyCreator的过程总结" class="headerlink" title="2.2.3 创建和注册AnnotationAwareAspectJAutoProxyCreator的过程总结"></a>2.2.3 创建和注册AnnotationAwareAspectJAutoProxyCreator的过程总结</h3><p><strong>流程总结：</strong></p><ul><li><p>1）、先获取ioc容器已经定义了的需要创建对象的所有BeanPostProcessor</p></li><li><p>2）、给容器中加别的BeanPostProcessor</p></li><li><p>3）、优先注册实现了PriorityOrdered接口的BeanPostProcessor；</p></li><li><p>4）、再给容器中注册实现了Ordered接口的BeanPostProcessor；</p></li><li><p>5）、注册没实现优先级接口的BeanPostProcessor；</p></li><li><p>6）、注册BeanPostProcessor，实际上就是创建BeanPostProcessor对象，保存在容器中；</p><ul><li>创建internalAutoProxyCreator的BeanPostProcessor【AnnotationAwareAspectJAutoProxyCreator】</li><li>1）、创建Bean的实例</li><li>2）、populateBean；给bean的各种属性赋值</li><li>3）、initializeBean：初始化bean；<ul><li>1）、invokeAwareMethods()：处理Aware接口的方法回调</li><li>2）、applyBeanPostProcessorsBeforeInitialization()：应用后置处理器的postProcessBeforeInitialization（）</li><li>3）、invokeInitMethods()；执行自定义的初始化方法</li><li>4）、applyBeanPostProcessorsAfterInitialization()；执行后置处理器的postProcessAfterInitialization（）；</li></ul></li></ul><ul><li>4）、BeanPostProcessor(AnnotationAwareAspectJAutoProxyCreator)创建成功；–&gt;aspectJAdvisorsBuilder</li></ul></li><li><p>7）、把BeanPostProcessor注册到BeanFactory中；beanFactory.addBeanPostProcessor(postProcessor);</p></li></ul><h2 id="2-3-AnnotationAwareAspectJAutoProxyCreator执行时机"><a href="#2-3-AnnotationAwareAspectJAutoProxyCreator执行时机" class="headerlink" title="2.3  AnnotationAwareAspectJAutoProxyCreator执行时机"></a>2.3  AnnotationAwareAspectJAutoProxyCreator执行时机</h2><p>finishBeanFactoryInitialization(beanFactory);完成BeanFactory初始化工作；创建剩下的单实例bean</p><ul><li><p>1）、遍历获取容器中所有的Bean，依次创建对象getBean(beanName);<br>​    getBean-&gt;doGetBean()-&gt;getSingleton()-&gt;</p></li><li><p>2）、创建bean<br>【AnnotationAwareAspectJAutoProxyCreator在所有bean创建之前会有一个拦截，InstantiationAwareBeanPostProcessor，会调用postProcessBeforeInstantiation()】</p><ul><li><p>1）、先从缓存中获取当前bean，如果能获取到，说明bean是之前被创建过的，直接使用，否则再创建；只要创建好的Bean都会被缓存起来；</p></li><li><p>2）、createBean（）;创建bean；<br>AnnotationAwareAspectJAutoProxyCreator <strong>会在任何bean创建之前先尝试返回bean的实例</strong></p><ul><li><p>1）、resolveBeforeInstantiation(beanName, mbdToUse);解析BeforeInstantiation希望后置处理器在此能返回一个代理对象；后置处理器先尝试返回对象；如果能返回代理对象就使用，如果不能就继续执行第二步doCreateBean().</p><ul><li>拿到所有后置处理器，如果是InstantiationAwareBeanPostProcessor;就执行postProcessBeforeInstantiation</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bean = applyBeanPostProcessorsBeforeInstantiation（）：</span><br><span class="line"><span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line"> bean = applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>2）、doCreateBean(beanName, mbdToUse, args);真正的去创建一个bean实例；和3.6流程一样；</p></li></ul></li></ul></li></ul><h3 id="2-3-1后置处理器区别"><a href="#2-3-1后置处理器区别" class="headerlink" title="2.3.1后置处理器区别"></a>2.3.1后置处理器区别</h3><ul><li>BeanPostProcessor是在Bean对象创建完成初始化前后调用的</li><li>InstantiationAwareBeanPostProcessor是在创建Bean实例之前先尝试用后置处理器返回对象的】</li></ul><h2 id="2-4-InstantiationAwareBeanPostProcessor的作用"><a href="#2-4-InstantiationAwareBeanPostProcessor的作用" class="headerlink" title="2.4 InstantiationAwareBeanPostProcessor的作用"></a>2.4 InstantiationAwareBeanPostProcessor的作用</h2><h3 id="2-4-1-postProcessBeforeInstantiation"><a href="#2-4-1-postProcessBeforeInstantiation" class="headerlink" title="2.4.1 postProcessBeforeInstantiation"></a>2.4.1 postProcessBeforeInstantiation</h3><ul><li>1）、每一个bean创建之前，调用postProcessBeforeInstantiation()；<ul><li>1）、判断当前bean是否在advisedBeans中（保存了所有需要增强bean）</li><li>2）、判断当前bean是否是基础类型的Advice、Pointcut、Advisor、AopInfrastructureBean，或者是否是切面（@Aspect）</li><li>3）、是否需要跳过<ul><li>1）、获取候选的增强器（切面里面的通知方法）【List<advisor> candidateAdvisors】，每一个封装的通知方法的增强器是 InstantiationModelAwarePointcutAdvisor；判断每一个增强器是否是 AspectJPointcutAdvisor 类型的；返回true</advisor></li><li>2）、永远返回false</li></ul></li></ul></li></ul><h3 id="2-4-2-postProcessAfterInitialization"><a href="#2-4-2-postProcessAfterInitialization" class="headerlink" title="2.4.2 postProcessAfterInitialization"></a>2.4.2 postProcessAfterInitialization</h3><ul><li><p>2）、创建对象 postProcessAfterInitialization；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> wrapIfNecessary(bean, beanName, cacheKey);<span class="comment">//包装如果需要的情况下</span></span><br><span class="line"><span class="number">1</span>）、获取当前bean的所有增强器（通知方法）  Object[]  specificInterceptors</span><br><span class="line"><span class="number">1</span>、找到候选的所有的增强器（找哪些通知方法是需要切入当前bean方法的）</span><br><span class="line"><span class="number">2</span>、获取到能在bean使用的增强器。</span><br><span class="line"><span class="number">3</span>、给增强器排序</span><br><span class="line"><span class="number">2</span>）、保存当前bean在advisedBeans中；</span><br><span class="line"><span class="number">3</span>）、如果当前bean需要增强，创建当前bean的代理对象；</span><br><span class="line"><span class="number">1</span>）、获取所有增强器（通知方法）</span><br><span class="line"><span class="number">2</span>）、保存到proxyFactory</span><br><span class="line"><span class="number">3</span>）、创建代理对象：Spring自动决定</span><br><span class="line">JdkDynamicAopProxy(config);jdk动态代理；</span><br><span class="line">ObjenesisCglibAopProxy(config);cglib的动态代理；</span><br><span class="line"><span class="number">4</span>）、给容器中返回当前组件使用cglib增强了的代理对象；</span><br><span class="line"><span class="number">5</span>）、以后容器中获取到的就是这个组件的代理对象，执行目标方法的时候，代理对象就会执行通知方法的流程；</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-4-3-目标方法执行"><a href="#2-4-3-目标方法执行" class="headerlink" title="2.4.3 目标方法执行"></a>2.4.3 目标方法执行</h3><p>3）、目标方法执行    ；<br>​    容器中保存了组件的代理对象（cglib增强后的对象），这个对象里面保存了详细信息（比如增强器，目标对象，xxx）；</p><ul><li>1）、CglibAopProxy.intercept();拦截目标方法的执行</li><li>2）、根据ProxyFactory对象获取将要执行的目标方法拦截器链；<br>List<object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);<ul><li>1）、List<object> interceptorList保存所有拦截器 5<br>一个默认的ExposeInvocationInterceptor 和 4个增强器；</object></li><li>2）、遍历所有的增强器，将其转为Interceptor；<br>registry.getInterceptors(advisor);</li><li>3）、将增强器转为List<methodinterceptor>；<br>如果是MethodInterceptor，直接加入到集合中<br>如果不是，使用AdvisorAdapter将增强器转为MethodInterceptor；<br>转换完成返回MethodInterceptor数组；</methodinterceptor></li></ul></object></li></ul><ul><li><p>3）、如果没有拦截器链，直接执行目标方法;</p><p>拦截器链（每一个通知方法又被包装为方法拦截器，利用MethodInterceptor机制）</p></li><li><p>4）、如果有拦截器链，把需要执行的目标对象，目标方法，</p><p>拦截器链等信息传入创建一个 CglibMethodInvocation 对象，</p><p>并调用 Object retVal =  mi.proceed();</p></li><li><p>5）、拦截器链的触发过程;</p><ul><li>1)、如果没有拦截器执行执行目标方法，或者拦截器的索引和拦截器数组-1大小一样（指定到了最后一个拦截器）执行目标方法；</li><li>2)、链式获取每一个拦截器，拦截器执行invoke方法，每一个拦截器等待下一个拦截器执行完成返回以后再来执行；拦截器链的机制，保证通知方法与目标方法的执行顺序；</li></ul></li></ul><h4 id="2-4-3-1-拦截器链"><a href="#2-4-3-1-拦截器链" class="headerlink" title="2.4.3.1 拦截器链"></a>2.4.3.1 拦截器链</h4><p><img src="/2018/12/16/Spring注解驱动开发4-源码解析AOP原理/1544974697813.png" alt="1544974697813"></p><h1 id="3-Spring-AOP-源码解析总结"><a href="#3-Spring-AOP-源码解析总结" class="headerlink" title="3. Spring AOP 源码解析总结"></a>3. Spring AOP 源码解析总结</h1><p>  总结：</p><ul><li><p>1）、  @Enabl eAspectJAutoProxy 开启AOP功能</p></li><li><p>2）、 @EnableAspectJAutoProxy 会给容器中注册一个组件 AnnotationAwareAspectJAutoProxyCreator </p></li><li><p>3）、AnnotationAwareAspectJAutoProxyCreator是一个后置处理器；</p></li><li><p>4）、容器的创建流程：</p><ul><li><p>1）、registerBeanPostProcessors（）注册后置处理器；创建AnnotationAwareAspectJAutoProxyCreator对象</p></li><li><p>2）、finishBeanFactoryInitialization（）初始化剩下的单实例bean</p><ul><li><p>1）、创建业务逻辑组件和切面组件</p></li><li><p>2）、AnnotationAwareAspectJAutoProxyCreator拦截组件的创建过程</p></li><li><p>3）、组件创建完之后，判断组件是否需要增强</p><p>是：切面的通知方法，包装成增强器（Advisor）;给业务逻辑组件创建一个代理对象（cglib）；</p></li></ul></li></ul></li></ul><ul><li><p>5）、执行目标方法：</p><ul><li><p>1）、代理对象执行目标方法</p></li><li><p>2）、CglibAopProxy.intercept()；</p><ul><li><p>1）、得到目标方法的拦截器链（增强器包装成拦截器MethodInterceptor）</p></li><li><p>2）、利用拦截器的链式机制，依次进入每一个拦截器进行执行；</p></li><li><p>3）、效果：</p><p>正常执行：前置通知-》目标方法-》后置通知-》返回通知</p><p>出现异常：前置通知-》目标方法-》后置通知-》异常通知</p></li></ul></li></ul></li></ul><h1 id="4-希望大家手动敲一遍代码，会收获颇丰！"><a href="#4-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="4 希望大家手动敲一遍代码，会收获颇丰！"></a>4 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="5-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#5-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="5.欢迎关注米宝窝，持续更新中，谢谢！"></a>5.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Spring AOP 基础&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AOP：【动态代理】&lt;/strong&gt;&lt;br&gt;      指在程序运行期间动态的将某段代码切入到指定方法指定位置进行运行的编程方式；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现Spring AOP三部曲：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将业务逻辑组件和切面类都加入到容器中；告诉Spring哪个是切面类（@Aspect）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在切面类上的每一个通知方法上标注通知注解，告诉Spring何时何地运行（切入点表达式）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;通知方法：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;前置通知(@Before)：logStart：在目标方法运行之前运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;后置通知(@After)：logEnd：在目标方法运行结束之后运行（无论方法正常结束还是异常结束）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;返回通知(@AfterReturning)：logReturn：在目标方法正常返回之后运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;异常通知(@AfterThrowing)：logException：在目标方法出现异常以后运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;环绕通知(@Around)：动态代理，手动推进目标方法运行（joinPoint.procced()）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;开启基于注解的aop模式；@EnableAspectJAutoProxy&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（五）-源码解析Spring容器创建过程</title>
    <link href="http://yoursite.com/2018/12/10/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%915-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90Spring%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/12/10/Spring注解驱动开发5-源码解析Spring容器创建过程/</id>
    <published>2018-12-10T01:34:54.000Z</published>
    <updated>2018-12-26T16:48:27.265Z</updated>
    
    <content type="html"><![CDATA[<p>Spring容器的refresh()【创建刷新】;</p><h1 id="1-prepareRefresh-刷新前的预处理"><a href="#1-prepareRefresh-刷新前的预处理" class="headerlink" title="1. prepareRefresh()刷新前的预处理;"></a>1. prepareRefresh()刷新前的预处理;</h1><p>   1）、initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法；<br>   2）、getEnvironment().validateRequiredProperties();检验属性的合法等<br>   3）、earlyApplicationEvents= new LinkedHashSet<applicationevent>();保存容器中的一些早期的事件；</applicationevent></p><a id="more"></a><h1 id="2-obtainFreshBeanFactory"><a href="#2-obtainFreshBeanFactory" class="headerlink" title="2. obtainFreshBeanFactory();"></a>2. obtainFreshBeanFactory();</h1><p>获取BeanFactory；</p><p>   1）、refreshBeanFactory();刷新【创建】BeanFactory；<br>​         创建了一个this.beanFactory = new DefaultListableBeanFactory();<br>​         设置id；<br>   2）、getBeanFactory();返回刚才GenericApplicationContext创建的BeanFactory对象；<br>   3）、将创建的BeanFactory【DefaultListableBeanFactory】返回；</p><h1 id="3-BeanFactory的预准备工作"><a href="#3-BeanFactory的预准备工作" class="headerlink" title="3. BeanFactory的预准备工作"></a>3. BeanFactory的预准备工作</h1><p>prepareBeanFactory(beanFactory);BeanFactory的预准备工作（BeanFactory进行一些设置）；</p><p>   1）、设置BeanFactory的类加载器、支持表达式解析器…<br>   2）、添加部分BeanPostProcessor【ApplicationContextAwareProcessor】<br>   3）、设置忽略的自动装配的接口EnvironmentAware、EmbeddedValueResolverAware、xxx；<br>   4）、注册可以解析的自动装配；我们能直接在任何组件中自动注入：<br>​         BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext<br>   5）、添加BeanPostProcessor【ApplicationListenerDetector】<br>   6）、添加编译时的AspectJ；<br>   7）、给BeanFactory中注册一些能用的组件；<br>​      environment【ConfigurableEnvironment】、<br>​      systemProperties【Map&lt;String, Object&gt;】、<br>​      systemEnvironment【Map&lt;String, Object&gt;】</p><h1 id="4-postProcessBeanFactory-beanFactory"><a href="#4-postProcessBeanFactory-beanFactory" class="headerlink" title="4.postProcessBeanFactory(beanFactory);"></a>4.postProcessBeanFactory(beanFactory);</h1><p>BeanFactory准备工作完成后进行的后置处理工作；</p><p>   1）、子类通过重写这个方法来在BeanFactory创建并预准备完成以后做进一步的设置<br>======================以上是BeanFactory的创建及预准备工作==================================</p><h1 id="5-执行BeanFactoryPostProcessor的方法"><a href="#5-执行BeanFactoryPostProcessor的方法" class="headerlink" title="5.执行BeanFactoryPostProcessor的方法"></a>5.执行BeanFactoryPostProcessor的方法</h1><p>invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessor的方法；</p><p>   BeanFactoryPostProcessor：BeanFactory的后置处理器。在BeanFactory标准初始化之后执行的；<br>   两个接口：BeanFactoryPostProcessor、BeanDefinitionRegistryPostProcessor<br>   1）、执行BeanFactoryPostProcessor的方法；<br>​      先执行BeanDefinitionRegistryPostProcessor<br>​      1）、获取所有的BeanDefinitionRegistryPostProcessor；<br>​      2）、看先执行实现了PriorityOrdered优先级接口的BeanDefinitionRegistryPostProcessor、<br>​         postProcessor.postProcessBeanDefinitionRegistry(registry)<br>​      3）、在执行实现了Ordered顺序接口的BeanDefinitionRegistryPostProcessor；<br>​         postProcessor.postProcessBeanDefinitionRegistry(registry)<br>​      4）、最后执行没有实现任何优先级或者是顺序接口的BeanDefinitionRegistryPostProcessors；<br>​         postProcessor.postProcessBeanDefinitionRegistry(registry)<br>​<br>​      再执行BeanFactoryPostProcessor的方法<br>​      1）、获取所有的BeanFactoryPostProcessor<br>​      2）、看先执行实现了PriorityOrdered优先级接口的BeanFactoryPostProcessor、<br>​         postProcessor.postProcessBeanFactory()<br>​      3）、在执行实现了Ordered顺序接口的BeanFactoryPostProcessor；<br>​         postProcessor.postProcessBeanFactory()<br>​      4）、最后执行没有实现任何优先级或者是顺序接口的BeanFactoryPostProcessor；<br>​         postProcessor.postProcessBeanFactory()</p><h1 id="6-注册BeanPostProcessor"><a href="#6-注册BeanPostProcessor" class="headerlink" title="6.注册BeanPostProcessor"></a>6.注册BeanPostProcessor</h1><p>registerBeanPostProcessors(beanFactory);注册BeanPostProcessor（Bean的后置处理器）【 intercept bean creation】</p><p>​      不同接口类型的BeanPostProcessor；在Bean创建前后的执行时机是不一样的<br>​      BeanPostProcessor、<br>​      DestructionAwareBeanPostProcessor、<br>​      InstantiationAwareBeanPostProcessor、<br>​      SmartInstantiationAwareBeanPostProcessor、<br>​      MergedBeanDefinitionPostProcessor【internalPostProcessors】、<br>​<br>​      1）、获取所有的 BeanPostProcessor;后置处理器都默认可以通过PriorityOrdered、Ordered接口来执行优先级<br>​      2）、先注册PriorityOrdered优先级接口的BeanPostProcessor；<br>​         把每一个BeanPostProcessor；添加到BeanFactory中<br>​         beanFactory.addBeanPostProcessor(postProcessor);<br>​      3）、再注册Ordered接口的<br>​      4）、最后注册没有实现任何优先级接口的<br>​      5）、最终注册MergedBeanDefinitionPostProcessor；<br>​      6）、注册一个ApplicationListenerDetector；来在Bean创建完成后检查是否是ApplicationListener，如果是<br>​         applicationContext.addApplicationListener((ApplicationListener&lt;?&gt;) bean);</p><h1 id="7-初始化MessageSource组件"><a href="#7-初始化MessageSource组件" class="headerlink" title="7.初始化MessageSource组件"></a>7.初始化MessageSource组件</h1><p>initMessageSource();初始化MessageSource组件（做国际化功能；消息绑定，消息解析）；</p><p>​      1）、获取BeanFactory<br>​      2）、看容器中是否有id为messageSource的，类型是MessageSource的组件<br>​         如果有赋值给messageSource，如果没有自己创建一个DelegatingMessageSource；<br>​            MessageSource：取出国际化配置文件中的某个key的值；能按照区域信息获取；<br>​      3）、把创建好的MessageSource注册在容器中，以后获取国际化配置文件的值的时候，可以自动注入MessageSource；<br>​         beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);<br>​         MessageSource.getMessage(String code, Object[] args, String defaultMessage, Locale locale);</p><h1 id="8-初始化事件派发器；"><a href="#8-初始化事件派发器；" class="headerlink" title="8.初始化事件派发器；"></a>8.初始化事件派发器；</h1><p>initApplicationEventMulticaster();初始化事件派发器；</p><p>​      1）、获取BeanFactory<br>​      2）、从BeanFactory中获取applicationEventMulticaster的ApplicationEventMulticaster；<br>​      3）、如果上一步没有配置；创建一个SimpleApplicationEventMulticaster<br>​      4）、将创建的ApplicationEventMulticaster添加到BeanFactory中，以后其他组件直接自动注入</p><h1 id="9-onRefresh-留给子容器（子类）"><a href="#9-onRefresh-留给子容器（子类）" class="headerlink" title="9.onRefresh();留给子容器（子类）"></a>9.onRefresh();留给子容器（子类）</h1><p>​      1、子类重写这个方法，在容器刷新的时候可以自定义逻辑；</p><h1 id="10-registerListeners"><a href="#10-registerListeners" class="headerlink" title="10.registerListeners();"></a>10.registerListeners();</h1><p>registerListeners();给容器中将所有项目里面的ApplicationListener注册进来；</p><p>​      1、从容器中拿到所有的ApplicationListener<br>​      2、将每个监听器添加到事件派发器中；<br>​         getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);<br>​      3、派发之前步骤产生的事件；</p><h1 id="11-finishBeanFactoryInitialization"><a href="#11-finishBeanFactoryInitialization" class="headerlink" title="11.finishBeanFactoryInitialization"></a>11.finishBeanFactoryInitialization</h1><p>finishBeanFactoryInitialization(beanFactory);初始化所有剩下的单实例bean；</p><p>   1、beanFactory.preInstantiateSingletons();初始化后剩下的单实例bean<br>​      1）、获取容器中的所有Bean，依次进行初始化和创建对象<br>​      2）、获取Bean的定义信息；RootBeanDefinition<br>​      3）、Bean不是抽象的，是单实例的，是懒加载；<br>​         1）、判断是否是FactoryBean；是否是实现FactoryBean接口的Bean；<br>​         2）、不是工厂Bean。利用getBean(beanName);创建对象<br>​            0、getBean(beanName)； ioc.getBean();<br>​            1、doGetBean(name, null, null, false);<br>​            2、先获取缓存中保存的单实例Bean。如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）<br>​               从private final Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;String, Object&gt;(256);获取的<br>​            3、缓存中获取不到，开始Bean的创建对象流程；<br>​            4、标记当前bean已经被创建<br>​            5、获取Bean的定义信息；<br>​            6、【获取当前Bean依赖的其他Bean;如果有按照getBean()把依赖的Bean先创建出来；】<br>​            7、启动单实例Bean的创建流程；<br>​               1）、createBean(beanName, mbd, args);<br>​               2）、Object bean = resolveBeforeInstantiation(beanName, mbdToUse);让BeanPostProcessor先拦截返回代理对象；<br>​                  【InstantiationAwareBeanPostProcessor】：提前执行；<br>​                  先触发：postProcessBeforeInstantiation()；<br>​                  如果有返回值：触发postProcessAfterInitialization()；<br>​               3）、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象；调用4）<br>​               4）、Object beanInstance = doCreateBean(beanName, mbdToUse, args);创建Bean<br>​                   1）、【创建Bean实例】；createBeanInstance(beanName, mbd, args);<br>​                     利用工厂方法或者对象的构造器创建出Bean实例；<br>​                   2）、applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);<br>​                     调用MergedBeanDefinitionPostProcessor的postProcessMergedBeanDefinition(mbd, beanType, beanName);<br>​                   3）、【Bean属性赋值】populateBean(beanName, mbd, instanceWrapper);<br>​                     赋值之前：<br>​                     1）、拿到InstantiationAwareBeanPostProcessor后置处理器；<br>​                        postProcessAfterInstantiation()；<br>​                     2）、拿到InstantiationAwareBeanPostProcessor后置处理器；<br>​                        postProcessPropertyValues()；<br>​                     =====赋值之前：===<br>​                     3）、应用Bean属性的值；为属性利用setter方法等进行赋值；<br>​                        applyPropertyValues(beanName, mbd, bw, pvs);<br>​                   4）、【Bean初始化】initializeBean(beanName, exposedObject, mbd);<br>​                     1）、【执行Aware接口方法】invokeAwareMethods(beanName, bean);执行xxxAware接口的方法<br>​                        BeanNameAware\BeanClassLoaderAware\BeanFactoryAware<br>​                     2）、【执行后置处理器初始化之前】applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);<br>​                        BeanPostProcessor.postProcessBeforeInitialization（）;<br>​                     3）、【执行初始化方法】invokeInitMethods(beanName, wrappedBean, mbd);<br>​                        1）、是否是InitializingBean接口的实现；执行接口规定的初始化；<br>​                        2）、是否自定义初始化方法；<br>​                     4）、【执行后置处理器初始化之后】applyBeanPostProcessorsAfterInitialization<br>​                        BeanPostProcessor.postProcessAfterInitialization()；<br>​                   5）、注册Bean的销毁方法；<br>​               5）、将创建的Bean添加到缓存中singletonObjects；<br>​            ioc容器就是这些Map；很多的Map里面保存了单实例Bean，环境信息。。。。；<br>​      所有Bean都利用getBean创建完成以后；<br>​         检查所有的Bean是否是SmartInitializingSingleton接口的；如果是；就执行afterSingletonsInstantiated()；</p><h1 id="12-完成BeanFactory的初始化创建工作"><a href="#12-完成BeanFactory的初始化创建工作" class="headerlink" title="12.完成BeanFactory的初始化创建工作"></a>12.完成BeanFactory的初始化创建工作</h1><p>finishRefresh();完成BeanFactory的初始化创建工作；IOC容器就创建完成；</p><p>​      1）、initLifecycleProcessor();初始化和生命周期有关的后置处理器；LifecycleProcessor<br>​         默认从容器中找是否有lifecycleProcessor的组件【LifecycleProcessor】；如果没有new DefaultLifecycleProcessor();<br>​         加入到容器；<br>​<br>​         写一个LifecycleProcessor的实现类，可以在BeanFactory<br>​            void onRefresh();<br>​            void onClose();<br>​      2）、    getLifecycleProcessor().onRefresh();<br>​         拿到前面定义的生命周期处理器（BeanFactory）；回调onRefresh()；<br>​      3）、publishEvent(new ContextRefreshedEvent(this));发布容器刷新完成事件；<br>​      4）、liveBeansView.registerApplicationContext(this);</p><h1 id="13-总结"><a href="#13-总结" class="headerlink" title="13. 总结"></a>13. 总结</h1><p>   1）、Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息；<br>​      1）、xml注册bean；<bean><br>​      2）、注解注册Bean；@Service、@Component、@Bean、xxx<br>   2）、Spring容器会合适的时机创建这些Bean<br>​      1）、用到这个bean的时候；利用getBean创建bean；创建好以后保存在容器中；<br>​      2）、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization()；<br>   3）、后置处理器；BeanPostProcessor<br>​      1）、每一个bean创建完成，都会使用各种后置处理器进行处理；来增强bean的功能；<br>​         AutowiredAnnotationBeanPostProcessor:处理自动注入<br>​         AnnotationAwareAspectJAutoProxyCreator:来做AOP功能；<br>​         xxx….<br>​         增强的功能注解：<br>​         AsyncAnnotationBeanPostProcessor<br>​         ….<br>   4）、事件驱动模型；<br>​      ApplicationListener；事件监听；<br>​      ApplicationEventMulticaster；事件派发：​</bean></p><h1 id="15-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#15-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="15. 欢迎关注米宝窝，持续更新中，谢谢！"></a>15. 欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring容器的refresh()【创建刷新】;&lt;/p&gt;
&lt;h1 id=&quot;1-prepareRefresh-刷新前的预处理&quot;&gt;&lt;a href=&quot;#1-prepareRefresh-刷新前的预处理&quot; class=&quot;headerlink&quot; title=&quot;1. prepareRefresh()刷新前的预处理;&quot;&gt;&lt;/a&gt;1. prepareRefresh()刷新前的预处理;&lt;/h1&gt;&lt;p&gt;   1）、initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法；&lt;br&gt;   2）、getEnvironment().validateRequiredProperties();检验属性的合法等&lt;br&gt;   3）、earlyApplicationEvents= new LinkedHashSet&lt;applicationevent&gt;();保存容器中的一些早期的事件；&lt;/applicationevent&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（二）-Bean的生命周期</title>
    <link href="http://yoursite.com/2018/12/09/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%912-Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2018/12/09/Spring注解驱动开发2-Bean的生命周期/</id>
    <published>2018-12-09T12:40:48.000Z</published>
    <updated>2018-12-15T13:13:19.715Z</updated>
    
    <content type="html"><![CDATA[<p>Bean的生命周期：<br>bean创建—初始化—-销毁的过程</p><p>容器管理bean的生命周期；<br>我们可以自定义初始化和销毁方法；容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁方法。</p><a id="more"></a><h1 id="1-指定初始化和销毁方法"><a href="#1-指定初始化和销毁方法" class="headerlink" title="1. 指定初始化和销毁方法"></a>1. 指定初始化和销毁方法</h1><h2 id="1-1-xml方式"><a href="#1-1-xml方式" class="headerlink" title="1.1 xml方式"></a>1.1 xml方式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.rocklei123.bean.Person"</span> <span class="attr">init-method</span>=<span class="string">""</span> <span class="attr">destroy-method</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-注解方式"><a href="#1-2-注解方式" class="headerlink" title="1.2 注解方式"></a>1.2 注解方式</h2><p>可通过@Bean(initMethod = “init”,destroyMethod = “destroy”)指定初始化及销毁方法，通过测试可以确定：</p><p><strong>构造对象</strong>：</p><ul><li>单实例：在容器启动的时候创建对象</li><li>多实例：在每次获取的时候创建对象</li></ul><p><strong>初始化</strong>：</p><pre><code>* 对象创建完成，并赋值好，调用初始化方法。</code></pre><p><strong>销毁：</strong></p><ul><li>单实例：容器关闭的时候</li><li>多实例：容器不会管理这个bean；容器不会调用销毁方法；</li></ul><h3 id="1-2-1-单实例情况测试"><a href="#1-2-1-单实例情况测试" class="headerlink" title="1.2.1 单实例情况测试"></a>1.2.1 单实例情况测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car...Constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car...init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Car...destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigLifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>,destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigLifeCycle.class);</span><br><span class="line">    System.out.println(<span class="string">"IOC 容器创建完成!"</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下测试结果可以确定Spring容器管理(单实例)Bean的过程为：</p><p>Bean构造方法–&gt;Bean init()–&gt;IOC容器创建完成–&gt;关闭容器–&gt;Bean销毁</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">十二月 09, 2018 9:25:32 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Sun Dec 09 21:25:32 CST 2018]; root of context hierarchy</span><br><span class="line">Car...Constructor...</span><br><span class="line">Car...init...</span><br><span class="line">IOC 容器创建完成!</span><br><span class="line">十二月 09, 2018 9:25:34 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Sun Dec 09 21:25:32 CST 2018]; root of context hierarchy</span><br><span class="line">Car...destroy...</span><br></pre></td></tr></table></figure><h3 id="1-2-2多实例情况下测试"><a href="#1-2-2多实例情况下测试" class="headerlink" title="1.2.2多实例情况下测试"></a>1.2.2多实例情况下测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigLifeCycle</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span>(initMethod = <span class="string">"init"</span>, destroyMethod = <span class="string">"destroy"</span>)</span><br><span class="line">    <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigLifeCycle.class);</span><br><span class="line">    System.out.println(<span class="string">"IOC 容器创建完成!"</span>);</span><br><span class="line">    Car car = (Car) context.getBean(<span class="string">"car"</span>);</span><br><span class="line">    System.out.println(car);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以下测试结果可以确定Spring容器管理(<strong>多实例</strong>)Bean的过程为（<strong>多实例注意：不会调用销毁方法</strong>）：</p><p>IOC容器创建完成–&gt;Bean构造方法–&gt;Bean init()–&gt;关闭容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">十二月 14, 2018 10:11:55 上午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 10:11:55 CST 2018]; root of context hierarchy</span><br><span class="line">IOC 容器创建完成!</span><br><span class="line">Car...Constructor...</span><br><span class="line">十二月 14, 2018 10:11:56 上午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 10:11:55 CST 2018]; root of context hierarchy</span><br><span class="line">Car...init...</span><br><span class="line">com.rocklei123.bean.Car@77e4c80f</span><br></pre></td></tr></table></figure><h1 id="2-实现InitializingBean和DisposableBean接口"><a href="#2-实现InitializingBean和DisposableBean接口" class="headerlink" title="2. 实现InitializingBean和DisposableBean接口"></a>2. 实现InitializingBean和DisposableBean接口</h1><p>Bean实现InitializingBean（定义初始化逻辑）；重写afterPropertiesSet()方法，表示构造方法完成后，并且属性赋值完成后执行该方法</p><p>DisposableBean（定义销毁逻辑）;容器销毁时调用</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">package</span> com.rocklei123.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.DisposableBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.InitializingBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat...constructor..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat...destroy..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cat...afterPropertiesSet..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.rocklei123.bean"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigLifeCycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycleByInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigLifeCycle.class);</span><br><span class="line">    System.out.println(<span class="string">"IOC 容器创建完成!"</span>);</span><br><span class="line">    Cat cat = (Cat) context.getBean(<span class="string">"cat"</span>);</span><br><span class="line">    System.out.println(cat);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">十二月 14, 2018 3:27:38 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 15:27:37 CST 2018]; root of context hierarchy</span><br><span class="line">cat...constructor...</span><br><span class="line">cat...afterPropertiesSet...</span><br><span class="line">十二月 14, 2018 3:27:41 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 15:27:37 CST 2018]; root of context hierarchy</span><br><span class="line">IOC 容器创建完成!</span><br><span class="line">com.rocklei123.bean.Cat@61009542</span><br><span class="line">cat...destroy...</span><br></pre></td></tr></table></figure><h1 id="3-JSR250-PostConstruct-和-PreDestroy"><a href="#3-JSR250-PostConstruct-和-PreDestroy" class="headerlink" title="3. JSR250 @PostConstruct 和@PreDestroy"></a>3. JSR250 @PostConstruct 和@PreDestroy</h1><ul><li>@PostConstruct：在bean创建完成并且属性赋值完成；来执行初始化方法</li><li>@PreDestroy：在容器销毁bean之前通知我们进行清理工作</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.PreDestroy;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog...Construct..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;&#125;&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog...init..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dog...destory..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">十二月 14, 2018 3:33:03 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 15:33:03 CST 2018]; root of context hierarchy</span><br><span class="line">cat...constructor...</span><br><span class="line">cat...afterPropertiesSet...</span><br><span class="line">dog...init...</span><br><span class="line">dog...Construct...</span><br><span class="line">十二月 14, 2018 3:33:07 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 15:33:03 CST 2018]; root of context hierarchy</span><br><span class="line">IOC 容器创建完成!</span><br><span class="line">com.rocklei123.bean.Dog@2ea6137</span><br><span class="line">dog...destory...</span><br><span class="line">cat...destroy...</span><br></pre></td></tr></table></figure><h1 id="4-实现BeanPostProcessor接口"><a href="#4-实现BeanPostProcessor接口" class="headerlink" title="4. 实现BeanPostProcessor接口"></a>4. 实现BeanPostProcessor接口</h1><p> BeanPostProcessor【interface】：Spring 为我们提供的bean的后置处理器；在bean初始化<strong>前后</strong>进行一些处理工作；同时可以对这个bean进行包装并返回。</p><ul><li>postProcessBeforeInitialization:在任何初始化方法调用之前工作</li><li>postProcessAfterInitialization:在任何初始化方法调用之后工作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyBeanPostProcessor</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/14 15:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 后置处理器：初始化前后进行处理工作，将后置处理器加入到容器中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyBeanPostProcessor...postProcessBeforeInitialization..."</span> + beanName + <span class="string">"=&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyBeanPostProcessor...postProcessAfterInitialization..."</span> + beanName + <span class="string">"=&gt;"</span> + bean);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLifeCycleBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigLifeCycle.class);</span><br><span class="line">    System.out.println(<span class="string">"IOC 容器创建完成!"</span>);</span><br><span class="line">    context.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">十二月 14, 2018 5:09:06 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 17:09:06 CST 2018]; root of context hierarchy</span><br><span class="line">MyBeanPostProcessor...postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerProcessor=&gt;org.springframework.context.event.EventListenerMethodProcessor@7ff2a664</span><br><span class="line">MyBeanPostProcessor...postProcessAfterInitialization...org.springframework.context.event.internalEventListenerProcessor=&gt;org.springframework.context.event.EventListenerMethodProcessor@7ff2a664</span><br><span class="line">MyBeanPostProcessor...postProcessBeforeInitialization...org.springframework.context.event.internalEventListenerFactory=&gt;org.springframework.context.event.DefaultEventListenerFactory@58c1c010</span><br><span class="line">MyBeanPostProcessor...postProcessAfterInitialization...org.springframework.context.event.internalEventListenerFactory=&gt;org.springframework.context.event.DefaultEventListenerFactory@58c1c010</span><br><span class="line">MyBeanPostProcessor...postProcessBeforeInitialization...mainConfigLifeCycle=&gt;com.rocklei123.config.MainConfigLifeCycle$$EnhancerBySpringCGLIB$$a5cb492c@b7f23d9</span><br><span class="line">MyBeanPostProcessor...postProcessAfterInitialization...mainConfigLifeCycle=&gt;com.rocklei123.config.MainConfigLifeCycle$$EnhancerBySpringCGLIB$$a5cb492c@b7f23d9</span><br><span class="line">cat...constructor...</span><br><span class="line">MyBeanPostProcessor...postProcessBeforeInitialization...cat=&gt;com.rocklei123.bean.Cat@3f200884</span><br><span class="line">cat...afterPropertiesSet...</span><br><span class="line">MyBeanPostProcessor...postProcessAfterInitialization...cat=&gt;com.rocklei123.bean.Cat@3f200884</span><br><span class="line">dog...init...</span><br><span class="line">dog...Construct...</span><br><span class="line">MyBeanPostProcessor...postProcessBeforeInitialization...dog=&gt;com.rocklei123.bean.Dog@4d49af10</span><br><span class="line">MyBeanPostProcessor...postProcessAfterInitialization...dog=&gt;com.rocklei123.bean.Dog@4d49af10</span><br><span class="line">十二月 14, 2018 5:09:11 下午 org.springframework.context.annotation.AnnotationConfigApplicationContext doClose</span><br><span class="line">信息: Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@77556fd: startup date [Fri Dec 14 17:09:06 CST 2018]; root of context hierarchy</span><br><span class="line">IOC 容器创建完成!</span><br><span class="line">dog...destory...</span><br><span class="line">cat...destroy...</span><br></pre></td></tr></table></figure><h1 id="5-Bean-生命周期管理方法总结"><a href="#5-Bean-生命周期管理方法总结" class="headerlink" title="5. Bean 生命周期管理方法总结"></a>5. Bean 生命周期管理方法总结</h1><ul><li>1）、指定初始化和销毁方法；通过@Bean指定init-method和destroy-method；</li><li>2）、通过让Bean实现InitializingBean（定义初始化逻辑），DisposableBean（定义销毁逻辑）;</li><li>3）、可以使用JSR250；<ul><li>@PostConstruct：在bean创建完成并且属性赋值完成；来执行初始化方法</li><li>@PreDestroy：在容器销毁bean之前通知我们进行清理工作</li></ul></li><li>4）、BeanPostProcessor【interface】：bean的后置处理器；<br> 在bean初始化前后进行一些处理工作；<ul><li>postProcessBeforeInitialization:在初始化之前工作</li><li>postProcessAfterInitialization:在初始化之后工作</li></ul></li></ul><h1 id="6-BeanPostProcessor介绍与原理"><a href="#6-BeanPostProcessor介绍与原理" class="headerlink" title="6. BeanPostProcessor介绍与原理"></a>6. BeanPostProcessor介绍与原理</h1><p>BeanPostProcessor 源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAutowireCapableBeanFactory</span> <span class="keyword">extends</span> <span class="title">AbstractBeanFactory</span> <span class="keyword">implements</span> <span class="title">AutowireCapableBeanFactory</span></span></span><br><span class="line"><span class="class">//给<span class="title">bean</span>进行属性赋值</span></span><br><span class="line">     protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, Object[] args) throws BeanCreationException &#123;</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">        <span class="keyword">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">        <span class="keyword">if</span> (exposedObject != <span class="keyword">null</span>) &#123;</span><br><span class="line">            exposedObject = <span class="keyword">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化bean</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> Object <span class="title">initializeBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> Object bean, RootBeanDefinition mbd)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        AbstractAutowireCapableBeanFactory.<span class="keyword">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="keyword">this</span>.getAccessControlContext());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Object wrappedBean = bean;</span><br><span class="line">            <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">//执行初始化前的方法</span></span><br><span class="line">                wrappedBean = <span class="keyword">this</span>.applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行自定义初始化</span></span><br><span class="line">                <span class="keyword">this</span>.invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(mbd != <span class="keyword">null</span> ? mbd.getResourceDescription() : <span class="keyword">null</span>, beanName, <span class="string">"Invocation of init method failed"</span>, var6);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (mbd == <span class="keyword">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">            <span class="comment">//执行初始化之后的方法</span></span><br><span class="line">                wrappedBean = <span class="keyword">this</span>.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> wrappedBean;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p> BeanPostProcessor核心原理总结<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">populateBean(beanName, mbd, instanceWrapper);给bean进行属性赋值</span><br><span class="line">initializeBean</span><br><span class="line">&#123;</span><br><span class="line">    applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);</span><br><span class="line">    invokeInitMethods(beanName, wrappedBean, mbd);执行自定义初始化</span><br><span class="line">    applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Spring底层大量 BeanPostProcessor 的使用；比如bean赋值，注入其他组件，@Autowired，生命周期注解功能，@Async,xxx BeanPostProcessor;</p><p><img src="/2018/12/09/Spring注解驱动开发2-Bean的生命周期/1544780929169.png" alt="1544780929169"></p><h2 id="6-1-ApplicationContextAwareProcessor-后置处理器"><a href="#6-1-ApplicationContextAwareProcessor-后置处理器" class="headerlink" title="6.1 ApplicationContextAwareProcessor 后置处理器"></a>6.1 ApplicationContextAwareProcessor 后置处理器</h2><p>ApplicationContextAwareProcessor 接口，是Spring容器提供获取IOC容器接口，其内部实现也是后置处理器原理。示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//业务代码注入IOC容器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-Bean生命周期总结"><a href="#7-Bean生命周期总结" class="headerlink" title="7. Bean生命周期总结"></a>7. Bean生命周期总结</h1><ol><li>构造（对象创建）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 单实例：在容器启动的时候创建对象</span><br><span class="line">* 多实例：在每次获取的时候创建对象</span><br></pre></td></tr></table></figure><ol start="2"><li>BeanPostProcessor.postProcessBeforeInitialization</li><li>初始化：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* 对象创建完成，并赋值好，调用初始化方法。。。</span><br></pre></td></tr></table></figure><ol start="4"><li>BeanPostProcessor.postProcessAfterInitialization</li><li>销毁：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* 单实例：容器关闭的时候</span><br><span class="line">* 多实例：容器不会管理这个bean；容器不会调用销毁方法；</span><br></pre></td></tr></table></figure><p>其实Spring容器整个生命周期还有其他几个步骤，下图给出整个Spring容器管理bean的生命周期。</p><p><img src="/2018/12/09/Spring注解驱动开发2-Bean的生命周期/1544501234588.png" alt="1544501234588"></p><h1 id="8-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#8-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="8.欢迎关注米宝窝，持续更新中，谢谢！"></a>8.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bean的生命周期：&lt;br&gt;bean创建—初始化—-销毁的过程&lt;/p&gt;
&lt;p&gt;容器管理bean的生命周期；&lt;br&gt;我们可以自定义初始化和销毁方法；容器在bean进行到当前生命周期的时候来调用我们自定义的初始化和销毁方法。&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（一）-Bean注入相关注解</title>
    <link href="http://yoursite.com/2018/12/01/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%911-Bean%E6%B3%A8%E5%85%A5%E7%9B%B8%E5%85%B3%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/12/01/Spring注解驱动开发1-Bean注入相关注解/</id>
    <published>2018-12-01T13:45:44.000Z</published>
    <updated>2018-12-09T12:28:44.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h1><h2 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title="1.1 目标"></a>1.1 目标</h2><p>通过本系列文章能够熟悉并掌握Spring注解驱动开发。本小结将介绍通过注解给容器中注册组件；通过本小结，将了解如下注解：</p><ul><li>AnnotationConfigApplicationContext</li><li><p>组件添加</p><ul><li>@ComponentScan</li><li>@Bean</li><li>@PostConstruct</li><li>@PreDestroy</li><li>BeanPostProcessor</li><li>@Configuration</li><li>@Component</li><li>@Service</li><li>@Controller</li><li>@Repository</li><li>@Conditional</li><li>@Primary</li><li>@Lazy</li><li><p>@Scope</p></li><li><p>@Import</p></li><li>ImportSelector</li><li>FactoryBean</li></ul></li></ul><h2 id="1-2-环境信息"><a href="#1-2-环境信息" class="headerlink" title="1.2 环境信息"></a>1.2 环境信息</h2><p>环境信息如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.20.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="2-传统方式使用spring配置文件的方式给容器注入bean"><a href="#2-传统方式使用spring配置文件的方式给容器注入bean" class="headerlink" title="2.传统方式使用spring配置文件的方式给容器注入bean"></a>2.传统方式使用spring配置文件的方式给容器注入bean</h1><ul><li>（1）定义一个Java类，如定义一个Person类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br></pre></td></tr></table></figure><ul><li>（2）在maven工程的resources文件夹下定义XML文件，如定义beans.xml，并在xml文件中引入命名空间，同时定义bean组件，即Person类的Bean。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 传统方法使用spring配置文件的方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.rocklei123.bean.Person"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"zhangsan"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>（3）通过ApplicationContext 获取bean，并打印，代码如下：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"classpath:beans.xml"</span>);</span><br><span class="line">       Person p = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">       System.out.println(p);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   执行结果为Person&#123;name=<span class="string">'zhangsan'</span>, age=<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="3-注解式开发-通过配置类方式给容器注入bean"><a href="#3-注解式开发-通过配置类方式给容器注入bean" class="headerlink" title="3.注解式开发-通过配置类方式给容器注入bean"></a>3.注解式开发-通过配置类方式给容器注入bean</h1><ul><li>（1）定义@Configuration 注解标注的配置类，告诉Spring这是一个配置类。</li><li>（2）通过@Bean 注解给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.rocklei123.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MainConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/1 22:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过AnnotationConfigApplicationContext 类型的上下文获取bean，测试结果如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">Person p = (Person) applicationContext.getBean(<span class="string">"person1"</span>);</span><br><span class="line">System.out.println(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果为Person&#123;name='lisi', age=26&#125;</span></span><br></pre></td></tr></table></figure></p><h1 id="4-ComponentScan包扫描"><a href="#4-ComponentScan包扫描" class="headerlink" title="4.@ComponentScan包扫描"></a>4.@ComponentScan包扫描</h1><h2 id="4-1-原有配置文件方式包扫描："><a href="#4-1-原有配置文件方式包扫描：" class="headerlink" title="4.1 原有配置文件方式包扫描："></a>4.1 原有配置文件方式包扫描：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--包扫描:只要标注了@Controller、@Service、@Repository、@Component--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.rocklei123"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-ComponentScan基本使用"><a href="#4-2-ComponentScan基本使用" class="headerlink" title="4.2 @ComponentScan基本使用"></a>4.2 @ComponentScan基本使用</h2><p>注解方式通过@ComponentScan(value = “com.rocklei123”)设置，value指定要扫描的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.rocklei123"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig.class);</span><br><span class="line">      String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();<span class="comment">//idea 快捷键Ctrl + ALT + V自动补全方法返回值</span></span><br><span class="line">      <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123; <span class="comment">//idea 快捷iter 自动生成for each循环体</span></span><br><span class="line">          System.out.println(beanDefinitionName);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig</span><br><span class="line">personController</span><br><span class="line">personRepository</span><br><span class="line">personService</span><br><span class="line">person1</span><br></pre></td></tr></table></figure><h2 id="4-3-ComponentScan高级用法-ComponentScans-等介绍"><a href="#4-3-ComponentScan高级用法-ComponentScans-等介绍" class="headerlink" title="4.3 @ComponentScan高级用法-ComponentScans 等介绍"></a>4.3 @ComponentScan高级用法-ComponentScans 等介绍</h2><ul><li>@ComponentScans通过源码可以需要封装ComponentScan[]，即可以定义多个ComponentScan</li><li>includeFilters = Filter[] ：指定扫描的时候只需要包含哪些组件</li><li>excludeFilters = Filter[] ：指定扫描的时候按照什么规则排除那些组件</li><li>FilterType.ANNOTATION：按照注解</li><li>FilterType.ASSIGNABLE_TYPE：按照给定的类型；</li><li>FilterType.ASPECTJ：使用ASPECTJ表达式</li><li>FilterType.REGEX：使用正则指定</li><li>FilterType.CUSTOM：使用自定义规则</li></ul><h2 id="4-4-includeFilters"><a href="#4-4-includeFilters" class="headerlink" title="4.4 includeFilters"></a>4.4 includeFilters</h2><ul><li>includeFilters = Filter[] ：指定扫描的时候只需要包含哪些组件</li></ul><p>示例1 ：只包含Controller注解的类注入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScans</span>(value = &#123;<span class="meta">@ComponentScan</span>(value = <span class="string">"com.rocklei123"</span>, includeFilters = &#123;<span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;)&#125;, useDefaultFilters = <span class="keyword">false</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果（不计入Spring本身的类）：</span><br><span class="line">mainConfig</span><br><span class="line">personController</span><br><span class="line">person1</span><br></pre></td></tr></table></figure><h2 id="4-5-excludeFilters"><a href="#4-5-excludeFilters" class="headerlink" title="4.5 excludeFilters"></a>4.5 excludeFilters</h2><ul><li><p>excludeFilters = Filter[] ：指定扫描的时候按照什么规则排除那些组件</p></li><li><p>useDefaultFilters 默认为true</p></li></ul><p>示例2 ：所有PersonService 类型（包括子类）注不入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScans</span>(value = &#123;<span class="meta">@ComponentScan</span>(value = <span class="string">"com.rocklei123"</span>, excludeFilters = &#123;<span class="meta">@ComponentScan</span>.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;PersonService.class&#125;)&#125;)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"person1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果（不计入Spring本身的类）：</span><br><span class="line">mainConfig</span><br><span class="line">personController</span><br><span class="line">personRepository</span><br><span class="line">person1</span><br></pre></td></tr></table></figure><h2 id="4-6-自定义TypeFilter"><a href="#4-6-自定义TypeFilter" class="headerlink" title="4.6 自定义TypeFilter"></a>4.6 自定义TypeFilter</h2><p>示例3 ：只包含Controller注解的类、PersonService类或其子类、及匹配自定义注解的类。注入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScans</span>(value = &#123;<span class="meta">@ComponentScan</span>(value = <span class="string">"com.rocklei123"</span>, includeFilters = &#123;<span class="meta">@ComponentScan</span>.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = &#123;PersonService.class&#125;), <span class="meta">@ComponentScan</span>.Filter(type = FilterType.ANNOTATION, classes = &#123;Controller.class&#125;), <span class="meta">@ComponentScan</span>.Filter(type = FilterType.CUSTOM, classes = &#123;MyTypeFilter.class&#125;)&#125;, useDefaultFilters = <span class="keyword">false</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//给容器中注册一个Bean;类型返回值的类型，id默认是用方法名作为id。也可以通过value属性重新定义id</span></span><br><span class="line">   <span class="meta">@Bean</span>(value = <span class="string">"person1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"lisi"</span>, <span class="number">26</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义过滤规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.Resource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.ClassMetadata;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.classreading.MetadataReaderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.filter.TypeFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyTypeFilter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/1 23:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTypeFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//metadataReader:读取当前正在扫描的类的信息</span></span><br><span class="line">    <span class="comment">//metadataReaderFactory:读取任何类的信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader metadataReader, MetadataReaderFactory metadataReaderFactory)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        AnnotationMetadata annotationMetadata = metadataReader.getAnnotationMetadata();</span><br><span class="line">        ClassMetadata classMetadata = metadataReader.getClassMetadata();</span><br><span class="line">        Resource resource = metadataReader.getResource();</span><br><span class="line">        String className = classMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">"----》"</span> + className);</span><br><span class="line">        <span class="keyword">if</span> (className.contains(<span class="string">"tory"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line">----》com.rocklei123.IocTest</span><br><span class="line">----》com.rocklei123.bean.Person</span><br><span class="line">----》com.rocklei123.config.MyTypeFilter</span><br><span class="line">----》com.rocklei123.MainTest</span><br><span class="line">----》com.rocklei123.repository.PersonRepository</span><br><span class="line">org.springframework.context.annotation.internalConfigurationAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalAutowiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalRequiredAnnotationProcessor</span><br><span class="line">org.springframework.context.annotation.internalCommonAnnotationProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerProcessor</span><br><span class="line">org.springframework.context.event.internalEventListenerFactory</span><br><span class="line">mainConfig</span><br><span class="line">personController</span><br><span class="line">personRepository</span><br><span class="line">personService</span><br><span class="line">person1</span><br></pre></td></tr></table></figure><h1 id="5-Scope"><a href="#5-Scope" class="headerlink" title="5. @Scope"></a>5. @Scope</h1><p>@Scope:注解可以调整作用域</p><ul><li><p>prototype：多实例的：ioc容器启动并不会去调用方法创建对象放在容器中。每次获取的时候才会调用方法创建对象；</p></li><li><p>singleton：单实例的（默认值）：ioc容器启动会调用方法创建对象放到ioc容器中。以后每次获取就是直接从容器（map.get()）中拿。</p></li><li><p>request：同一次请求创建一个实例</p></li><li><p>session：同一个session创建一个实例    默认是单实例的</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* ConfigurableBeanFactory#SCOPE_PROTOTYPE</span><br><span class="line">* @see ConfigurableBeanFactory#SCOPE_SINGLETON</span><br><span class="line">* @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST  request</span><br><span class="line">* @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSIONsesssion</span><br></pre></td></tr></table></figure><h2 id="5-1-singleton（默认）测试示例"><a href="#5-1-singleton（默认）测试示例" class="headerlink" title="5.1 singleton（默认）测试示例"></a>5.1 singleton（默认）测试示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加person bean..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"wangwu"</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line">       <span class="comment">//从容器获取的Bean为一个bean实例</span></span><br><span class="line">       Person person1 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">       Person person2 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">       System.out.println(person1 == person2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//测试结果</span></span><br><span class="line">   给容器中添加person bean...</span><br><span class="line">   <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="5-2-Scope-value-“prototype”-测试示例"><a href="#5-2-Scope-value-“prototype”-测试示例" class="headerlink" title="5.2 @Scope(value = “prototype”)测试示例"></a>5.2 @Scope(value = “prototype”)测试示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加person bean..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"wangwu"</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line">    Person person1 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    Person person2 = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(person1 == person2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结果</span></span><br><span class="line">    给容器中添加person bean...</span><br><span class="line">    给容器中添加person bean...</span><br><span class="line">    <span class="keyword">false</span></span><br></pre></td></tr></table></figure><h1 id="6-Lazy-注解"><a href="#6-Lazy-注解" class="headerlink" title="6.@Lazy 注解"></a>6.@Lazy 注解</h1><p>懒加载：</p><ul><li><p>单实例bean：默认在容器启动的时候创建对象；</p></li><li><p>懒加载：容器启动不创建对象。第一次使用(获取)Bean创建对象，并初始化；</p></li></ul><p>通过以下测试代码，可以很清楚的看到容器启动不创建对象。第一次使用(获取)Bean创建对象。测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加person bean..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"wangwu"</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLazy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"IOC容器准备初始化..."</span>);</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig2.class);</span><br><span class="line">    System.out.println(<span class="string">"IOC容器初始化已经完成...打印当前容器中的Bean名称"</span>);</span><br><span class="line">    String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();<span class="comment">//idea 快捷键Ctrl + ALT + V自动补全方法返回值</span></span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123; <span class="comment">//idea 快捷iter 自动生成for each循环体</span></span><br><span class="line">        System.out.println(beanDefinitionName);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"通过applicationContext.getBean方法获取Person Bean"</span>);</span><br><span class="line">    System.out.println(<span class="string">"Person Bean Lazy注解标注的Bean添加到容器中..."</span>);</span><br><span class="line">    Person person = (Person) applicationContext.getBean(<span class="string">"person"</span>);</span><br><span class="line">    System.out.println(<span class="string">"打印当前容器中的Bean名称..."</span>);</span><br><span class="line">    String[] beanDefinitionNames2 = applicationContext.getBeanDefinitionNames();<span class="comment">//idea 快捷键Ctrl + ALT + V自动补全方法返回值</span></span><br><span class="line">    <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames2) &#123; <span class="comment">//idea 快捷iter 自动生成for each循环体</span></span><br><span class="line">        System.out.println(beanDefinitionName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果（过滤Spring自动注入容器的的Bean打印信息）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">IOC容器准备初始化...</span><br><span class="line">IOC容器初始化已经完成...打印当前容器中的Bean名称</span><br><span class="line">mainConfig2</span><br><span class="line">person</span><br><span class="line">通过applicationContext.getBean方法获取Person Bean</span><br><span class="line">Person Bean Lazy注解标注的Bean添加到容器中...</span><br><span class="line">给容器中添加person bean...</span><br><span class="line">打印当前容器中的Bean名称...</span><br><span class="line">mainConfig2</span><br><span class="line">person</span><br></pre></td></tr></table></figure></p><h1 id="7-Conditional"><a href="#7-Conditional" class="headerlink" title="7.@Conditional"></a>7.@Conditional</h1><h2 id="7-1-Conditional-注解介绍"><a href="#7-1-Conditional-注解介绍" class="headerlink" title="7.1 @Conditional 注解介绍"></a>7.1 @Conditional 注解介绍</h2><p>@Conditional 注解： 按照一定的条件进行判断，满足条件给容器中注册bean</p><p>可通过实现org.springframework.context.annotation.Condition接口，重写public boolean matches(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)方法，判断是否加入容器中。返回true表示条件成立，向容器中注入Bean。</p><ul><li><p>ConditionContext conditionContext 判断条件能使用的上下文 </p></li><li><p>AnnotatedTypeMetadata annotatedTypeMetadata 注释信息</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、能获取到ioc使用的beanfactory</span></span><br><span class="line">ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();</span><br><span class="line"><span class="comment">//2、获取类加载器</span></span><br><span class="line">ClassLoader classLoader = context.getClassLoader();</span><br><span class="line"><span class="comment">//3、获取当前环境信息</span></span><br><span class="line">Environment environment = context.getEnvironment();</span><br><span class="line"><span class="comment">//4、获取到bean定义的注册类</span></span><br><span class="line">BeanDefinitionRegistry registry = context.getRegistry();</span><br></pre></td></tr></table></figure><h2 id="7-2-Conditional-注解示例"><a href="#7-2-Conditional-注解示例" class="headerlink" title="7.2 @Conditional 注解示例"></a>7.2 @Conditional 注解示例</h2><p>本例根据操作系统环境信息 os.name 确定加载的Person Bean信息。因为开发环境为Windows 10 操作系统，故本例结果将加载Person Bean为bill。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">"Linux"</span>) || property.contains(<span class="string">"linux"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> </span>&#123;</span><br><span class="line">        Environment environment = conditionContext.getEnvironment();</span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">if</span> (property.contains(<span class="string">"Windows"</span>) || property.contains(<span class="string">"win"</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfig3</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给容器中添加person bean..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"wangwu"</span>, <span class="number">18</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Conditional</span>() 根据条件进行判断，满足条件加入到容器中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(value = WinCondition.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"bill"</span>, <span class="number">43</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(value = LinuxCondition.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="string">"linus"</span>, <span class="number">44</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCondition</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig3.class);</span><br><span class="line">        Environment environment = applicationContext.getEnvironment();</span><br><span class="line">        String property = environment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        System.out.println(<span class="string">"环境信息为:"</span> + property);</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            Object bean = applicationContext.getBean(beanDefinitionName);</span><br><span class="line">            System.out.println(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果(过滤Spring自动注入的类)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">环境信息为:Windows 10</span><br><span class="line">com.rocklei123.config.MainConfig3$$EnhancerBySpringCGLIB$$bddb8d66@1e67a849</span><br><span class="line">给容器中添加person bean...</span><br><span class="line">Person&#123;name=&apos;wangwu&apos;, age=18&#125;</span><br><span class="line">Person&#123;name=&apos;bill&apos;, age=43&#125;</span><br></pre></td></tr></table></figure><h1 id="8-Import"><a href="#8-Import" class="headerlink" title="8.@Import"></a>8.@Import</h1><p>@Import[快速给容器中导入一个组件]</p><ul><li>1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名</li><li>2）、ImportSelector:返回需要导入的组件的全类名数组；</li><li>3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中</li></ul><h2 id="8-1-Import-使用"><a href="#8-1-Import-使用" class="headerlink" title="8.1 @Import 使用"></a>8.1 @Import 使用</h2><p>@Import 的Value是一个Class[] 数组，可以传入多个值，也可以传入单个值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Import &#123;</span><br><span class="line">    Class&lt;?&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>向Spring容器中导入一个Color组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(value = Color.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigImport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocTest</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigImport.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBean</span><span class="params">(ApplicationContext applicationContext )</span> </span>&#123;</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            System.out.println(beanDefinitionName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testImport</span><span class="params">()</span></span>&#123;</span><br><span class="line">        printBean(applicationContext );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mainConfigImport</span><br><span class="line">com.rocklei123.bean.Color</span><br></pre></td></tr></table></figure><h2 id="8-2-ImportSelector接口"><a href="#8-2-ImportSelector接口" class="headerlink" title="8.2  ImportSelector接口"></a>8.2  ImportSelector接口</h2><p>ImportSelector 自定义逻辑返回需要导入的组件。返回值，就是到导入到容器中的组件全类名，方法不要返回null值，否则报空指针。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">//AnnotationMetadata:当前标注@Import注解的类的所有注解信息</span></span><br><span class="line">        String className = annotationMetadata.getClassName();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span> + className);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"com.rocklei123.bean.Red"</span>, <span class="string">"com.rocklei123.bean.Yellow"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Color.class, MyImportSelector.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigImport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---------com.rocklei123.config.MainConfigImport</span><br><span class="line">mainConfigImport</span><br><span class="line">com.rocklei123.bean.Color</span><br><span class="line">com.rocklei123.bean.Red</span><br><span class="line">com.rocklei123.bean.Yellow</span><br></pre></td></tr></table></figure><h2 id="8-3-ImportBeanDefinitionRegistrar接口"><a href="#8-3-ImportBeanDefinitionRegistrar接口" class="headerlink" title="8.3 ImportBeanDefinitionRegistrar接口"></a>8.3 ImportBeanDefinitionRegistrar接口</h2><ul><li>AnnotationMetadata：当前类的注解信息</li><li>BeanDefinitionRegistry:BeanDefinition注册类；</li><li>把所有需要添加到容器中的bean；调用BeanDefinitionRegistry.registerBeanDefinition手工注册进来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.importSelector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.bean.RainBow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.BeanDefinitionRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.support.RootBeanDefinition;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportBeanDefinitionRegistrar;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.type.AnnotationMetadata;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MyImportBeanDefinitionRegistrar</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/9 14:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportBeanDefinitionRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry beanDefinitionRegistry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> a = beanDefinitionRegistry.containsBeanDefinition(<span class="string">"com.rocklei123.bean.Red"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> b = beanDefinitionRegistry.containsBeanDefinition(<span class="string">"com.rocklei123.bean.Yellow"</span>);</span><br><span class="line">        <span class="keyword">if</span> (a &amp;&amp; b) &#123;</span><br><span class="line">            RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> RootBeanDefinition(RainBow.class);</span><br><span class="line">            beanDefinitionRegistry.registerBeanDefinition(<span class="string">"rainBow"</span>, rootBeanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import</span>(&#123;Color.class, MyImportSelector.class, MyImportBeanDefinitionRegistrar.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigImport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-FactoryBean-接口"><a href="#9-FactoryBean-接口" class="headerlink" title="9 FactoryBean 接口"></a>9 FactoryBean<t> 接口</t></h1><p>通过实现Spring提供的FactoryBean<t>，将Bean注入到容器中。</t></p><h2 id="9-1-FactoryBean方法介绍"><a href="#9-1-FactoryBean方法介绍" class="headerlink" title="9.1 FactoryBean方法介绍"></a>9.1 FactoryBean方法介绍</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//获取到的是工厂bean调用getObject创建的对象,将该对象注入到容器中</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"ColorFactoryBean...getObject..."</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//返回对象的类型</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line"><span class="keyword">return</span> Color.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">//true：这个bean是单实例，在容器中保存一份</span></span><br><span class="line"><span class="comment">//false：多实例，每次获取都会创建一个新的bean；</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-2-要获取工厂Bean本身"><a href="#9-2-要获取工厂Bean本身" class="headerlink" title="9.2 要获取工厂Bean本身"></a>9.2 要获取工厂Bean本身</h2><ul><li>我们需要给id前面加一个&amp;（如&amp;colorFactoryBean）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br></pre></td></tr></table></figure><h2 id="9-3-FactoryBean测试代码及结果"><a href="#9-3-FactoryBean测试代码及结果" class="headerlink" title="9.3 FactoryBean测试代码及结果"></a>9.3 FactoryBean测试代码及结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.FactoryBean;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ColorFactoryBean</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/9 19:41</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Color</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Color <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ColorFactoryBean...getObject..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Color.class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigBeanFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ColorFactoryBean <span class="title">colorFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ColorFactoryBean();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigBeanFactory.class);</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    printBean(applicationContext);</span><br><span class="line"></span><br><span class="line">    Object colorFactoryBean1 = applicationContext.getBean(<span class="string">"colorFactoryBean"</span>);</span><br><span class="line">    Object colorFactoryBean2 = applicationContext.getBean(<span class="string">"colorFactoryBean"</span>);</span><br><span class="line">    System.out.println(<span class="string">"colorFactoryBean1="</span> + colorFactoryBean1 + <span class="string">",colorFactoryBeanType="</span> + colorFactoryBean1</span><br><span class="line">                       .getClass());</span><br><span class="line">    System.out.println(<span class="string">"colorFactoryBean2="</span> + colorFactoryBean2 + <span class="string">",colorFactoryBeanType="</span> + colorFactoryBean2</span><br><span class="line">                       .getClass());</span><br><span class="line">    System.out.println(colorFactoryBean1 == colorFactoryBean2);</span><br><span class="line"></span><br><span class="line">    Object bean = applicationContext.getBean(<span class="string">"&amp;colorFactoryBean"</span>);</span><br><span class="line">    System.out.println(bean.getClass());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mainConfigBeanFactory</span><br><span class="line">colorFactoryBean</span><br><span class="line">ColorFactoryBean...getObject...</span><br><span class="line">colorFactoryBean1=com.rocklei123.bean.Color@4461c7e3,colorFactoryBeanType=class com.rocklei123.bean.Color</span><br><span class="line">colorFactoryBean2=com.rocklei123.bean.Color@4461c7e3,colorFactoryBeanType=class com.rocklei123.bean.Color</span><br><span class="line">true</span><br><span class="line">class com.rocklei123.bean.ColorFactoryBean</span><br></pre></td></tr></table></figure><h1 id="10-Spring容器注册组件总结"><a href="#10-Spring容器注册组件总结" class="headerlink" title="10. Spring容器注册组件总结"></a>10. Spring容器注册组件总结</h1><p>给容器中注册组件；</p><ul><li>1）、包扫描+组件标注注解（@Controller/@Service/@Repository/@Component）[自己写的类]</li><li>2）、@Bean[导入的第三方包里面的组件]</li><li><p>3）、@Import[快速给容器中导入一个组件]</p><ul><li>1）、@Import(要导入到容器中的组件)；容器中就会自动注册这个组件，id默认是全类名</li><li>2）、ImportSelector:返回需要导入的组件的全类名数组；</li><li>3）、ImportBeanDefinitionRegistrar:手动注册bean到容器中</li></ul></li><li><p>4）、使用Spring提供的FactoryBean（工厂Bean）;</p><ul><li>1）、默认获取到的是工厂bean调用getObject创建的对象</li><li>2）、要获取工厂Bean本身，我们需要给id前面加一个&amp;（如&amp;colorFactoryBean）</li></ul></li></ul><h1 id="11-希望大家手动敲一遍代码，会收获颇丰！"><a href="#11-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="11. 希望大家手动敲一遍代码，会收获颇丰！"></a>11. 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="12-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#12-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="12. 欢迎关注米宝窝，持续更新中，谢谢！"></a>12. 欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1.介绍&quot;&gt;&lt;/a&gt;1.介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-目标&quot;&gt;&lt;a href=&quot;#1-1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.1 目标&quot;&gt;&lt;/a&gt;1.1 目标&lt;/h2&gt;&lt;p&gt;通过本系列文章能够熟悉并掌握Spring注解驱动开发。本小结将介绍通过注解给容器中注册组件；通过本小结，将了解如下注解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AnnotationConfigApplicationContext&lt;/li&gt;
&lt;li&gt;&lt;p&gt;组件添加&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;@ComponentScan&lt;/li&gt;
&lt;li&gt;@Bean&lt;/li&gt;
&lt;li&gt;@PostConstruct&lt;/li&gt;
&lt;li&gt;@PreDestroy&lt;/li&gt;
&lt;li&gt;BeanPostProcessor&lt;/li&gt;
&lt;li&gt;@Configuration&lt;/li&gt;
&lt;li&gt;@Component&lt;/li&gt;
&lt;li&gt;@Service&lt;/li&gt;
&lt;li&gt;@Controller&lt;/li&gt;
&lt;li&gt;@Repository&lt;/li&gt;
&lt;li&gt;@Conditional&lt;/li&gt;
&lt;li&gt;@Primary&lt;/li&gt;
&lt;li&gt;@Lazy&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Scope&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;@Import&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;ImportSelector&lt;/li&gt;
&lt;li&gt;FactoryBean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-2-环境信息&quot;&gt;&lt;a href=&quot;#1-2-环境信息&quot; class=&quot;headerlink&quot; title=&quot;1.2 环境信息&quot;&gt;&lt;/a&gt;1.2 环境信息&lt;/h2&gt;&lt;p&gt;环境信息如下：&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;UTF-8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;project.build.sourceEncoding&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;maven.compiler.source&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;maven.compiler.source&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;maven.compiler.target&lt;/span&gt;&amp;gt;&lt;/span&gt;1.8&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;maven.compiler.target&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-context&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.3.20.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;junit&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;4.11&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>Spring注解驱动开发（三）-属性赋值和自动装配</title>
    <link href="http://yoursite.com/2018/12/01/Spring%E6%B3%A8%E8%A7%A3%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%913-%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%92%8C%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D/"/>
    <id>http://yoursite.com/2018/12/01/Spring注解驱动开发3-属性赋值和自动装配/</id>
    <published>2018-12-01T13:45:44.000Z</published>
    <updated>2018-12-15T13:12:22.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-属性赋值"><a href="#1-属性赋值" class="headerlink" title="1.属性赋值"></a>1.属性赋值</h1><h2 id="1-1-Value"><a href="#1-1-Value" class="headerlink" title="1.1 @Value"></a>1.1 @Value</h2><p>使用@Value注解赋值；</p><ol><li>基本数值</li><li>可以写Spring的EL表达式; #{}</li><li>可以写${}；取出配置文件【properties】中的值（在运行环境变量里面的值）</li></ol><a id="more"></a><h2 id="1-2-PropertySource"><a href="#1-2-PropertySource" class="headerlink" title="1.2 @PropertySource"></a>1.2 @PropertySource</h2><ul><li><p>使用@PropertySource读取外部配置文件中的k/v保存到运行的环境变量中;</p></li><li><p>加载完外部的配置文件以后使用${}取出配置文件的值</p></li><li><p>@PropertySource(value={“classpath:/person.properties”}) 数组类型，可以支持一次性引入多个文件。</p></li><li>另外@PropertySource 是一个可重复的注解，可以使用@PropertySources注解引入多个@PropertySource标注的properties配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PropertySources &#123;</span><br><span class="line">    PropertySource[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类信息</span></span><br><span class="line"><span class="keyword">package</span> com.rocklei123.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/1 21:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"张三"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"#&#123;20-2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(value = <span class="string">"$&#123;person.nickName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person默认构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", nickName='"</span> + nickName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类信息</span></span><br><span class="line"><span class="keyword">package</span> com.rocklei123.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.bean.Person;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:/person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfPropertyValues</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocTestOfPropertyValues</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfPropertyValues.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBean</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            Object o = applicationContext.getBean(beanDefinitionName);</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printBean(applicationContext);</span><br><span class="line">        Environment environment = applicationContext.getEnvironment();</span><br><span class="line">        String nickName = environment.getProperty(<span class="string">"person.nickName"</span>);</span><br><span class="line">        System.out.println(<span class="string">"环境信息中property="</span> + nickName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person&#123;name=&apos;张三&apos;, age=18, nickName=&apos;小李四&apos;&#125;</span><br><span class="line">环境信息中property=小李四</span><br></pre></td></tr></table></figure><h1 id="2-自动装配"><a href="#2-自动装配" class="headerlink" title="2.自动装配"></a>2.自动装配</h1><p>自动装配;<br>          Spring利用依赖注入（DI），完成对IOC容器中中各个组件的依赖关系赋值；</p><h2 id="2-1-Autowired、-Qualifier、-Primary"><a href="#2-1-Autowired、-Qualifier、-Primary" class="headerlink" title="2.1 @Autowired、@Qualifier、@Primary"></a>2.1 @Autowired、@Qualifier、@Primary</h2><h3 id="2-1-1-Autowired"><a href="#2-1-1-Autowired" class="headerlink" title="2.1.1 @Autowired"></a>2.1.1 @Autowired</h3><h4 id="2-1-1-1-概念性总结"><a href="#2-1-1-1-概念性总结" class="headerlink" title="2.1.1.1 概念性总结"></a>2.1.1.1 概念性总结</h4><ul><li><p><strong>概念：</strong>Spring 2.5 引入了 @Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p></li><li><p><strong>原理：</strong>其实在启动spring IOC容器时，容器自动装载了一个AutowiredAnnotationBeanPostProcessor后置处理器，当容器扫描到@Autowied、@Resource或@Inject时，就会在IoC容器自动查找需要的bean，并装配给该对象的属性。</p></li><li><p><strong>注意事项：</strong></p><ul><li>1）、默认优先按照<strong>类型</strong>去容器中找对应的组件:applicationContext.getBean(BookDao.class);找到就赋值</li><li>2）、如果找到多个相同类型的组件，再将属性的名称作为组件的id去容器中查        applicationContext.getBean(“bookDao”)<u>所以容器中有多个相同组件时，名称不应该乱起。</u></li><li>3）、自动装配默认一定要将属性赋值好，没有就会报错；可以使用@Autowired(required=false);默认required=true</li></ul></li></ul><h4 id="2-1-1-2-默认注入情况测试"><a href="#2-1-1-2-默认注入情况测试" class="headerlink" title="2.1.1.2 默认注入情况测试"></a>2.1.1.2 默认注入情况测试</h4><p>默认注入情况：名字默认是类名首字母小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//service 层代码，自动注入dao层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BookService&#123;"</span> +</span><br><span class="line">                <span class="string">"bookDao="</span> + bookDao +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//dao层代码，加入一个默认名称区别</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nameFlag = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookDao</span><span class="params">(String nameFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameFlag = nameFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNameFlag</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nameFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameFlag</span><span class="params">(String nameFlag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nameFlag = nameFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BookDao&#123;"</span> +</span><br><span class="line">                <span class="string">"nameFlag='"</span> + nameFlag + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类，向容器中注入另一个bookDao，名称为BookDao2</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = &#123;<span class="string">"com.rocklei123.service"</span>, <span class="string">"com.rocklei123.controller"</span>, <span class="string">"com.rocklei123.repository"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAutowired</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"bookDao2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao2</span><span class="params">(BookDao bookDao)</span> </span>&#123;</span><br><span class="line">        BookDao bookDao2 = <span class="keyword">new</span> BookDao();</span><br><span class="line">        bookDao2.setNameFlag(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> bookDao2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocTestOfAutowired</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAutowired.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BookService bean = applicationContext.getBean(BookService.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:通过上文注意事项可知，Spring容器注入时会先通过类型找到两个BookDao类型的对象，第二次会通过 <strong>默认是类名首字母小写</strong>在查找一次。故Service层注入的BookDao对象应该为nameFlag = “1”; 的对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">信息: Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@4aa8f0b4: startup date [Sat Dec 15 18:56:29 CST 2018]; root of context hierarchy</span><br><span class="line">BookService&#123;bookDao=BookDao&#123;nameFlag=&apos;1&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><p>如果此时修改测试类使用IOC容器按类型获取BookDao此时，因为容器中有两个BookDao类型的对象，当打印时就会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BookDao bean = applicationContext.getBean(BookDao.class);</span><br><span class="line">    System.out.println(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常信息</span></span><br><span class="line">org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type <span class="string">'com.rocklei123.repository.BookDao'</span> available: expected single matching bean but found <span class="number">2</span>: bookDao,bookDao2</span><br></pre></td></tr></table></figure><h4 id="2-1-1-3-Autowired-required-false"><a href="#2-1-1-3-Autowired-required-false" class="headerlink" title="2.1.1.3 @Autowired(required=false)"></a>2.1.1.3 @Autowired(required=false)</h4><p>自动装配默认一定要将属性赋值好，没有就会报错；可以使用@Autowired(required=false);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">默认required 为<span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>测试用例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//业务层代码，自动注入Dao层对象，required = false</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"bookDao2"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将BookDao不注入到容器中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//虽然容器中不含有BookDao,通过测试类打印业务层代码时，也不会报错。</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BookService bean = applicationContext.getBean(BookService.class);</span><br><span class="line">    System.out.println(bean);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">BookService&#123;bookDao=<span class="keyword">null</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-1-4-Autowired-构造器，参数，方法，属性"><a href="#2-1-1-4-Autowired-构造器，参数，方法，属性" class="headerlink" title="2.1.1.4 @Autowired:构造器，参数，方法，属性"></a>2.1.1.4 @Autowired:构造器，参数，方法，属性</h4><p>@Autowired:构造器，参数，方法，属性；都是从容器中获取参数组件的值</p><p><strong>默认情况说明：</strong></p><ul><li>@Bean标注的方法创建对象的时候，方法参数的值从容器中获取</li><li>默认加在ioc容器中的组件，容器启动会调用无参构造器创建对象，再进行初始化赋值等操作</li></ul><p><strong>@Autowired标注说明：</strong></p><ul><li>1）、[标注在方法位置]：@Bean+方法参数；参数从容器中获取;默认不写@Autowired效果是一样的；都能自动装配</li><li>2）、[标在构造器上]：如果组件只有一个有参构造器，这个有参构造器的@Autowired可以省略，参数位置的组件还是可以自动从容器中获取.</li><li>3）、放在参数位置：</li></ul><h3 id="2-1-2-Qualifier"><a href="#2-1-2-Qualifier" class="headerlink" title="2.1.2 @Qualifier"></a>2.1.2 @Qualifier</h3><p>​    @Qualifier(“XXX”) Spring的Bean注入配置注解，该注解指定注入的Bean的名称，Spring框架使用byName方式寻找合格的bean，这样就消除了byType方式产生的歧义。</p><p>​    @Qualifier(“bookDao”)：使用@Qualifier指定需要装配的组件的id，而不是使用属性名。@Qualifier需要和 @Autowired一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"bookDao2"</span>)  <span class="comment">//指定装配组件的Id为bookDao2</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">BookService&#123;bookDao=BookDao&#123;nameFlag=<span class="string">'2'</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-Primary"><a href="#2-1-3-Primary" class="headerlink" title="2.1.3 @Primary"></a>2.1.3 @Primary</h3><p>​    @Primary：让Spring进行自动装配的时候，默认使用首选的bean；也可以继续使用@Qualifier指定需要装配的bean的名字。</p><p>​    通过下面的示例也可以看出@Primary和@Qualifier 在一定程度上有所冲突，如果我们service层代码使用@Qualifier指定注入名称，即使在相同类型的其他Bean 上标注@Primary，Spring注入Service层的也是根据@Qualifier标注注入的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"bookDao"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line">    BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"BookService&#123;"</span> +</span><br><span class="line">                <span class="string">"bookDao="</span> + bookDao +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ComponentScan</span>(value = &#123;<span class="string">"com.rocklei123.service"</span>, <span class="string">"com.rocklei123.controller"</span>, <span class="string">"com.rocklei123.repository"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAutowired</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"bookDao2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao2</span><span class="params">(BookDao bookDao)</span> </span>&#123;</span><br><span class="line">        BookDao bookDao2 = <span class="keyword">new</span> BookDao();</span><br><span class="line">        bookDao2.setNameFlag(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> bookDao2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试代码</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IocTestOfAutowired</span> </span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfigOfAutowired.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printBean</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        String[] beanDefinitionNames = applicationContext.getBeanDefinitionNames();</span><br><span class="line">        <span class="keyword">for</span> (String beanDefinitionName : beanDefinitionNames) &#123;</span><br><span class="line">            Object o = applicationContext.getBean(beanDefinitionName);</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printBean(applicationContext);</span><br><span class="line">        System.out.println(<span class="string">"-----------------------------------"</span>);</span><br><span class="line">        BookService bean = applicationContext.getBean(BookService.class);</span><br><span class="line">        System.out.println(bean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:可以看出Spring容器加载了两个BookDao类型的bean,向Serveice层注入的是 @Qualifier(value = “bookDao”)标注的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">com.rocklei123.config.MainConfigOfAutowired$$EnhancerBySpringCGLIB$$7d34398f@37e547da</span><br><span class="line">BookService&#123;bookDao=BookDao&#123;nameFlag=&apos;1&apos;&#125;&#125;</span><br><span class="line">com.rocklei123.controller.BookController@5db45159</span><br><span class="line">BookDao&#123;nameFlag=&apos;1&apos;&#125;</span><br><span class="line">BookDao&#123;nameFlag=&apos;2&apos;&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">BookService&#123;bookDao=BookDao&#123;nameFlag=&apos;1&apos;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-Resource-JSR250-和-Inject-JSR330"><a href="#2-2-Resource-JSR250-和-Inject-JSR330" class="headerlink" title="2.2 @Resource(JSR250)和@Inject(JSR330)"></a>2.2 @Resource(JSR250)和@Inject(JSR330)</h2><p>Spring还支持使用@Resource(JSR250)和@Inject(JSR330)[java规范的注解]</p><h3 id="2-2-1-Resource"><a href="#2-2-1-Resource" class="headerlink" title="2.2.1 @Resource:"></a>2.2.1 @Resource:</h3><ul><li>可以和@Autowired一样实现自动装配功能；默认是按照组件名称进行装配的；</li><li>没有能支持@Primary功能</li><li>没有支持@Autowired（reqiured=false）;</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span>(name = <span class="string">"bookDao2"</span>)</span><br><span class="line">    BookDao bookDao;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-Inject"><a href="#2-2-2-Inject" class="headerlink" title="2.2.2 @Inject:"></a>2.2.2 @Inject:</h3><p>​    @Inject支持构造函数、方法和字段注解，也可能使用于静态实例成员。可注解成员可以是任意修饰符（private,package-private,protected,public）。注入顺序：构造函数、字段，然后是方法。父类的字段和方法注入优先于子类的字段和方法，同一类中的字段和方法是没有顺序的。</p><ul><li>需要导入javax.inject的包，和Autowired的功能一样。没有required=false的功能；但是支持@Primary</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.inject/javax.inject --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.inject<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-Autowired-和-Resource、-Inject-的区别"><a href="#2-3-Autowired-和-Resource、-Inject-的区别" class="headerlink" title="2.3 @Autowired 和 @Resource、@Inject 的区别"></a>2.3 @Autowired 和 @Resource、@Inject 的区别</h2><p><strong>相同点</strong></p><ol><li>@Autowired和@Inject基本是一样的，因为两者都是使用<strong>AutowiredAnnotationBeanPostProcessor</strong>来处理依赖注入。但是@Resource是个例外，它使用的是CommonAnnotationBeanPostProcessor来处理依赖注入。当然，两者都是BeanPostProcessor。</li><li>三个注解都能实现自动装配功能</li></ol><p><strong>不同点</strong></p><ol><li><p>注解定义不同</p><ul><li><p>@Autowired:Spring定义的，脱离Spring框架就没有了；</p></li><li><p>@Resource、@Inject都是java规范，其他IOC框架也会支持。</p></li></ul></li><li><p>默认注入方式不同</p><ul><li>@<strong>Autowired和@Inject：</strong>  默认 autowired by type，可以通过@Qualifier 显式指定；</li><li>@<strong>Resource：</strong>默认 autowired by field name，如果 autowired by field name失败，会退化为 autowired by type；可以 通过@Qualifier 显式指定 autowired by qualifier name；如果 autowired by qualifier name失败，会退化为 autowired by field name。</li></ul></li><li><p>功能性差异</p><ul><li>@Resource 没有能支持@Primary功能;没有支持@Autowired（reqiured=false）功能;</li><li>@Inject 虽然支持@Primary功能功能，但是不支持@Autowired（reqiured=false）功能;</li><li>@Autowired支持@Primary功能，@Autowired（reqiured=false）功能；</li></ul></li></ol><h2 id="2-4-自定义组件注入Spring容器底层的一些组件"><a href="#2-4-自定义组件注入Spring容器底层的一些组件" class="headerlink" title="2.4 自定义组件注入Spring容器底层的一些组件"></a>2.4 自定义组件注入Spring容器底层的一些组件</h2><h3 id="2-4-1-xxxAware介绍"><a href="#2-4-1-xxxAware介绍" class="headerlink" title="2.4.1 xxxAware介绍"></a>2.4.1 xxxAware介绍</h3><p>自定义组件实现xxxAware接口，在创建对象的时候，会调用接口规定的方法注入相关组件；xxxxAware接口把Spring底层一些组件注入到自定义的Bean中；</p><p>测试代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.BeanNameAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.EmbeddedValueResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EmbeddedValueResolverAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.EnvironmentAware;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringValueResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Apple</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/12/15 20:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 自定义组件注入Spring容器底层的一些组件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">BeanNameAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">EmbeddedValueResolverAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前Bean的名称："</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传入的IOC:"</span> + applicationContext);</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(Environment environment)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前person.properties文件中的昵称名："</span> + environment.getProperty(<span class="string">"person.nickName"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmbeddedValueResolver</span><span class="params">(StringValueResolver stringValueResolver)</span> </span>&#123;</span><br><span class="line">        String s = stringValueResolver.resolveStringValue(<span class="string">"我的操作系统类型$&#123;os.name&#125;,我的年龄#&#123;26+1&#125;"</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:/person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@ComponentScan</span>(value = &#123;<span class="string">"com.rocklei123.bean"</span>, <span class="string">"com.rocklei123.service"</span>, <span class="string">"com.rocklei123.controller"</span>, <span class="string">"com.rocklei123.repository"</span>&#125;)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainConfigOfAutowired</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"bookDao2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookDao <span class="title">bookDao2</span><span class="params">(BookDao bookDao)</span> </span>&#123;</span><br><span class="line">        BookDao bookDao2 = <span class="keyword">new</span> BookDao();</span><br><span class="line">        bookDao2.setNameFlag(<span class="string">"2"</span>);</span><br><span class="line">        <span class="keyword">return</span> bookDao2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">当前Bean的名称：apple</span><br><span class="line">当前person.properties文件中的昵称名：小李四</span><br><span class="line">我的操作系统类型Windows <span class="number">10</span>,我的年龄<span class="number">27</span></span><br><span class="line">传入的IOC:org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class="number">1e81f</span>4dc: startup date [Sat Dec <span class="number">15</span> <span class="number">20</span>:<span class="number">57</span>:<span class="number">18</span> CST <span class="number">2018</span>]; root of context hierarchy</span><br></pre></td></tr></table></figure><h3 id="2-4-2-xxxAware底层原理"><a href="#2-4-2-xxxAware底层原理" class="headerlink" title="2.4.2 xxxAware底层原理"></a>2.4.2 xxxAware底层原理</h3><p> <strong>xxxAware原理：</strong>功能使用xxxProcessor，通过后置处理器功能实现；<br> 如： ApplicationContextAware==》ApplicationContextAwareProcessor；</p><p>以ApplicationContextAwareProcessor为例源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context.support;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContextAwareProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurableApplicationContext applicationContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringValueResolver embeddedValueResolver;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(<span class="keyword">final</span> Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        AccessControlContext acc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span> &amp;&amp; (bean <span class="keyword">instanceof</span> EnvironmentAware || bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware || bean <span class="keyword">instanceof</span> ResourceLoaderAware || bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware || bean <span class="keyword">instanceof</span> MessageSourceAware || bean <span class="keyword">instanceof</span> ApplicationContextAware)) &#123;</span><br><span class="line">            acc = <span class="keyword">this</span>.applicationContext.getBeanFactory().getAccessControlContext();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (acc != <span class="keyword">null</span>) &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Object&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    ApplicationContextAwareProcessor.<span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, acc);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.invokeAwareInterfaces(bean);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invokeAwareInterfaces</span><span class="params">(Object bean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EnvironmentAware) &#123;</span><br><span class="line">                ((EnvironmentAware)bean).setEnvironment(<span class="keyword">this</span>.applicationContext.getEnvironment());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> EmbeddedValueResolverAware) &#123;</span><br><span class="line">                ((EmbeddedValueResolverAware)bean).setEmbeddedValueResolver(<span class="keyword">this</span>.embeddedValueResolver);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ResourceLoaderAware) &#123;</span><br><span class="line">                ((ResourceLoaderAware)bean).setResourceLoader(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationEventPublisherAware) &#123;</span><br><span class="line">                ((ApplicationEventPublisherAware)bean).setApplicationEventPublisher(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> MessageSourceAware) &#123;</span><br><span class="line">                ((MessageSourceAware)bean).setMessageSource(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">                ((ApplicationContextAware)bean).setApplicationContext(<span class="keyword">this</span>.applicationContext);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-希望大家手动敲一遍代码，会收获颇丰！"><a href="#3-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="3 希望大家手动敲一遍代码，会收获颇丰！"></a>3 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="4-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#4-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="4.欢迎关注米宝窝，持续更新中，谢谢！"></a>4.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-属性赋值&quot;&gt;&lt;a href=&quot;#1-属性赋值&quot; class=&quot;headerlink&quot; title=&quot;1.属性赋值&quot;&gt;&lt;/a&gt;1.属性赋值&lt;/h1&gt;&lt;h2 id=&quot;1-1-Value&quot;&gt;&lt;a href=&quot;#1-1-Value&quot; class=&quot;headerlink&quot; title=&quot;1.1 @Value&quot;&gt;&lt;/a&gt;1.1 @Value&lt;/h2&gt;&lt;p&gt;使用@Value注解赋值；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基本数值&lt;/li&gt;
&lt;li&gt;可以写Spring的EL表达式; #{}&lt;/li&gt;
&lt;li&gt;可以写${}；取出配置文件【properties】中的值（在运行环境变量里面的值）&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Annotation" scheme="http://yoursite.com/tags/Annotation/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot系列(六)-SpringBoot与数据访问</title>
    <link href="http://yoursite.com/2018/11/21/SpringBoot%E7%B3%BB%E5%88%97-%E5%85%AD-SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
    <id>http://yoursite.com/2018/11/21/SpringBoot系列-六-SpringBoot与数据访问/</id>
    <published>2018-11-21T11:23:31.000Z</published>
    <updated>2018-12-09T13:04:23.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h1><a id="more"></a><h1 id="2-新建项目"><a href="#2-新建项目" class="headerlink" title="2.新建项目"></a>2.新建项目</h1><ul><li>（1） 使用idea工具中的Spring Initialzer 新建Springboot项目</li></ul><p><img src="/2018/11/21/SpringBoot系列-六-SpringBoot与数据访问/markdown-img-paste-20181121192743995.png" alt="SpringBoot系列-六-SpringBoot与数据访问-1"></p><ul><li>（2）选择项目依赖</li></ul><p><img src="/2018/11/21/SpringBoot系列-六-SpringBoot与数据访问/markdown-img-paste-20181121192950328.png" alt="SpringBoot系列-六-SpringBoot与数据访问-2"></p><ul><li>（3）依赖配置pom.xml</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="9-希望大家手动敲一遍代码，会收获颇丰！"><a href="#9-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="9 希望大家手动敲一遍代码，会收获颇丰！"></a>9 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="10-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#10-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="10.欢迎关注米宝窝，持续更新中，谢谢！"></a>10.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1.&quot;&gt;&lt;/a&gt;1.&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://yoursite.com/categories/SpringBoot/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="SpringBoot" scheme="http://yoursite.com/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之-代理模式</title>
    <link href="http://yoursite.com/2018/10/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/28/设计模式之-代理模式/</id>
    <published>2018-10-28T14:50:20.000Z</published>
    <updated>2018-10-29T06:26:18.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><p>随着对spring框架的了解，代理模式在其中发乎了很大作用，要想更好的理解spring的核心之一AOP需要对代理模式有一些了解。通过本本能够更好的理解代理模式设计思想、应用实例、优缺点、与适配器模式的不同、JDK动态代理、Cglib动态代理。</p><a id="more"></a><h1 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2.介绍"></a>2.介绍</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。<br>一句话总结：<strong> 为其他对象提供一种代理以控制对这个对象的访问。代理对象起到中介作用，可去掉功能服务或增加额外的服务。 </strong></p><h2 id="2-2-代理模式详细理解"><a href="#2-2-代理模式详细理解" class="headerlink" title="2.2 代理模式详细理解"></a>2.2 代理模式详细理解</h2><ul><li><p>意图：为其他对象提供一种代理以控制对这个对象的访问。</p></li><li><p>主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p></li><li><p>何时使用：想在访问一个类时做一些控制。</p></li><li><p>如何解决：增加中间层。</p></li><li><p>关键代码：实现与被代理类组合。</p></li></ul><h2 id="2-3-实际用途"><a href="#2-3-实际用途" class="headerlink" title="2.3 实际用途"></a>2.3 实际用途</h2><ul><li><p>1、Windows 里面的快捷方式。</p></li><li><p>2、买火车票不一定在火车站买，也可以去代售点。</p></li><li><p>3、一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。</p></li><li><p>4、spring aop。</p></li></ul><h2 id="2-4-代理模式优缺点"><a href="#2-4-代理模式优缺点" class="headerlink" title="2.4 代理模式优缺点"></a>2.4 代理模式优缺点</h2><ul><li>优点：<ul><li>1、职责清晰。</li><li>2、高扩展性。</li><li>3、智能化。</li></ul></li></ul><ul><li><p>缺点：</p></li><li><p>1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</p></li><li><p>2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p></li></ul><h2 id="2-5-按使用场景分类"><a href="#2-5-按使用场景分类" class="headerlink" title="2.5 按使用场景分类"></a>2.5 按使用场景分类</h2><p>使用场景：按职责来划分，通常有以下使用场景：</p><ul><li>1、远程代理。</li><li>2、虚拟代理。</li><li>3、Copy-on-Write 代理。</li><li>4、保护（Protect or Access）代理。</li><li>5、Cache代理。</li><li>6、防火墙（Firewall）代理。</li><li>7、同步化（Synchronization）代理。</li><li>8、智能引用（Smart Reference）代理。</li></ul><h2 id="2-6-与适配器模式和装饰器模式的不同"><a href="#2-6-与适配器模式和装饰器模式的不同" class="headerlink" title="2.6 与适配器模式和装饰器模式的不同"></a>2.6 与适配器模式和装饰器模式的不同</h2><p><strong> 注意事项： </strong></p><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</p><p>适配器模式是因为新旧接口不一致导致出现了客户端无法得到满足的问题，因为我们还想使用实现了这个接口的一些服务，旧的接口是不能被完全重构掉。故：那么为了使用以前实现旧接口的服务，我们就应该把新的接口转换成旧接口；相比于适配器的应用场景，代理就不一样了，虽然代理也同样是增加了一层，但是，<strong> 代理提供的接口和原本的接口是一样的 </strong> ，代理模式的作用是不把实现直接暴露给client，而是通过代理这个层，代理能够做一些处理；</p><p>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p><h1 id="3-静态代理"><a href="#3-静态代理" class="headerlink" title="3.静态代理"></a>3.静态代理</h1><p>静态代理： 代理和被代理对象在代理之前是确定的。他们都实现相同的接口或者继承相同的抽象类</p><p><img src="/2018/10/28/设计模式之-代理模式/markdown-img-paste-20181028230958975.png" alt="代理模式-静态代理"></p><h2 id="3-1-静态代理简单实现"><a href="#3-1-静态代理简单实现" class="headerlink" title="3.1 静态代理简单实现"></a>3.1 静态代理简单实现</h2><p>以汽车行驶，记录汽车行驶时间为例子进行讲解，首先创建一个Movable接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个Car实现MoveAble接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Car</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"汽车开始行驶。。。"</span>); <span class="comment">//实现开车</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">            System.out.println(<span class="string">"汽车行驶中。。。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"汽车结束行驶。。。 汽车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建一个测试Client类用户测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        car.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">汽车开始行驶。。。</span><br><span class="line">汽车行驶中。。。</span><br><span class="line">汽车结束行驶。。。 汽车行驶时间：<span class="number">717</span>毫秒！</span><br></pre></td></tr></table></figure></p><h2 id="3-2-通过继承实现代理"><a href="#3-2-通过继承实现代理" class="headerlink" title="3.2 通过继承实现代理"></a>3.2 通过继承实现代理</h2><p>创建一个ExtendsCarForProxy继承Car，然后删除Car里面有关计时的代码，放到ExtendsCarForProxy里面。</p><p>修改Car类代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Car</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">/* long starttime = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        System.out.println("汽车开始行驶。。。"); //实现开车*/</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">            System.out.println(<span class="string">"汽车行驶中。。。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*long endtime = System.currentTimeMillis();</span></span><br><span class="line"><span class="comment">        System.out.println("汽车结束行驶。。。 汽车行驶时间：" + (endtime - starttime) + "毫秒！");*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建ExtendsCarForProxy集成Car 类，重写move方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ExtendsCarForProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendsCarForProxy</span> <span class="keyword">extends</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"ExtendsCarForProxy 汽车开始行驶。。。"</span>);</span><br><span class="line">        <span class="keyword">super</span>.move();</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"ExtendsCarForProxy 汽车结束行驶。。。 汽车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改Client类代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Car car = new Car();</span></span><br><span class="line">        MoveAble m = <span class="keyword">new</span> ExtendsCarForProxy();</span><br><span class="line">        m.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过继承实现代理结果输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExtendsCarForProxy 汽车开始行驶。。。</span><br><span class="line">汽车行驶中。。。</span><br><span class="line">ExtendsCarForProxy 汽车结束行驶。。。 汽车行驶时间：<span class="number">838</span>毫秒！</span><br></pre></td></tr></table></figure><h2 id="3-3-使用聚合方式"><a href="#3-3-使用聚合方式" class="headerlink" title="3.3 使用聚合方式"></a>3.3 使用聚合方式</h2><p>创建聚合方式的Car类AggregationCarForProxy,实现MoveAble接口，并创建有参构造方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AggregationCarForProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AggregationCarForProxy</span> <span class="keyword">implements</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AggregationCarForProxy</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarForProxy 汽车开始行驶。。。"</span>);</span><br><span class="line">        car.move();</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarForProxy 汽车结束行驶。。。 汽车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改Client类代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/* Car car = new Car();</span></span><br><span class="line"><span class="comment">        MoveAble m = new ExtendsCarForProxy();</span></span><br><span class="line"><span class="comment">        m.move();*/</span></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        MoveAble m = <span class="keyword">new</span> AggregationCarForProxy(car);</span><br><span class="line">        m.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>聚合类型执行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AggregationCarForProxy 汽车开始行驶。。。</span><br><span class="line">汽车行驶中。。。</span><br><span class="line">AggregationCarForProxy 汽车结束行驶。。。 汽车行驶时间：<span class="number">764</span>毫秒！</span><br></pre></td></tr></table></figure></p><p>聚合方式就是两个类实现同一个接口，Car类实现move功能，然后通过构造函数把Car类注入到AggregationCarForProxy中，在调用Car类move时做一些处理，从而实现了代理功能。</p><h2 id="3-4-聚合方式优点体现"><a href="#3-4-聚合方式优点体现" class="headerlink" title="3.4 聚合方式优点体现"></a>3.4 聚合方式优点体现</h2><p><strong> 问题 </strong></p><p>如果我们需要在Move上实现时间处理、权限、日志等功能。比如需要实现先输出时间，再输出日志就需要创建一个Car4继承Car，如果我想先输出日志，再输出时间呢？就需要在创建一个Car5继承Car，只是顺序颠倒一下，就需要在创建一个，如果功能多的话，就需要创建很多类，太麻烦了。使用聚合就不会有这种问题出现。</p><p><img src="/2018/10/28/设计模式之-代理模式/markdown-img-paste-20181029000352701.png" alt="设计模式-代理模式2"></p><p><strong> 聚合方式创建多个代理类，根据需求顺序调用 </strong></p><p>创建时间代理类，专门处理时间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AggregationCarTimeStaticProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 00:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AggregationCarTimeStaticProxy</span> <span class="keyword">implements</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MoveAble m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AggregationCarTimeStaticProxy</span><span class="params">(MoveAble m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarTimeStaticProxy 汽车开始行驶。。。"</span>);</span><br><span class="line">        m.move();</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarTimeStaticProxy 汽车结束行驶。。。 汽车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>创建专门处理日志的代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: AggregationCarLogStaticProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 00:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AggregationCarLogStaticProxy</span> <span class="keyword">implements</span> <span class="title">MoveAble</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MoveAble m;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AggregationCarLogStaticProxy</span><span class="params">(MoveAble m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.m = m;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarLogStaticProxy 开始日志记录。。。"</span>);</span><br><span class="line">        m.move();</span><br><span class="line">        System.out.println(<span class="string">"AggregationCarLogStaticProxy 日志记录结束。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改Client类代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/28 23:38</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">/* Car car = new Car();</span></span><br><span class="line"><span class="comment">        MoveAble m = new ExtendsCarForProxy();</span></span><br><span class="line"><span class="comment">        m.move();*/</span></span><br><span class="line">        <span class="comment">/*Car car = new Car();</span></span><br><span class="line"><span class="comment">        MoveAble m = new AggregationCarForProxy(car);</span></span><br><span class="line"><span class="comment">        m.move();*/</span></span><br><span class="line"></span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        MoveAble ctp = <span class="keyword">new</span> AggregationCarTimeStaticProxy(car);<span class="comment">//执行时间</span></span><br><span class="line">        MoveAble clp = <span class="keyword">new</span> AggregationCarLogStaticProxy(ctp);<span class="comment">//记录日志</span></span><br><span class="line">        clp.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AggregationCarLogStaticProxy 开始日志记录。。。</span><br><span class="line">AggregationCarTimeStaticProxy 汽车开始行驶。。。</span><br><span class="line">汽车行驶中。。。</span><br><span class="line">AggregationCarTimeStaticProxy 汽车结束行驶。。。 汽车行驶时间：<span class="number">881</span>毫秒！</span><br><span class="line">AggregationCarLogStaticProxy 日志记录结束。。。</span><br></pre></td></tr></table></figure></p><h2 id="3-5-静态代理类优缺点总结"><a href="#3-5-静态代理类优缺点总结" class="headerlink" title="3.5 静态代理类优缺点总结"></a>3.5 静态代理类优缺点总结</h2><ul><li>优点：</li></ul><p>代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理即可（解耦合）。</p><ul><li>缺点：</li></ul><p>1）代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p>2）代理对象只服务于一种类型的对象，如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。即静态代理类只能为特定的接口(Service)服务。如想要为多个接口服务则需要建立很多个代理类。</p><p>引入下文，动态代理</p><h1 id="4-Java动态代理"><a href="#4-Java动态代理" class="headerlink" title="4.Java动态代理"></a>4.Java动态代理</h1><p>书接上文，现在只是对小汽车进行代理，如果要实现对火车，自行车的代理是不是需要创建火车代理类，自行车代理类等，太麻烦了。可以通过动态代理进行实现。</p><h2 id="4-1-Java动态代理概念"><a href="#4-1-Java动态代理概念" class="headerlink" title="4.1 Java动态代理概念"></a>4.1 Java动态代理概念</h2><p>Java 动态代理机制的出现，使得 Java 开发人员不用手工编写代理类，只要简单地指定一组接口及委托类对象，便能动态地获得代理类。代理类会负责将所有的方法调用分派到委托对象上反射执行，在分派执行的过程中，开发人员还可以按需调整委托类对象及其功能，这是一套非常灵活有弹性的代理框架。</p><h2 id="4-2-JDK动态代理"><a href="#4-2-JDK动态代理" class="headerlink" title="4.2 JDK动态代理"></a>4.2 JDK动态代理</h2><p>JDK自从1.3版本开始，就引入了动态代理，JDK的动态代理用起来非常简单，但是它有一个限制，就是使用动态代理的对象必须实现一个或多个接口 。如果想代理没有实现接口的类可以使用CGLIB包。</p><p>首先让我们来了解一下如何使用 Java 动态代理。具体有如下四步骤：</p><ul><li>1、通过实现 InvocationHandler 接口创建自己的调用处理器；</li><li>2、通过为 Proxy 类指定 ClassLoader 对象和一组 interface 来创建动态代理类；</li><li>3、通过反射机制获得动态代理类的构造函数，其唯一参数类型是调用处理器接口类型；</li><li>4、通过构造函数创建动态代理类实例，构造时调用处理器对象作为参数被传入</li></ul><p>自定义自己的InvocationHandler<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.dynamic.jdkdynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TimeHadlerJdkDynamicProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 11:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeHadlerJdkDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TimeHadlerJdkDynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy  proxy 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 被代理对象的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args   被代理对象方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"TimeHadlerJdkDynamicProxy 汽车开始行驶。。。"</span>);</span><br><span class="line">        method.invoke(target);</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"TimeHadlerJdkDynamicProxy 汽车结束行驶。。。 汽车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客户端调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.dynamic.jdkdynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.designpatterns.proxypattern.staticproxy.Car;</span><br><span class="line"><span class="keyword">import</span> com.rocklei123.designpatterns.proxypattern.staticproxy.MoveAble;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 11:27</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Car car = <span class="keyword">new</span> Car();</span><br><span class="line">        InvocationHandler h = <span class="keyword">new</span> TimeHadlerJdkDynamicProxy(car);</span><br><span class="line">        Class&lt;?&gt; clazz = car.getClass();</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  loader 类加载器</span></span><br><span class="line"><span class="comment">         *  interfaces 实现接口</span></span><br><span class="line"><span class="comment">         *  h InvocationHandler</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        MoveAble m = (MoveAble) Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), h);</span><br><span class="line">        m.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行效果<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TimeHadlerJdkDynamicProxy 汽车开始行驶。。。</span><br><span class="line">汽车行驶中。。。</span><br><span class="line">TimeHadlerJdkDynamicProxy 汽车结束行驶。。。 汽车行驶时间：<span class="number">524</span>毫秒！</span><br></pre></td></tr></table></figure></p><h2 id="4-2-Cglib动态代理"><a href="#4-2-Cglib动态代理" class="headerlink" title="4.2 Cglib动态代理"></a>4.2 Cglib动态代理</h2><p>CGLIB(Code Generation Library)是一个开源项目。是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。它的底层使用ASM在内存中动态的生成被代理类的子类，使用CGLIB即使代理类没有实现任何接口也可以实现动态代理功能。CGLIB具有简单易用，它的运行速度要远远快于JDK的Proxy动态代理.</p><p>cglib有两种可选方式，继承和引用。第一种是基于继承实现的动态代理，所以可以直接通过super调用target方法，但是这种方式在spring中是不支持的，因为这样的话，这个target对象就不能被spring所管理，所以cglib还是才用类似jdk的方式，通过持有target对象来达到拦截方法的效果。</p><p><strong> 注意：</strong>  CGLIB不能对final修饰的类进行代理。</p><p>CGLIB的核心类：</p><pre><code>* net.sf.cglib.proxy.Enhancer – 主要的增强类* net.sf.cglib.proxy.MethodInterceptor – 主要的方法拦截类，它是Callback接口的子接口，需要用户实现* net.sf.cglib.proxy.MethodProxy – JDK的java.lang.reflect.Method类的代理类，可以方便的实现对源对象方法的调用,如使用：* Object o = methodProxy.invokeSuper(proxy, args);//虽然第一个参数是被代理对象，也不会出现死循环的问题。</code></pre><p>Maven 构建需要的jar包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/cglib/cglib --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>准备被代理类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.dynamic.cglibdynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Train</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 12:30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Train</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"火车行驶中。。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>cglib实现动态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.dynamic.cglibdynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TrainTimerCglibDynamicProxy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 12:31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainTimerCglibDynamicProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           目标类的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      目标类的反射方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects     方法的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 代理类的实例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> starttime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"TrainTimerCglibDynamicProxy 火车开始行驶。。。"</span>);</span><br><span class="line">        Object c = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        <span class="keyword">long</span> endtime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"TrainTimerCglibDynamicProxy 火车结束行驶。。。 火车行驶时间："</span> + (endtime - starttime) + <span class="string">"毫秒！"</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.designpatterns.proxypattern.dynamic.cglibdynamicproxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Client</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/10/29 13:05</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrainClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TrainTimerCglibDynamicProxy proxy = <span class="keyword">new</span> TrainTimerCglibDynamicProxy();</span><br><span class="line">        Train train = (Train) proxy.getProxy(Train.class);</span><br><span class="line">        train.move();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">TrainTimerCglibDynamicProxy 火车开始行驶。。。</span><br><span class="line">火车行驶中。。。</span><br><span class="line">TrainTimerCglibDynamicProxy 火车结束行驶。。。 火车行驶时间：<span class="number">127</span>毫秒！</span><br></pre></td></tr></table></figure><h2 id="4-3-JDK动态代理和Cglib动态代理的区别"><a href="#4-3-JDK动态代理和Cglib动态代理的区别" class="headerlink" title="4.3 JDK动态代理和Cglib动态代理的区别"></a>4.3 JDK动态代理和Cglib动态代理的区别</h2><table><thead><tr><th>JDK动态代理</th><th style="text-align:center">CGLIB动态代理</th></tr></thead><tbody><tr><td>只能代理实现了接口的类</td><td style="text-align:center">针对类来实现代理的</td></tr><tr><td>没有实现接口的类不能实现JDK的动态代理</td><td style="text-align:center">对指定目标类产生一个子类，通过方法拦截技术拦截所有父类方法的调用</td></tr></tbody></table><h1 id="5-希望大家手动敲一遍代码，会收获颇丰！"><a href="#5-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="5 希望大家手动敲一遍代码，会收获颇丰！"></a>5 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="6-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#6-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="6.欢迎关注米宝窝，持续更新中，谢谢！"></a>6.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;p&gt;随着对spring框架的了解，代理模式在其中发乎了很大作用，要想更好的理解spring的核心之一AOP需要对代理模式有一些了解。通过本本能够更好的理解代理模式设计思想、应用实例、优缺点、与适配器模式的不同、JDK动态代理、Cglib动态代理。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://yoursite.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理模式" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-SQL开发总结（三）-开发技巧2</title>
    <link href="http://yoursite.com/2018/10/16/MYSQL-SQL%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89-%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A72/"/>
    <id>http://yoursite.com/2018/10/16/MYSQL-SQL开发总结（三）-开发技巧2/</id>
    <published>2018-10-16T05:27:29.000Z</published>
    <updated>2018-10-17T10:16:36.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-目标"><a href="#0-目标" class="headerlink" title="0. 目标"></a>0. 目标</h1><p>通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。</p><p>通过本人能够掌握：</p><ul><li>MySQL 行列转换</li><li>MySQL 列转行</li><li>MySQL 行转列</li><li>MySQL 生成唯一序列号</li><li>MySQL 删除重复数据</li></ul><p>使用数据及导入方法见<a href="MYSQL-SQL开发总结（一）-SQL基础&quot;&quot;">MYSQL-SQL开发总结（一）-SQL基础</a></p><a id="more"></a><h1 id="1-测试表数据"><a href="#1-测试表数据" class="headerlink" title="1. 测试表数据"></a>1. 测试表数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM websites;</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">| id | name     | url                       | alexa | country |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">|  1 | Google   | https://www.google.cm/    |     1 | USA     |</span><br><span class="line">|  2 | 淘宝     | https://www.taobao.com/   |    13 | CN      |</span><br><span class="line">|  3 | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      |</span><br><span class="line">|  4 | 微博     | http://weibo.com/         |    20 | CN      |</span><br><span class="line">|  5 | Facebook | https://www.facebook.com/ |     3 | USA     |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> access_log;</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">| aid | site_id | count | date       |</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">|   1 |       1 |    45 | 2016-05-10 |</span><br><span class="line">|   2 |       3 |   100 | 2016-05-13 |</span><br><span class="line">|   3 |       1 |   230 | 2016-05-14 |</span><br><span class="line">|   4 |       2 |    10 | 2016-05-14 |</span><br><span class="line">|   5 |       5 |   205 | 2016-05-14 |</span><br><span class="line">|   6 |       4 |    13 | 2016-05-15 |</span><br><span class="line">|   7 |       3 |   220 | 2016-05-15 |</span><br><span class="line">|   8 |       5 |   545 | 2016-05-16 |</span><br><span class="line">|   9 |       3 |   201 | 2016-05-17 |</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name ,a.count FROM websites w JOIN access_log a ON w.id = a.site_id;</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">| name     | count |</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">| Google   |    45 |</span><br><span class="line">| Google   |   230 |</span><br><span class="line">| 淘宝     |    10 |</span><br><span class="line">| 菜鸟教程 |   100 |</span><br><span class="line">| 菜鸟教程 |   220 |</span><br><span class="line">| 菜鸟教程 |   201 |</span><br><span class="line">| 微博     |    13 |</span><br><span class="line">| Facebook |   205 |</span><br><span class="line">| Facebook |   545 |</span><br><span class="line">+<span class="comment">----------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><h1 id="2-行转列场景"><a href="#2-行转列场景" class="headerlink" title="2.行转列场景"></a>2.行转列场景</h1><p>欲实现效果，将各个公司网站访问总数统一在一行显示。实现效果如下：</p><p><img src="/2018/10/16/MYSQL-SQL开发总结（三）-开发技巧2/markdown-img-paste-2018101615040595.png" alt="行转列场景-使用自连接方法实现行转列"></p><h2 id="2-1-使用自连接方法实现行转列"><a href="#2-1-使用自连接方法实现行转列" class="headerlink" title="2.1 使用自连接方法实现行转列"></a>2.1 使用自连接方法实现行转列</h2><p><strong> 思路 </strong> 我们可以通过单独查询其中一种应用总的访问次数，然后在对几种结果通过cross join 聚合。</p><ul><li>Google 公司网站访问次数总计</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(COUNT) AS 'Google' FROM access_log a JOIN websites w ON w.id = a.site_id AND w.name = 'Google';</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">| Google |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">|    275 |</span><br><span class="line">+<span class="comment">--------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>Facebook公司网站访问次数总计</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(COUNT) AS 'Facebook' FROM access_log a JOIN websites w ON w.id = a.site_id AND w.name = 'Facebook';</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| Facebook |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|      750 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>菜鸟教程公司网站访问次数总计</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT SUM(COUNT) AS '菜鸟教程' FROM access_log a JOIN websites w ON w.id = a.site_id AND w.name = '菜鸟教程';</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">| 菜鸟教程 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">|      521 |</span><br><span class="line">+<span class="comment">----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>通过cross join 结果聚合</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span></span><br><span class="line">        <span class="keyword">SUM</span>(<span class="keyword">COUNT</span>) <span class="keyword">AS</span> <span class="string">'Google'</span></span><br><span class="line">      <span class="keyword">FROM</span> access_log a</span><br><span class="line">        <span class="keyword">JOIN</span> websites w</span><br><span class="line">          <span class="keyword">ON</span> w.id = a.site_id</span><br><span class="line">            <span class="keyword">AND</span> w.name = <span class="string">'Google'</span>) G</span><br><span class="line">  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                <span class="keyword">SUM</span>(<span class="keyword">COUNT</span>) <span class="keyword">AS</span> <span class="string">'Facebook'</span></span><br><span class="line">              <span class="keyword">FROM</span> access_log a</span><br><span class="line">                <span class="keyword">JOIN</span> websites w</span><br><span class="line">                  <span class="keyword">ON</span> w.id = a.site_id</span><br><span class="line">                    <span class="keyword">AND</span> w.name = <span class="string">'Facebook'</span>) F</span><br><span class="line">  <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">                <span class="keyword">SUM</span>(<span class="keyword">COUNT</span>) <span class="keyword">AS</span> <span class="string">'菜鸟教程'</span></span><br><span class="line">              <span class="keyword">FROM</span> access_log a</span><br><span class="line">                <span class="keyword">JOIN</span> websites w</span><br><span class="line">                  <span class="keyword">ON</span> w.id = a.site_id</span><br><span class="line">                    <span class="keyword">AND</span> w.name = <span class="string">'菜鸟教程'</span>) C;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br><span class="line">| Google | Facebook | 菜鸟教程 |</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br><span class="line">|    275 |      750 |      521 |</span><br><span class="line">+<span class="comment">--------+----------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong> 缺点：</strong> 是将原来查询的结果每一行单独查询出来，再进行拼接。因此每增加一个同学就增加一个SELECT语句。并且是通过交叉连接，要保证每个查询的结果只能是一个，不然没办法通过交叉连接实现转换。</p><h2 id="2-2-使用CASE实现行转列"><a href="#2-2-使用CASE实现行转列" class="headerlink" title="2.2 使用CASE实现行转列"></a>2.2 使用CASE实现行转列</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">NAME</span> = <span class="string">'Google'</span> <span class="keyword">THEN</span> <span class="keyword">COUNT</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'Google'</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">NAME</span> = <span class="string">'Facebook'</span> <span class="keyword">THEN</span> <span class="keyword">COUNT</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'Facebook'</span>,</span><br><span class="line">  <span class="keyword">SUM</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> <span class="keyword">NAME</span> = <span class="string">'菜鸟教程'</span> <span class="keyword">THEN</span> <span class="keyword">COUNT</span> <span class="keyword">END</span> ) <span class="keyword">AS</span> <span class="string">'菜鸟教程'</span></span><br><span class="line"><span class="keyword">FROM</span> websites w</span><br><span class="line">  <span class="keyword">JOIN</span> access_log a</span><br><span class="line">    <span class="keyword">ON</span> w.id = a.site_id;</span><br></pre></td></tr></table></figure><h1 id="3-列转行场景"><a href="#3-列转行场景" class="headerlink" title="3 列转行场景"></a>3 列转行场景</h1><h2 id="3-1-单列转多行场景"><a href="#3-1-单列转多行场景" class="headerlink" title="3.1 单列转多行场景"></a>3.1 单列转多行场景</h2><h3 id="3-1-1-单列转多行场景实际用途"><a href="#3-1-1-单列转多行场景实际用途" class="headerlink" title="3.1.1 单列转多行场景实际用途"></a>3.1.1 单列转多行场景实际用途</h3><ul><li>（1）属性拆分</li><li>（2）ETL数据处理</li></ul><h3 id="3-1-2-单列转多行场景演示-权限拆分"><a href="#3-1-2-单列转多行场景演示-权限拆分" class="headerlink" title="3.1.2 单列转多行场景演示-权限拆分"></a>3.1.2 单列转多行场景演示-权限拆分</h3><p><strong> 原始数据建表语句及数据 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Table</span>: <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_roles`</span> (</span><br><span class="line">  <span class="string">`user_roles_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`role_name`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`major_roles`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`creation_time`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> USER_ROLES</span><br><span class="line">            (USER_ROLES_ID,</span><br><span class="line">             ROLE_NAME,</span><br><span class="line">             MAJOR_ROLES,</span><br><span class="line">             CREATION_TIME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>,</span><br><span class="line">        <span class="string">'middleware'</span>,</span><br><span class="line">        <span class="string">'2,21,22,23,24'</span>,</span><br><span class="line">        <span class="keyword">CURTIME</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> USER_ROLES (USER_ROLES_ID, ROLE_NAME, MAJOR_ROLES, CREATION_TIME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'db'</span>,<span class="string">'9,10'</span>, <span class="keyword">CURTIME</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> USER_ROLES (USER_ROLES_ID, ROLE_NAME, MAJOR_ROLES, CREATION_TIME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'SYSTEM'</span>,  <span class="string">'4,6,7,8'</span>, <span class="keyword">CURTIME</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> USER_ROLES (USER_ROLES_ID, ROLE_NAME, MAJOR_ROLES, CREATION_TIME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'bcy109'</span>, <span class="string">'21,22,25,26,27,28,23,24,16'</span>,<span class="keyword">CURTIME</span>());</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> USER_ROLES (USER_ROLES_ID, ROLE_NAME, MAJOR_ROLES, CREATION_TIME)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'bcytest'</span>, <span class="string">'17,18,23,24'</span>,<span class="keyword">CURTIME</span>());</span><br></pre></td></tr></table></figure><p><strong> 表数据 </strong></p><p> <img src="/2018/10/16/MYSQL-SQL开发总结（三）-开发技巧2/markdown-img-paste-20181016163536370.png" alt="单列转多行场景-原始数据"></p><p> <strong> 预期实现目标 </strong></p><p><img src="/2018/10/16/MYSQL-SQL开发总结（三）-开发技巧2/markdown-img-paste-20181016170406360.png" alt="单列转多行场景-预期目标"></p><h3 id="3-1-3-使用序列化表的方法实现行转列"><a href="#3-1-3-使用序列化表的方法实现行转列" class="headerlink" title="3.1.3 使用序列化表的方法实现行转列"></a>3.1.3 使用序列化表的方法实现行转列</h3><p><strong> 建立序列表：</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>  tb_sequence(<span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT PRIMARY <span class="keyword">KEY</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_sequence <span class="keyword">VALUES</span>(),(),(),(),(),(),(),(),();</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM tb_sequence;</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">| id |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">|  1 |</span><br><span class="line">|  2 |</span><br><span class="line">|  3 |</span><br><span class="line">|  4 |</span><br><span class="line">|  5 |</span><br><span class="line">|  6 |</span><br><span class="line">|  7 |</span><br><span class="line">|  8 |</span><br><span class="line">|  9 |</span><br><span class="line">+<span class="comment">----+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><strong> 最终语句 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.user_roles_id,b.role_name,</span><br><span class="line"><span class="keyword">REPLACE</span>(<span class="keyword">SUBSTRING</span>(SUBSTRING_INDEX(major_roles,<span class="string">','</span>,a.id),<span class="keyword">CHAR_LENGTH</span>(SUBSTRING_INDEX(major_roles,<span class="string">','</span>,a.id<span class="number">-1</span>))+<span class="number">1</span>),<span class="string">','</span>,<span class="string">''</span>) <span class="keyword">AS</span> major_roles <span class="keyword">FROM</span> tb_sequence a <span class="keyword">CROSS</span> <span class="keyword">JOIN</span>(<span class="keyword">SELECT</span> user_roles_id,role_name,<span class="keyword">CONCAT</span>(major_roles,<span class="string">','</span>) <span class="keyword">AS</span> major_roles,</span><br><span class="line"><span class="keyword">LENGTH</span>(major_roles)-<span class="keyword">LENGTH</span>(<span class="keyword">REPLACE</span>(major_roles,<span class="string">','</span>,<span class="string">''</span>))+<span class="number">1</span> <span class="keyword">size</span></span><br><span class="line"><span class="keyword">FROM</span> user_roles b <span class="keyword">ORDER</span> <span class="keyword">BY</span> b.user_roles_id) b <span class="keyword">ON</span> a.id&lt;=b.size;</span><br></pre></td></tr></table></figure><p><strong> 语句解读 </strong></p><ul><li>内部子查询：目的是在 major_roles 每行数据增加一个逗号，在用总长度减去没有逗号的情况时的长度 = size （表示有几个权限，将要转成几行记录）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_roles_id,role_name,CONCAT(major_roles,',') AS major_roles,</span><br><span class="line">    -&gt; LENGTH(major_roles)-LENGTH(REPLACE(major_roles,',',''))+1 size</span><br><span class="line">    -&gt; FROM user_roles b ORDER BY b.user_roles_id;</span><br><span class="line">+<span class="comment">---------------+------------+-----------------------------+------+</span></span><br><span class="line">| user_roles_id | role_name  | major_roles                 | size |</span><br><span class="line">+<span class="comment">---------------+------------+-----------------------------+------+</span></span><br><span class="line">|             1 | middleware | 2,21,22,23,24,              |    5 |</span><br><span class="line">|             2 | db         | 9,10,                       |    2 |</span><br><span class="line">|             3 | SYSTEM     | 4,6,7,8,                    |    4 |</span><br><span class="line">|             4 | bcy109     | 21,22,25,26,27,28,23,24,16, |    9 |</span><br><span class="line">|             5 | bcytest    | 17,18,23,24,                |    4 |</span><br><span class="line">+<span class="comment">---------------+------------+-----------------------------+------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>外部查询：外层查询根据序列表 cross join 子查询结果</li></ul><h2 id="3-2-多列转多行场景"><a href="#3-2-多列转多行场景" class="headerlink" title="3.2 多列转多行场景"></a>3.2 多列转多行场景</h2><h3 id="3-2-1-多列转多行场景实际用途"><a href="#3-2-1-多列转多行场景实际用途" class="headerlink" title="3.2.1 多列转多行场景实际用途"></a>3.2.1 多列转多行场景实际用途</h3><ul><li>（1）学生成绩查询</li><li>（2） ETL 数据抽取</li></ul><h3 id="3-2-2-多列转多行案例分析-学生成绩行列转换"><a href="#3-2-2-多列转多行案例分析-学生成绩行列转换" class="headerlink" title="3.2.2 多列转多行案例分析-学生成绩行列转换"></a>3.2.2 多列转多行案例分析-学生成绩行列转换</h3><p><strong> 建表语句及原始数据插入语句 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`TB_GRADE`</span> (</span><br><span class="line">  <span class="string">`ID`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`USER_NAME`</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`CN_SCORE`</span> <span class="built_in">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`MATCH_SCORE`</span> <span class="built_in">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  <span class="string">`EN_SCORE`</span> <span class="built_in">FLOAT</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`ID`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> AUTO_INCREMENT=<span class="number">1</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TB_GRADE(USER_NAME, CN_SCORE, MATCH_SCORE,EN_SCORE)  <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">"张三"</span>,<span class="number">58</span> ,<span class="number">34</span>,<span class="number">72</span>),</span><br><span class="line">(<span class="string">"李四"</span>,<span class="number">87</span> ,<span class="number">79</span>,<span class="number">72</span>),</span><br><span class="line">(<span class="string">"王五"</span>,<span class="number">88</span> ,<span class="number">76</span>,<span class="number">90</span>);</span><br></pre></td></tr></table></figure><p><strong> 表中原始数据 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM TB_GRADE;</span><br><span class="line">+<span class="comment">----+-----------+----------+-------------+----------+</span></span><br><span class="line">| ID | USER_NAME | CN_SCORE | MATCH_SCORE | EN_SCORE |</span><br><span class="line">+<span class="comment">----+-----------+----------+-------------+----------+</span></span><br><span class="line">|  1 | 张三      |       58 |          34 |       72 |</span><br><span class="line">|  2 | 李四      |       87 |          79 |       72 |</span><br><span class="line">|  3 | 王五      |       88 |          76 |       90 |</span><br><span class="line">+<span class="comment">----+-----------+----------+-------------+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong> 预期实现目标 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| user_name | 学科        | 成绩 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| 张三      | CN_SCORE    |   58 |</span><br><span class="line">| 李四      | CN_SCORE    |   87 |</span><br><span class="line">| 王五      | CN_SCORE    |   88 |</span><br><span class="line">| 张三      | MATCH_SCORE |   34 |</span><br><span class="line">| 李四      | MATCH_SCORE |   79 |</span><br><span class="line">| 王五      | MATCH_SCORE |   76 |</span><br><span class="line">| 张三      | EN_SCORE    |   72 |</span><br><span class="line">| 李四      | EN_SCORE    |   72 |</span><br><span class="line">| 王五      | EN_SCORE    |   90 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br></pre></td></tr></table></figure><h3 id="3-2-3-使用UNION方法实现列转行"><a href="#3-2-3-使用UNION方法实现列转行" class="headerlink" title="3.2.3 使用UNION方法实现列转行"></a>3.2.3 使用UNION方法实现列转行</h3><p><strong> 语句拆分解读 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_name,'CN_SCORE' AS '语文',CN_SCORE AS '成绩' FROM TB_GRADE a;</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">| user_name | 语文     | 成绩 |</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">| 张三      | CN_SCORE |   58 |</span><br><span class="line">| 李四      | CN_SCORE |   87 |</span><br><span class="line">| 王五      | CN_SCORE |   88 |</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> user_name,<span class="string">'MATCH_SCORE'</span> <span class="keyword">AS</span> <span class="string">'数学'</span>,MATCH_SCORE <span class="keyword">AS</span> <span class="string">'成绩'</span> <span class="keyword">FROM</span> TB_GRADE a;</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| user_name | 数学        | 成绩 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| 张三      | MATCH_SCORE |   34 |</span><br><span class="line">| 李四      | MATCH_SCORE |   79 |</span><br><span class="line">| 王五      | MATCH_SCORE |   76 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> user_name,<span class="string">'EN_SCORE'</span> <span class="keyword">AS</span> <span class="string">'英语'</span>,EN_SCORE <span class="keyword">AS</span> <span class="string">'成绩'</span> <span class="keyword">FROM</span> TB_GRADE a;</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">| user_name | 英语     | 成绩 |</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">| 张三      | EN_SCORE |   72 |</span><br><span class="line">| 李四      | EN_SCORE |   72 |</span><br><span class="line">| 王五      | EN_SCORE |   90 |</span><br><span class="line">+<span class="comment">-----------+----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong> 最终语句 </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> user_name,<span class="string">'CN_SCORE'</span> <span class="keyword">AS</span> <span class="string">'学科'</span>,CN_SCORE <span class="keyword">AS</span> <span class="string">'成绩'</span> <span class="keyword">FROM</span> TB_GRADE a</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> user_name,<span class="string">'MATCH_SCORE'</span> <span class="keyword">AS</span> <span class="string">'学科'</span>,MATCH_SCORE <span class="keyword">AS</span> <span class="string">'成绩'</span> <span class="keyword">FROM</span> TB_GRADE a</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> user_name,<span class="string">'EN_SCORE'</span> <span class="keyword">AS</span> <span class="string">'学科'</span>,EN_SCORE <span class="keyword">AS</span> <span class="string">'成绩'</span> <span class="keyword">FROM</span> TB_GRADE a;</span><br></pre></td></tr></table></figure></p><p><strong>  最终效果 </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_name,'CN_SCORE' AS '学科',CN_SCORE AS '成绩' FROM TB_GRADE a</span><br><span class="line">    -&gt; UNION ALL</span><br><span class="line">    -&gt; SELECT user_name,'MATCH_SCORE' AS '学科',MATCH_SCORE AS '成绩' FROM TB_GRADE a</span><br><span class="line">    -&gt; UNION ALL</span><br><span class="line">    -&gt; SELECT user_name,'EN_SCORE' AS '学科',EN_SCORE AS '成绩' FROM TB_GRADE a;</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| user_name | 学科        | 成绩 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| 张三      | CN_SCORE    |   58 |</span><br><span class="line">| 李四      | CN_SCORE    |   87 |</span><br><span class="line">| 王五      | CN_SCORE    |   88 |</span><br><span class="line">| 张三      | MATCH_SCORE |   34 |</span><br><span class="line">| 李四      | MATCH_SCORE |   79 |</span><br><span class="line">| 王五      | MATCH_SCORE |   76 |</span><br><span class="line">| 张三      | EN_SCORE    |   72 |</span><br><span class="line">| 李四      | EN_SCORE    |   72 |</span><br><span class="line">| 王五      | EN_SCORE    |   90 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h3 id="3-2-4-使用序列化表的方法实现列转行"><a href="#3-2-4-使用序列化表的方法实现列转行" class="headerlink" title="3.2.4 使用序列化表的方法实现列转行"></a>3.2.4 使用序列化表的方法实现列转行</h3><p><strong> 语句拆分解析 </strong></p><ul><li>通过序列固定获取学科</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_name, CASE WHEN c.id=1 THEN 'CN_SCORE' WHEN c.id=2 THEN 'MATCH_SCORE' WHEN c.id=3 THEN 'EN_SCORE' END AS '学科'</span><br><span class="line">    -&gt; FROM   TB_GRADE a</span><br><span class="line">    -&gt; CROSS JOIN tb_sequence c WHERE c.id&lt;=3 ;</span><br><span class="line">+<span class="comment">-----------+-------------+</span></span><br><span class="line">| user_name | 学科        |</span><br><span class="line">+<span class="comment">-----------+-------------+</span></span><br><span class="line">| 张三      | CN_SCORE    |</span><br><span class="line">| 李四      | CN_SCORE    |</span><br><span class="line">| 王五      | CN_SCORE    |</span><br><span class="line">| 张三      | MATCH_SCORE |</span><br><span class="line">| 李四      | MATCH_SCORE |</span><br><span class="line">| 王五      | MATCH_SCORE |</span><br><span class="line">| 张三      | EN_SCORE    |</span><br><span class="line">| 李四      | EN_SCORE    |</span><br><span class="line">| 王五      | EN_SCORE    |</span><br><span class="line">+<span class="comment">-----------+-------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>通过序列固定获取成绩</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; SELECT user_name, COALESCE(CASE WHEN c.id=1 THEN CN_SCORE END, CASE WHEN c.id=2 THEN MATCH_SCORE END, CASE WHEN c.id=3 THEN EN_SCORE END) AS '成绩'</span><br><span class="line">    -&gt; FROM   TB_GRADE a</span><br><span class="line">    -&gt; CROSS JOIN tb_sequence c WHERE c.id&lt;=3</span><br><span class="line">    -&gt; ;</span><br><span class="line">+<span class="comment">-----------+------+</span></span><br><span class="line">| user_name | 成绩 |</span><br><span class="line">+<span class="comment">-----------+------+</span></span><br><span class="line">| 张三      |   58 |</span><br><span class="line">| 李四      |   87 |</span><br><span class="line">| 王五      |   88 |</span><br><span class="line">| 张三      |   34 |</span><br><span class="line">| 李四      |   79 |</span><br><span class="line">| 王五      |   76 |</span><br><span class="line">| 张三      |   72 |</span><br><span class="line">| 李四      |   72 |</span><br><span class="line">| 王五      |   90 |</span><br><span class="line">+<span class="comment">-----------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><ul><li>最终查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_name, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.id=<span class="number">1</span> <span class="keyword">THEN</span> <span class="string">'CN_SCORE'</span> <span class="keyword">WHEN</span> c.id=<span class="number">2</span> <span class="keyword">THEN</span> <span class="string">'MATCH_SCORE'</span> <span class="keyword">WHEN</span> c.id=<span class="number">3</span> <span class="keyword">THEN</span> <span class="string">'EN_SCORE'</span> <span class="keyword">END</span> <span class="keyword">AS</span> <span class="string">'学科'</span>,</span><br><span class="line"><span class="keyword">COALESCE</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.id=<span class="number">1</span> <span class="keyword">THEN</span> CN_SCORE <span class="keyword">END</span>, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.id=<span class="number">2</span> <span class="keyword">THEN</span> MATCH_SCORE <span class="keyword">END</span>, <span class="keyword">CASE</span> <span class="keyword">WHEN</span> c.id=<span class="number">3</span> <span class="keyword">THEN</span> EN_SCORE <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'成绩'</span></span><br><span class="line"><span class="keyword">FROM</span>   TB_GRADE a</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> tb_sequence c <span class="keyword">WHERE</span> c.id&lt;=<span class="number">3</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> user_name;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT user_name, CASE WHEN c.id=1 THEN 'CN_SCORE' WHEN c.id=2 THEN 'MATCH_SCORE' WHEN c.id=3 THEN 'EN_SCORE' END AS '学科',</span><br><span class="line">    -&gt; COALESCE(CASE WHEN c.id=1 THEN CN_SCORE END, CASE WHEN c.id=2 THEN MATCH_SCORE END, CASE WHEN c.id=3 THEN EN_SCORE END) AS '成绩'</span><br><span class="line">    -&gt; FROM   TB_GRADE a</span><br><span class="line">    -&gt; CROSS JOIN tb_sequence c WHERE c.id&lt;=3 ORDER BY user_name;</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| user_name | 学科        | 成绩 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">| 张三      | MATCH_SCORE |   34 |</span><br><span class="line">| 张三      | EN_SCORE    |   72 |</span><br><span class="line">| 张三      | CN_SCORE    |   58 |</span><br><span class="line">| 李四      | CN_SCORE    |   87 |</span><br><span class="line">| 李四      | MATCH_SCORE |   79 |</span><br><span class="line">| 李四      | EN_SCORE    |   72 |</span><br><span class="line">| 王五      | CN_SCORE    |   88 |</span><br><span class="line">| 王五      | MATCH_SCORE |   76 |</span><br><span class="line">| 王五      | EN_SCORE    |   90 |</span><br><span class="line">+<span class="comment">-----------+-------------+------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="4-生成唯一序列号"><a href="#4-生成唯一序列号" class="headerlink" title="4. 生成唯一序列号"></a>4. 生成唯一序列号</h1><h2 id="4-1-唯一序列号场景及序列号生成方式"><a href="#4-1-唯一序列号场景及序列号生成方式" class="headerlink" title="4.1 唯一序列号场景及序列号生成方式"></a>4.1 唯一序列号场景及序列号生成方式</h2><p><strong> 需要使用唯一序列号的场景：</strong></p><ol><li><p>作为数据库主键。</p></li><li><p>业务序列号。</p></li></ol><p><strong> 生成序列号的方法：</strong></p><ul><li><p>MySQL：AUTO_INCREMENT</p></li><li><p>SQLServer：IDENTITY/SEQUENCE</p></li><li><p>Oracle：SEQUENCE</p></li><li><p>PgSQL：SEQUENCE</p></li></ul><p><strong> 如何选择生成序列号的方式：</strong></p><p>【原则】：优先选择系统提供的序列号生成方式。</p><p>【优点】：</p><ol><li><p>控制并发；</p></li><li><p>不重复，保证序列号的唯一性。</p></li></ol><p>【缺点】：序列号不连续（数据空洞），例如 1、2、4。</p><p>【原因】：对已有的数据的删除，以及事务回滚等方式不会影响自增长的序号，例如已有数据 1、2、3，删除 3 号数据。之后再插入一条数据，此时数据表的数据为 1、2、4。</p><h2 id="4-2-建立特殊需求的序列号"><a href="#4-2-建立特殊需求的序列号" class="headerlink" title="4.2 建立特殊需求的序列号"></a>4.2 建立特殊需求的序列号</h2><p>创建订单号，订单序列号格式如下：YYYYMMDDnnnnnnn。如201810170000002</p><p><strong> 基础表 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> order_seq(</span><br><span class="line">timestr <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span>,</span><br><span class="line">order_sn <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong> 存储过程 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DELIMITER //</span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> seq_no()</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> v_cnt   <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> v_timestr <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> rowcount <span class="built_in">BIGINT</span>;</span><br><span class="line">  <span class="keyword">SET</span>     v_timestr = <span class="keyword">DATE_FORMAT</span>(<span class="keyword">NOW</span>(), <span class="string">'%Y%m%d'</span>);</span><br><span class="line">  <span class="keyword">SELECT</span>  <span class="keyword">ROUND</span>(<span class="keyword">RAND</span>() * <span class="number">100</span>, <span class="number">0</span>) + <span class="number">1</span> <span class="keyword">INTO</span> v_cnt;</span><br><span class="line">  <span class="keyword">START</span>   <span class="keyword">TRANSACTION</span>;</span><br><span class="line"><span class="keyword">UPDATE</span>  order_seq <span class="keyword">SET</span> order_sn = order_sn + v_cnt <span class="keyword">WHERE</span> timestr = v_timestr;</span><br><span class="line">IF      </span><br><span class="line">ROW_COUNT() = 0 THEN <span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_seq(timestr, order_sn) <span class="keyword">VALUES</span>(v_timestr,v_cnt);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(v_timestr, <span class="keyword">LPAD</span>(order_sn, <span class="number">7</span>, <span class="number">0</span>)) <span class="keyword">AS</span> order_sn</span><br><span class="line"><span class="keyword">FROM</span> order_seq</span><br><span class="line"><span class="keyword">WHERE</span> timestr = v_timestr;</span><br><span class="line">  <span class="keyword">COMMIT</span>;</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line">//</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure><p><strong> 结果展示 </strong><br>此存储过程经测试，每秒中可以生成1千个订单号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; call seq_no();</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| order_sn        |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">| 201810170000135 |</span><br><span class="line">+<span class="comment">-----------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="keyword">Query</span> OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">select</span> * <span class="keyword">from</span> order_seq;</span><br><span class="line">+<span class="comment">----------+----------+</span></span><br><span class="line">| timestr  | order_sn |</span><br><span class="line">+<span class="comment">----------+----------+</span></span><br><span class="line">| 20181017 |      135 |</span><br><span class="line">+<span class="comment">----------+----------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>知识点：</p><ul><li><p>1、在sql语句中添加变量。 declare @local_variable data_type 声明时需要指定变量的类型，可以使用SET、SELECT、SELECT…INTO对变量进行赋值，在sql语句中就可以使用@local_variable来调用变量。</p></li><li><p>2、RAND()返回一个介于 0 到 1（不包括 0 和 1）之间的伪随机 float 值。</p></li><li><p>3、事务</p></li><li><p>4、ROW_COUNT()函数返回查询语句执行后，被影响的列数目</p></li><li><p>5、IF…THEN…END IF;</p></li></ul><h1 id="5-删除重复数据"><a href="#5-删除重复数据" class="headerlink" title="5. 删除重复数据"></a>5. 删除重复数据</h1><h2 id="5-1-查询数据是否重复"><a href="#5-1-查询数据是否重复" class="headerlink" title="5.1 查询数据是否重复"></a>5.1 查询数据是否重复</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM runoob_tbl;</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">| runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">|         1 | 学习 PHP     | 菜鸟教程      | 2017-04-12      |</span><br><span class="line">|         2 | 学习 MySQL   | 菜鸟教程      | 2017-04-12      |</span><br><span class="line">|         3 | 学习 Java    | RUNOOB.COM    | 2015-05-01      |</span><br><span class="line">|         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">|         5 | 学习 C       | FK            | 2017-04-05      |</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> runoob_author,<span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> runoob_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> runoob_author <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">1</span>;</span><br><span class="line">+<span class="comment">---------------+----------+</span></span><br><span class="line">| runoob_author | COUNT(*) |</span><br><span class="line">+<span class="comment">---------------+----------+</span></span><br><span class="line">| RUNOOB.COM    |        2 |</span><br><span class="line">| 菜鸟教程      |        2 |</span><br><span class="line">+<span class="comment">---------------+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="5-2-删除重复数据，对于相同数据保留ID最大的"><a href="#5-2-删除重复数据，对于相同数据保留ID最大的" class="headerlink" title="5.2 删除重复数据，对于相同数据保留ID最大的"></a>5.2 删除重复数据，对于相同数据保留ID最大的</h2><p><strong> sql 语句</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> a</span><br><span class="line"><span class="keyword">FROM</span> runoob_tbl a</span><br><span class="line">  <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span></span><br><span class="line">          runoob_author,</span><br><span class="line">          <span class="keyword">COUNT</span>(*),</span><br><span class="line">          <span class="keyword">MAX</span>(runoob_id) <span class="keyword">AS</span> runoob_id</span><br><span class="line">        <span class="keyword">FROM</span> runoob_tbl</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> runoob_author</span><br><span class="line">        <span class="keyword">HAVING</span> <span class="keyword">COUNT</span>( * ) &gt; <span class="number">1</span>) b</span><br><span class="line">    <span class="keyword">ON</span> a.runoob_author = b.runoob_author</span><br><span class="line"><span class="keyword">WHERE</span> a.runoob_id &lt; b.runoob_id;</span><br></pre></td></tr></table></figure><p><strong> 效果 </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; DELETE a</span><br><span class="line">    -&gt; FROM runoob_tbl a</span><br><span class="line">    -&gt;   JOIN (SELECT</span><br><span class="line">    -&gt;           runoob_author,</span><br><span class="line">    -&gt;           COUNT(*),</span><br><span class="line">    -&gt;           MAX(runoob_id) AS runoob_id</span><br><span class="line">    -&gt;         FROM runoob_tbl</span><br><span class="line">    -&gt;         GROUP BY runoob_author</span><br><span class="line">    -&gt;         HAVING COUNT( * ) &gt; 1) b</span><br><span class="line">    -&gt;     ON a.runoob_author = b.runoob_author</span><br><span class="line">    -&gt; WHERE a.runoob_id &lt; b.runoob_id;</span><br><span class="line">Query OK, 2 rows affected, 1 warning (0.22 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from  runoob_tbl;</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">| runoob_id | runoob_title | runoob_author | submission_date |</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">|         2 | 学习 MySQL   | 菜鸟教程      | 2017-04-12      |</span><br><span class="line">|         4 | 学习 Python  | RUNOOB.COM    | 2016-03-06      |</span><br><span class="line">|         5 | 学习 C       | FK            | 2017-04-05      |</span><br><span class="line">+<span class="comment">-----------+--------------+---------------+-----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="6-希望大家手动敲一遍代码，会收获颇丰！"><a href="#6-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="6 希望大家手动敲一遍代码，会收获颇丰！"></a>6 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7 参考"></a>7 参考</h1><p><a href="&quot;http://www.runoob.com/sql/sql-tutorial.html&quot;">菜鸟教程 http://www.runoob.com/sql/sql-tutorial.html</a></p><p><a href="&quot;https://www.imooc.com/learn/427&quot;">慕课网sqlercn老师-mysql 开发技巧  https://www.imooc.com/learn/427</a></p><h1 id="10-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#10-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="10.欢迎关注米宝窝，持续更新中，谢谢！"></a>10.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-目标&quot;&gt;&lt;a href=&quot;#0-目标&quot; class=&quot;headerlink&quot; title=&quot;0. 目标&quot;&gt;&lt;/a&gt;0. 目标&lt;/h1&gt;&lt;p&gt;通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。&lt;/p&gt;
&lt;p&gt;通过本人能够掌握：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 行列转换&lt;/li&gt;
&lt;li&gt;MySQL 列转行&lt;/li&gt;
&lt;li&gt;MySQL 行转列&lt;/li&gt;
&lt;li&gt;MySQL 生成唯一序列号&lt;/li&gt;
&lt;li&gt;MySQL 删除重复数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用数据及导入方法见&lt;a href=&quot;MYSQL-SQL开发总结（一）-SQL基础&amp;quot;&amp;quot;&quot;&gt;MYSQL-SQL开发总结（一）-SQL基础&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MYSQL" scheme="http://yoursite.com/categories/MYSQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MYSQL" scheme="http://yoursite.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-SQL开发总结（二）-开发技巧1</title>
    <link href="http://yoursite.com/2018/10/11/MYSQL-SQL%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89-%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A71/"/>
    <id>http://yoursite.com/2018/10/11/MYSQL-SQL开发总结（二）-开发技巧1/</id>
    <published>2018-10-11T06:57:15.000Z</published>
    <updated>2018-10-16T05:20:15.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><p>通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。</p><p>通过本人能够掌握：</p><ul><li>MySQL 使用JOIN更新表</li><li>MySQL 使用JOIN优化子查询</li><li>MySQL 使用JOIN优化聚合子查询</li><li>MySQL 实现分组选择</li></ul><p>使用数据及导入方法见<a href="MYSQL-SQL开发总结（一）-SQL基础&quot;&quot;">MYSQL-SQL开发总结（一）-SQL基础</a></p><a id="more"></a><h1 id="2-测试表数据"><a href="#2-测试表数据" class="headerlink" title="2. 测试表数据"></a>2. 测试表数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM apps;</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">| id | app_name | url                     | country |</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">|  1 | QQ APP   | http://im.qq.com/       | CN      |</span><br><span class="line">|  2 | 微博 APP | http://weibo.com/       | CN      |</span><br><span class="line">|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> websites;</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">| id | name     | url                       | alexa | country |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">|  1 | Google   | https://www.google.cm/    |     1 | USA     |</span><br><span class="line">|  2 | 淘宝     | https://www.taobao.com/   |    13 | CN      |</span><br><span class="line">|  3 | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      |</span><br><span class="line">|  4 | 微博     | http://weibo.com/         |    20 | CN      |</span><br><span class="line">|  5 | Facebook | https://www.facebook.com/ |     3 | USA     |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> access_log;</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">| aid | site_id | count | date       |</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">|   1 |       1 |    45 | 2016-05-10 |</span><br><span class="line">|   2 |       3 |   100 | 2016-05-13 |</span><br><span class="line">|   3 |       1 |   230 | 2016-05-14 |</span><br><span class="line">|   4 |       2 |    10 | 2016-05-14 |</span><br><span class="line">|   5 |       5 |   205 | 2016-05-14 |</span><br><span class="line">|   6 |       4 |    13 | 2016-05-15 |</span><br><span class="line">|   7 |       3 |   220 | 2016-05-15 |</span><br><span class="line">|   8 |       5 |   545 | 2016-05-16 |</span><br><span class="line">|   9 |       3 |   201 | 2016-05-17 |</span><br><span class="line">+<span class="comment">-----+---------+-------+------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="3-使用JOIN更新表"><a href="#3-使用JOIN更新表" class="headerlink" title="3. 使用JOIN更新表"></a>3. 使用JOIN更新表</h1><h2 id="3-1-测试场景"><a href="#3-1-测试场景" class="headerlink" title="3.1 测试场景"></a>3.1 测试场景</h2><p>测试 apps 表中url字段与 websites表url相等的记录中，将 apps 的country字段都更改为‘中国’，预期目标效果如下：</p><p><img src="/2018/10/11/MYSQL-SQL开发总结（二）-开发技巧1/markdown-img-paste-20181015143534871.png" alt="MYSQL-SQL开发总结（二）-开发技巧1-使用JOIN更新表-1"></p><h2 id="3-2-用JOIN更新表失败"><a href="#3-2-用JOIN更新表失败" class="headerlink" title="3.2 用JOIN更新表失败"></a>3.2 用JOIN更新表失败</h2><p>执行更新发现会报错，update的表不能出现在from语句中，原因是mysql对子查询的支持是比较薄弱的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; UPDATE apps SET country=&apos;中国&apos; WHERE url IN (SELECT b.url FROM apps a JOIN websites b ON a.url = b.url);</span><br><span class="line">ERROR 1093 (HY000): You can t specify target table &apos;apps&apos; for update in FROM clause</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>如下情况mysql 都会报错:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In general, you cannot modify a table and <span class="keyword">select</span> <span class="keyword">from</span> the same <span class="keyword">table</span> <span class="keyword">in</span> a subquery. <span class="keyword">For</span> example, this limitation applies <span class="keyword">to</span> statements <span class="keyword">of</span> the <span class="keyword">following</span> forms:</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> ... (<span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> t ...);</span><br><span class="line"><span class="keyword">UPDATE</span> t ... <span class="keyword">WHERE</span> <span class="keyword">col</span> = (<span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> t ...);</span><br><span class="line">&#123;INSERT|REPLACE&#125; INTO t (SELECT ... FROM t ...);</span><br><span class="line">Exception: The preceding prohibition does not apply if you are using a subquery for the modified table in the FROM clause. Example:</span><br><span class="line"><span class="keyword">UPDATE</span> t ... <span class="keyword">WHERE</span> <span class="keyword">col</span> = (<span class="keyword">SELECT</span> (<span class="keyword">SELECT</span> ... <span class="keyword">FROM</span> t...) <span class="keyword">AS</span> _t ...);</span><br></pre></td></tr></table></figure><h2 id="3-3-解决办法"><a href="#3-3-解决办法" class="headerlink" title="3.3 解决办法"></a>3.3 解决办法</h2><p>官方手册推荐如下两种方式解决</p><p>内连接方式<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> apps a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> websites b <span class="keyword">ON</span> a.url = b.url <span class="keyword">SET</span> a.country=<span class="string">'中国'</span>;</span><br></pre></td></tr></table></figure></p><p>嵌套一层<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> apps a <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> b.url <span class="keyword">FROM</span> apps a <span class="keyword">JOIN</span> websites b <span class="keyword">ON</span> a.url = b.url) b <span class="keyword">ON</span> a.url = b.url <span class="keyword">SET</span> a.country=<span class="string">'CN'</span> ;</span><br></pre></td></tr></table></figure></p><h1 id="4-使用JOIN优化子查询"><a href="#4-使用JOIN优化子查询" class="headerlink" title="4.使用JOIN优化子查询"></a>4.使用JOIN优化子查询</h1><h2 id="4-1-一般查询方法"><a href="#4-1-一般查询方法" class="headerlink" title="4.1 一般查询方法"></a>4.1 一般查询方法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.app_name,(SELECT NAME FROM websites b WHERE a.url = b.url ) AS app_name2 FROM apps a;</span><br><span class="line">+<span class="comment">----------+-----------+</span></span><br><span class="line">| app_name | app_name2 |</span><br><span class="line">+<span class="comment">----------+-----------+</span></span><br><span class="line">| QQ APP   | NULL      |</span><br><span class="line">| 微博 APP | 微博      |</span><br><span class="line">| 淘宝 APP | 淘宝      |</span><br><span class="line">+<span class="comment">----------+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>问题：子查询对apps表的每一条记录都要进行一次子查询，<br>数据小时，没有多大影响，如果数据量大时，则要消耗大量的查寻<br><img src="/2018/10/11/MYSQL-SQL开发总结（二）-开发技巧1/markdown-img-paste-20181015150847259.png" alt="MYSQL-SQL开发总结（二）-开发技巧1-使用JOIN优化子查询-1"></p><h2 id="4-2-JOIN优化-左连接-后的写法"><a href="#4-2-JOIN优化-左连接-后的写法" class="headerlink" title="4.2 JOIN优化(左连接)后的写法"></a>4.2 JOIN优化(左连接)后的写法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.app_name ,b.name FROM apps a LEFT JOIN  websites b ON a.url = b.url ;</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| app_name | name |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">| 淘宝 APP | 淘宝 |</span><br><span class="line">| 微博 APP | 微博 |</span><br><span class="line">| QQ APP   | NULL |</span><br><span class="line">+<span class="comment">----------+------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/11/MYSQL-SQL开发总结（二）-开发技巧1/markdown-img-paste-20181015150756639.png" alt="MYSQL-SQL开发总结（二）-开发技巧1-使用JOIN优化子查询-2"></p><h1 id="5-使用JOIN优化聚合子查询"><a href="#5-使用JOIN优化聚合子查询" class="headerlink" title="5.使用JOIN优化聚合子查询"></a>5.使用JOIN优化聚合子查询</h1><h2 id="5-1-测试场景"><a href="#5-1-测试场景" class="headerlink" title="5.1 测试场景"></a>5.1 测试场景</h2><p>统计website 表中不同应用类型在 access_log 表中登录count最大的记录中的日期。</p><h2 id="5-2-一般写法，未能解决"><a href="#5-2-一般写法，未能解决" class="headerlink" title="5.2 一般写法，未能解决"></a>5.2 一般写法，未能解决</h2><p>无法达到预期效果<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,MAX(a.count),a.date FROM websites  AS w JOIN access_log a ON w.id = a.site_id GROUP BY w.name ,a.date ;</span><br><span class="line">+<span class="comment">----------+--------------+------------+</span></span><br><span class="line">| name     | MAX(a.count) | date       |</span><br><span class="line">+<span class="comment">----------+--------------+------------+</span></span><br><span class="line">| Facebook |          205 | 2016-05-14 |</span><br><span class="line">| Facebook |          545 | 2016-05-16 |</span><br><span class="line">| Google   |           45 | 2016-05-10 |</span><br><span class="line">| Google   |          230 | 2016-05-14 |</span><br><span class="line">| 微博     |           13 | 2016-05-15 |</span><br><span class="line">| 淘宝     |           10 | 2016-05-14 |</span><br><span class="line">| 菜鸟教程 |          100 | 2016-05-13 |</span><br><span class="line">| 菜鸟教程 |          220 | 2016-05-15 |</span><br><span class="line">| 菜鸟教程 |          201 | 2016-05-17 |</span><br><span class="line">+<span class="comment">----------+--------------+------------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="5-3-使用聚合子查询实现"><a href="#5-3-使用聚合子查询实现" class="headerlink" title="5.3 使用聚合子查询实现"></a>5.3 使用聚合子查询实现</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,a.count,a.date FROM websites  AS w JOIN access_log a ON w.id = a.site_id WHERE a.count = (SELECT MAX(c.count) FROM access_log c WHERE w.id = c.site_id);</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">| name     | count | date       |</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">| Google   |   230 | 2016-05-14 |</span><br><span class="line">| 淘宝     |    10 | 2016-05-14 |</span><br><span class="line">| 菜鸟教程 |   220 | 2016-05-15 |</span><br><span class="line">| 微博     |    13 | 2016-05-15 |</span><br><span class="line">| Facebook |   545 | 2016-05-16 |</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="5-4-使用JOIN优化聚合子查询"><a href="#5-4-使用JOIN优化聚合子查询" class="headerlink" title="5.4 使用JOIN优化聚合子查询"></a>5.4 使用JOIN优化聚合子查询</h2><p>优化查询效率<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  w.name,</span><br><span class="line">  a.count,</span><br><span class="line">  a.date</span><br><span class="line"><span class="keyword">FROM</span> websites <span class="keyword">AS</span> w</span><br><span class="line">  <span class="keyword">JOIN</span> access_log a</span><br><span class="line">    <span class="keyword">ON</span> w.id = a.site_id</span><br><span class="line">  <span class="keyword">JOIN</span> access_log b</span><br><span class="line">    <span class="keyword">ON</span> w.id = b.site_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> w.name,a.date,a.count</span><br><span class="line"><span class="keyword">HAVING</span> a.count = <span class="keyword">MAX</span>(b.count);</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,a.count,a.date FROM websites  AS w JOIN access_log a ON w.id = a.site_id JOIN access_log b ON w.id = b.site_id GROUP BY w.name ,a.date,a.count HAVING a.count = MAX(b.count);</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">| name     | count | date       |</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">| Facebook |   545 | 2016-05-16 |</span><br><span class="line">| Google   |   230 | 2016-05-14 |</span><br><span class="line">| 微博     |    13 | 2016-05-15 |</span><br><span class="line">| 淘宝     |    10 | 2016-05-14 |</span><br><span class="line">| 菜鸟教程 |   220 | 2016-05-15 |</span><br><span class="line">+<span class="comment">----------+-------+------------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="6-实现分组选择"><a href="#6-实现分组选择" class="headerlink" title="6.实现分组选择"></a>6.实现分组选择</h1><h2 id="6-1-测试场景"><a href="#6-1-测试场景" class="headerlink" title="6.1 测试场景"></a>6.1 测试场景</h2><p>查询website表中每种name的app在access_log 表中count字段数据最大的两条数据</p><h2 id="6-2-传统模式"><a href="#6-2-传统模式" class="headerlink" title="6.2 传统模式"></a>6.2 传统模式</h2><p>Google 公司网站访问次数最多的两条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,a.date,a.count FROM websites AS w JOIN access_log a ON w.id = a.site_id WHERE w.name = 'Google' ORDER BY a.count DESC LIMIT 2 ;</span><br><span class="line">+<span class="comment">--------+------------+-------+</span></span><br><span class="line">| name   | date       | count |</span><br><span class="line">+<span class="comment">--------+------------+-------+</span></span><br><span class="line">| Google | 2016-05-14 |   230 |</span><br><span class="line">| Google | 2016-05-10 |    45 |</span><br><span class="line">+<span class="comment">--------+------------+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>Facebook 公司网站访问次数最多的两条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,a.date,a.count FROM websites AS w JOIN access_log a ON w.id = a.site_id WHERE w.name = 'Facebook' ORDER BY a.count DESC LIMIT 2 ;</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| name     | date       | count |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| Facebook | 2016-05-16 |   545 |</span><br><span class="line">| Facebook | 2016-05-14 |   205 |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p> 菜鸟教程公司网站访问次数最多的两条记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT w.name,a.date,a.count FROM websites AS w JOIN access_log a ON w.id = a.site_id WHERE w.name = '菜鸟教程' ORDER BY a.count DESC LIMIT 2 ;</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| name     | date       | count |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| 菜鸟教程 | 2016-05-15 |   220 |</span><br><span class="line">| 菜鸟教程 | 2016-05-17 |   201 |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>缺点：</p><ul><li>1 如果分类或是应用类型很多的情况下则需要多次执行同一查询</li><li>2 增加应用程序同数据的交互次数</li><li>3 增加数据库执行查询的次数，不符合批处理原则</li><li>4 增加网络流量</li></ul><h2 id="6-2-通过join和子查询实现分组"><a href="#6-2-通过join和子查询实现分组" class="headerlink" title="6.2 通过join和子查询实现分组"></a>6.2 通过join和子查询实现分组</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  d.name,</span><br><span class="line">  c.date,</span><br><span class="line">  c.count</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span></span><br><span class="line">        a.aid,</span><br><span class="line">        a.site_id,</span><br><span class="line">        a.date,</span><br><span class="line">        a.count,</span><br><span class="line">        (<span class="keyword">SELECT</span></span><br><span class="line">           <span class="keyword">COUNT</span>(*)</span><br><span class="line">         <span class="keyword">FROM</span> access_log b</span><br><span class="line">         <span class="keyword">WHERE</span> b.site_id = a.site_id</span><br><span class="line">             <span class="keyword">AND</span> a.count &lt;= b.count) <span class="keyword">AS</span> cnt</span><br><span class="line">      <span class="keyword">FROM</span> access_log a</span><br><span class="line">      <span class="keyword">GROUP</span> <span class="keyword">BY</span> a.aid,a.date,a.count) c</span><br><span class="line">  <span class="keyword">JOIN</span> websites d</span><br><span class="line">    <span class="keyword">ON</span> c.site_id = d.id</span><br><span class="line"><span class="keyword">WHERE</span> cnt &lt;= <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| name     | date       | count |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">| Google   | 2016-05-14 |   230 |</span><br><span class="line">| Google   | 2016-05-10 |    45 |</span><br><span class="line">| 淘宝     | 2016-05-14 |    10 |</span><br><span class="line">| 菜鸟教程 | 2016-05-15 |   220 |</span><br><span class="line">| 菜鸟教程 | 2016-05-17 |   201 |</span><br><span class="line">| 微博     | 2016-05-15 |    13 |</span><br><span class="line">| Facebook | 2016-05-16 |   545 |</span><br><span class="line">| Facebook | 2016-05-14 |   205 |</span><br><span class="line">+<span class="comment">----------+------------+-------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h1 id="7-希望大家手动敲一遍代码，会收获颇丰！"><a href="#7-希望大家手动敲一遍代码，会收获颇丰！" class="headerlink" title="7 希望大家手动敲一遍代码，会收获颇丰！"></a>7 希望大家手动敲一遍代码，会收获颇丰！</h1><h1 id="8-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#8-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="8.欢迎关注米宝窝，持续更新中，谢谢！"></a>8.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;p&gt;通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。&lt;/p&gt;
&lt;p&gt;通过本人能够掌握：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL 使用JOIN更新表&lt;/li&gt;
&lt;li&gt;MySQL 使用JOIN优化子查询&lt;/li&gt;
&lt;li&gt;MySQL 使用JOIN优化聚合子查询&lt;/li&gt;
&lt;li&gt;MySQL 实现分组选择&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用数据及导入方法见&lt;a href=&quot;MYSQL-SQL开发总结（一）-SQL基础&amp;quot;&amp;quot;&quot;&gt;MYSQL-SQL开发总结（一）-SQL基础&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MYSQL" scheme="http://yoursite.com/categories/MYSQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MYSQL" scheme="http://yoursite.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL-SQL开发总结（一）-SQL基础</title>
    <link href="http://yoursite.com/2018/10/11/MYSQL-SQL%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89-SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/</id>
    <published>2018-10-11T06:57:15.000Z</published>
    <updated>2018-12-06T05:13:04.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><p>通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。</p><p>通过本人能够掌握：</p><ul><li>MySQL UNION</li><li>MySQL 排序</li><li>MySQL 分组</li><li>Mysql 连接的使用</li><li>MySQL 导入数据</li></ul><a id="more"></a><h1 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2.环境准备"></a>2.环境准备</h1><p>本教程的 SQL 在 MySQL 中测试通过。<br>使用基础数据下载地址：<a href="&quot;sql教程&quot; http://www.runoob.com/sql/sql-tutorial.html">sql 教程</a></p><ul><li>本教程使用到的 Websites 表 SQL 文件：websites.sql。</li><li>本教程使用到的 access_log 表 SQL 文件：access_log.sql。</li><li>本教程使用到的 apps 表 SQL 文件：apps.sql。</li><li>Mysql join 使用到的表结构下载地址： <a href="&quot;&quot; http://static.runoob.com/download/runoob-mysql-join-test.sql">runoob-mysql-join-test.sql</a></li><li>mysql 分组使用到的 employee_tbl 表语句如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">NAMES</span> utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`employee_tbl`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee_tbl`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">CHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> DATETIME <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`singin`</span> TINYINT(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span> <span class="keyword">COMMENT</span> <span class="string">'登录次数'</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`employee_tbl`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-22 15:25:33'</span>, <span class="string">'1'</span>), (<span class="string">'2'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-20 15:25:47'</span>, <span class="string">'3'</span>), (<span class="string">'3'</span>, <span class="string">'小丽'</span>, <span class="string">'2016-04-19 15:26:02'</span>, <span class="string">'2'</span>), (<span class="string">'4'</span>, <span class="string">'小王'</span>, <span class="string">'2016-04-07 15:26:14'</span>, <span class="string">'4'</span>), (<span class="string">'5'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-11 15:26:40'</span>, <span class="string">'4'</span>), (<span class="string">'6'</span>, <span class="string">'小明'</span>, <span class="string">'2016-04-04 15:26:54'</span>, <span class="string">'2'</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="2-1-建库准备"><a href="#2-1-建库准备" class="headerlink" title="2.1 建库准备"></a>2.1 建库准备</h2><p>创建数据库，该命令的作用：</p><ul><li>如果数据库不存在则创建，存在则不创建。</li><li>创建RUNOOB数据库，并设定编码集为utf8</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> RUNOOB <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure><h2 id="2-2-导入数据"><a href="#2-2-导入数据" class="headerlink" title="2.2 导入数据"></a>2.2 导入数据</h2><ul><li>通过sqlyog 工具或其他图形化工具的 import功能</li></ul><p><img src="/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/markdown-img-paste-20181011150652348.png" alt="MYSQL库-SQL开发技巧总结-1"></p><ul><li><p>登录mysql cli 执行：source /home/abc/abc.sql;</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use abc;                  # 使用已创建的数据库</span><br><span class="line">mysql&gt; set names utf8;           # 设置编码</span><br><span class="line">mysql&gt; source /home/abc/abc.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure></li><li><p>mysql -uroot -p123456 &lt; runoob.sql</p></li></ul><h1 id="3-开发技巧整理"><a href="#3-开发技巧整理" class="headerlink" title="3 开发技巧整理"></a>3 开发技巧整理</h1><h2 id="3-1-MySQL-排序"><a href="#3-1-MySQL-排序" class="headerlink" title="3.1 MySQL 排序"></a>3.1 MySQL 排序</h2><h3 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM websites ORDER BY country,alexa;</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">| id | name     | url                       | alexa | country |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">|  2 | 淘宝     | https://www.taobao.com/   |    13 | CN      |</span><br><span class="line">|  4 | 微博     | http://weibo.com/         |    20 | CN      |</span><br><span class="line">|  3 | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      |</span><br><span class="line">|  1 | Google   | https://www.google.cm/    |     1 | USA     |</span><br><span class="line">|  5 | Facebook | https://www.facebook.com/ |     3 | USA     |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>ORDER BY 多列的时候，先按照第一个column name排序，在按照第二个column name排序；</p><ul><li>1）、先将country值这一列排序，同为CN的排前面，同属USA的排后面；</li><li>2）、然后在同属CN的这些多行数据中，再根据alexa值的大小排列。</li><li>3）、ORDER BY 排列时，不写明ASC DESC的时候，默认是ASC(升序)。</li></ul><h3 id="多列排序注意事项"><a href="#多列排序注意事项" class="headerlink" title="多列排序注意事项"></a>多列排序注意事项</h3><p> ORDER BY 多列的时候，eg:</p><ul><li>order by A,B        这个时候都是默认按升序排列</li><li>order by A desc,B   这个时候 A 降序，B 升序排列</li><li>order by A ,B desc  这个时候 A 升序，B 降序排列</li></ul><p>即 desc 或者 asc 只对它紧跟着的第一个列名有效，其他不受影响，仍然是默认的升序。</p><h2 id="3-2-MySQL-UNION-操作符"><a href="#3-2-MySQL-UNION-操作符" class="headerlink" title="3.2 MySQL UNION 操作符"></a>3.2 MySQL UNION 操作符</h2><h3 id="3-2-1-MySQL-UNION-语法及注意事项"><a href="#3-2-1-MySQL-UNION-语法及注意事项" class="headerlink" title="3.2.1  MySQL UNION 语法及注意事项"></a>3.2.1  MySQL UNION 语法及注意事项</h3><p><strong> 语法 </strong></p><p>MySQL UNION 操作符语法格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions]</span><br><span class="line">UNION [ALL | DISTINCT]</span><br><span class="line">SELECT expression1, expression2, ... expression_n</span><br><span class="line">FROM tables</span><br><span class="line">[WHERE conditions];</span><br></pre></td></tr></table></figure></p><p><strong> 参数 </strong><br>expression1, expression2, … expression_n: 要检索的列。</p><p>tables: 要检索的数据表。</p><p>WHERE conditions: 可选， 检索条件。</p><p>DISTINCT: 可选，删除结果集中重复的数据。默认情况下 UNION 操作符已经删除了重复数据，所以 DISTINCT 修饰符对结果没啥影响。</p><p>ALL: 可选，返回所有结果集，包含重复数据</p><p><strong> 请注意 </strong> ，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p><h3 id="3-2-2-测试表原始数据（JOIN测试时也需要此表数据演示）"><a href="#3-2-2-测试表原始数据（JOIN测试时也需要此表数据演示）" class="headerlink" title="3.2.2 测试表原始数据（JOIN测试时也需要此表数据演示）"></a>3.2.2 测试表原始数据（JOIN测试时也需要此表数据演示）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM apps;</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">| id | app_name | url                     | country |</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">|  1 | QQ APP   | http://im.qq.com/       | CN      |</span><br><span class="line">|  2 | 微博 APP | http://weibo.com/       | CN      |</span><br><span class="line">|  3 | 淘宝 APP | https://www.taobao.com/ | CN      |</span><br><span class="line">+<span class="comment">----+----------+-------------------------+---------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> websites;</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">| id | name     | url                       | alexa | country |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">|  1 | Google   | https://www.google.cm/    |     1 | USA     |</span><br><span class="line">|  2 | 淘宝     | https://www.taobao.com/   |    13 | CN      |</span><br><span class="line">|  3 | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      |</span><br><span class="line">|  4 | 微博     | http://weibo.com/         |    20 | CN      |</span><br><span class="line">|  5 | Facebook | https://www.facebook.com/ |     3 | USA     |</span><br><span class="line">+<span class="comment">----+----------+---------------------------+-------+---------+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="3-2-3-MySQL-UNION-实例演示"><a href="#3-2-3-MySQL-UNION-实例演示" class="headerlink" title="3.2.3 MySQL UNION 实例演示"></a>3.2.3 MySQL UNION 实例演示</h3><p><strong>  SQL UNION 实例 （无重复数据）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT country,url FROM websites UNION  SELECT country,url FROM apps ORDER BY country ;</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">| country | url                       |</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">| CN      | http://weibo.com/         |</span><br><span class="line">| CN      | http://im.qq.com/         |</span><br><span class="line">| CN      | https://www.taobao.com/   |</span><br><span class="line">| CN      | http://www.runoob.com/    |</span><br><span class="line">| USA     | https://www.facebook.com/ |</span><br><span class="line">| USA     | https://www.google.cm/    |</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong> SQL UNION ALL 实例 （存在重复数据） </strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT country,url FROM websites UNION ALL SELECT country,url FROM apps ORDER BY country ;</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">| country | url                       |</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">| CN      | http://weibo.com/         |</span><br><span class="line">| CN      | http://im.qq.com/         |</span><br><span class="line">| CN      | http://weibo.com/         |</span><br><span class="line">| CN      | https://www.taobao.com/   |</span><br><span class="line">| CN      | https://www.taobao.com/   |</span><br><span class="line">| CN      | http://www.runoob.com/    |</span><br><span class="line">| USA     | https://www.facebook.com/ |</span><br><span class="line">| USA     | https://www.google.cm/    |</span><br><span class="line">+<span class="comment">---------+---------------------------+</span></span><br><span class="line">8 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong> 带有 WHERE 的 SQL UNION ALL </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT country,url FROM websites WHERE country = 'CN' UNION ALL SELECT country,url FROM apps WHERE country = 'CN' ORDER BY country;</span><br><span class="line">+<span class="comment">---------+-------------------------+</span></span><br><span class="line">| country | url                     |</span><br><span class="line">+<span class="comment">---------+-------------------------+</span></span><br><span class="line">| CN      | http://im.qq.com/       |</span><br><span class="line">| CN      | http://weibo.com/       |</span><br><span class="line">| CN      | https://www.taobao.com/ |</span><br><span class="line">| CN      | https://www.taobao.com/ |</span><br><span class="line">| CN      | http://www.runoob.com/  |</span><br><span class="line">| CN      | http://weibo.com/       |</span><br><span class="line">+<span class="comment">---------+-------------------------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-MySQL-分组"><a href="#3-3-MySQL-分组" class="headerlink" title="3.3 MySQL 分组"></a>3.3 MySQL 分组</h2><p><strong> 原始数据 </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM employee_tbl;</span><br><span class="line">+<span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line">| id | name   | date                | singin |</span><br><span class="line">+<span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line">|  1 | 小明 | 2016-04-22 15:25:33 |      1 |</span><br><span class="line">|  2 | 小王 | 2016-04-20 15:25:47 |      3 |</span><br><span class="line">|  3 | 小丽 | 2016-04-19 15:26:02 |      2 |</span><br><span class="line">|  4 | 小王 | 2016-04-07 15:26:14 |      4 |</span><br><span class="line">|  5 | 小明 | 2016-04-11 15:26:40 |      4 |</span><br><span class="line">|  6 | 小明 | 2016-04-04 15:26:54 |      2 |</span><br><span class="line">+<span class="comment">----+--------+---------------------+--------+</span></span><br><span class="line">6 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p><p><strong> GROUP BY 语句将数据表按名字进行分组，并统计每个人有多少条记录,并排序 </strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NAME,COUNT(*) AS count_num FROM employee_tbl GROUP BY NAME ORDER BY count_num DESC ;</span><br><span class="line">+<span class="comment">------+-----------+</span></span><br><span class="line">| NAME | count_num |</span><br><span class="line">+<span class="comment">------+-----------+</span></span><br><span class="line">| 小明 |         3 |</span><br><span class="line">| 小王 |         2 |</span><br><span class="line">| 小丽 |         1 |</span><br><span class="line">+<span class="comment">------+-----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><strong> 使用 WITH ROLLUP </strong></p><p>WITH ROLLUP 可以实现在分组统计数据基础上再进行相同的统计（SUM,AVG,COUNT…）。（目的看谁登录次数最多）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NAME,SUM(singin) AS singin_count FROM employee_tbl GROUP BY NAME WITH ROLLUP;</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| NAME | singin_count |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| 小丽 |            2 |</span><br><span class="line">| 小明 |            7 |</span><br><span class="line">| 小王 |            7 |</span><br><span class="line">| NULL |           16 |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>其中记录 NULL 表示所有人的登录次数。我们可以使用 coalesce 来设置一个可以取代 NUll 的名称，coalesce 语法：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">coalesce</span>(a,b,c);</span><br><span class="line">参数说明：如果a==null,则选择b；如果b==null,则选择c；如果a!=null,则选择a；如果a b c 都为null ，则返回为null（没意义）。</span><br></pre></td></tr></table></figure></p><p>以下实例中如果名字为空我们使用总数代替：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT COALESCE(NAME,'总数'),SUM(singin) FROM employee_tbl GROUP BY NAME WITH ROLLUP;</span><br><span class="line">+<span class="comment">-----------------------+-------------+</span></span><br><span class="line">| COALESCE(NAME,'总数') | SUM(singin) |</span><br><span class="line">+<span class="comment">-----------------------+-------------+</span></span><br><span class="line">| 小丽                  |           2 |</span><br><span class="line">| 小明                  |           7 |</span><br><span class="line">| 小王                  |           7 |</span><br><span class="line">| 总数                  |          16 |</span><br><span class="line">+<span class="comment">-----------------------+-------------+</span></span><br><span class="line">4 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><strong> 注意事项 </strong></p><p>1、group by 可以实现一个最简单的去重查询，假设想看下有哪些员工，除了用 distinct,还可以用：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span> <span class="keyword">FROM</span> employee_tb1 <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">name</span>;返回的结果集就是所有员工的名字。</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">NAME</span> <span class="keyword">FROM</span> employee_tbl;</span><br></pre></td></tr></table></figure></p><p><strong> 哪种效率更高呢？&lt;做过对比测试的兄弟希望能给出你的建议&gt; </strong></p><p>2、分组后的条件使用 HAVING 来限定，WHERE 是对原始数据进行条件限制。几个关键字的使用顺序为 where 、group by 、having、order by ，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT NAME,SUM(singin) AS singin_count FROM employee_tbl WHERE id &lt;&gt;  1 GROUP BY NAME HAVING singin_count &gt; 5 ORDER BY singin_count DESC ;</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| NAME | singin_count |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">| 小王 |            7 |</span><br><span class="line">| 小明 |            6 |</span><br><span class="line">+<span class="comment">------+--------------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-MySQL-连接JOIN"><a href="#3-4-MySQL-连接JOIN" class="headerlink" title="3.4 MySQL 连接JOIN"></a>3.4 MySQL 连接JOIN</h2><p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p><h3 id="3-4-1-内连接"><a href="#3-4-1-内连接" class="headerlink" title="3.4.1 内连接"></a>3.4.1 内连接</h3><p><strong>  INNER JOIN  </strong></p><p>INNER JOIN：如果表中有至少一个匹配，则返回行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.country ,a.app_name ,a.url,b.country ,b.name,b.alexa FROM apps a INNER JOIN websites b  ON a.country = b.country;</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| country | app_name | url                     | country | name     | alexa |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 微博     |    20 |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">9 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/markdown-img-paste-20181012172705947.png" alt="MYSQL库-SQL开发技巧总结-1"></p><h3 id="3-4-1-外连接"><a href="#3-4-1-外连接" class="headerlink" title="3.4.1  外连接"></a>3.4.1  外连接</h3><p><strong> LEFT JOIN  </strong></p><p>LEFT JOIN：即使右表中没有匹配，也从左表返回所有的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.country ,a.NAME ,a.url,a.alexa,b.country ,b.app_name FROM websites a LEFT JOIN apps b  ON a.country = b.country;</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+---------+----------+</span></span><br><span class="line">| country | NAME     | url                       | alexa | country | app_name |</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+---------+----------+</span></span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   |    13 | CN      | QQ APP   |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      | QQ APP   |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         |    20 | CN      | QQ APP   |</span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   |    13 | CN      | 微博 APP |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      | 微博 APP |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         |    20 | CN      | 微博 APP |</span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   |    13 | CN      | 淘宝 APP |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    |  4689 | CN      | 淘宝 APP |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         |    20 | CN      | 淘宝 APP |</span><br><span class="line">| USA     | Google   | https://www.google.cm/    |     1 | NULL    | NULL     |</span><br><span class="line">| USA     | Facebook | https://www.facebook.com/ |     3 | NULL    | NULL     |</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+---------+----------+</span></span><br><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/markdown-img-paste-20181012175954274.png" alt="MYSQL库-SQL开发技巧总结-2"></p><p><strong> RIGHT JOIN  </strong></p><p>RIGHT JOIN：即使左表中没有匹配，也从右表返回所有的行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.country ,a.app_name ,a.url,b.country ,b.name,b.alexa FROM apps a RIGHT JOIN websites b  ON a.country = b.country;</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| country | app_name | url                     | country | name     | alexa |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 微博     |    20 |</span><br><span class="line">| NULL    | NULL     | NULL                    | USA     | Google   |     1 |</span><br><span class="line">| NULL    | NULL     | NULL                    | USA     | Facebook |     3 |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">11 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/markdown-img-paste-20181012175922254.png" alt="MYSQL库-SQL开发技巧总结-3"></p><p><strong> FULL JOIN  </strong></p><p>FULL OUTER JOIN 关键字只要左表（table1）和右表（table2）其中一个表中存在匹配，则返回行.</p><p>FULL OUTER JOIN 关键字结合了 LEFT JOIN 和 RIGHT JOIN 的结果。</p><p>MySQL 中不支持Full JOIN 连接，错误如下:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.country ,a.app_name ,a.url,b.country ,b.name FROM apps a  FULL JOIN websites b  ON a.country = b.country;</span><br><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; <span class="keyword">check</span> the <span class="keyword">manual</span> that corresponds <span class="keyword">to</span> your MySQL <span class="keyword">server</span> <span class="keyword">version</span> <span class="keyword">for</span> the <span class="keyword">right</span> syntax <span class="keyword">to</span> <span class="keyword">use</span> near <span class="string">'FULL JOIN websites b  ON a.country = b.country'</span> <span class="keyword">at</span> line <span class="number">1</span></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></p><p>技巧1 （使MYSQL 支持Full JOIN ，通过UNION ALL 代替:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.country ,a.NAME ,a.url,a.alexa,b.country ,b.app_name <span class="keyword">FROM</span> websites a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> apps b  <span class="keyword">ON</span> a.country = b.country</span><br><span class="line"><span class="keyword">UNION</span> ALL</span><br><span class="line"><span class="keyword">SELECT</span> a.country ,a.app_name ,a.url,b.country ,b.name,b.alexa <span class="keyword">FROM</span> apps a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> websites b  <span class="keyword">ON</span> a.country = b.country</span><br></pre></td></tr></table></figure></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; SELECT a.country ,a.NAME ,a.url,a.alexa,b.country ,b.app_name FROM websites a LEFT JOIN apps b  ON a.country = b.country</span><br><span class="line">    -&gt; UNION ALL</span><br><span class="line">    -&gt; SELECT a.country ,a.app_name ,a.url,b.country ,b.name,b.alexa FROM apps a RIGHT JOIN websites b  ON a.country = b.country;</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+----------+----------+</span></span><br><span class="line">| country | NAME     | url                       | alexa | country  | app_name |</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+----------+----------+</span></span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   | 13    | CN       | QQ APP   |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    | 4689  | CN       | QQ APP   |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         | 20    | CN       | QQ APP   |</span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   | 13    | CN       | 微博 APP |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    | 4689  | CN       | 微博 APP |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         | 20    | CN       | 微博 APP |</span><br><span class="line">| CN      | 淘宝     | https://www.taobao.com/   | 13    | CN       | 淘宝 APP |</span><br><span class="line">| CN      | 菜鸟教程 | http://www.runoob.com/    | 4689  | CN       | 淘宝 APP |</span><br><span class="line">| CN      | 微博     | http://weibo.com/         | 20    | CN       | 淘宝 APP |</span><br><span class="line">| USA     | Google   | https://www.google.cm/    | 1     | NULL     | NULL     |</span><br><span class="line">| USA     | Facebook | https://www.facebook.com/ | 3     | NULL     | NULL     |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/         | CN    | 淘宝     | 13       |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/         | CN    | 菜鸟教程 | 4689     |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/         | CN    | 微博     | 20       |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/         | CN    | 淘宝     | 13       |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/         | CN    | 菜鸟教程 | 4689     |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/         | CN    | 微博     | 20       |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/   | CN    | 淘宝     | 13       |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/   | CN    | 菜鸟教程 | 4689     |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/   | CN    | 微博     | 20       |</span><br><span class="line">| NULL    | NULL     | NULL                      | USA   | Google   | 1        |</span><br><span class="line">| NULL    | NULL     | NULL                      | USA   | Facebook | 3        |</span><br><span class="line">+<span class="comment">---------+----------+---------------------------+-------+----------+----------+</span></span><br><span class="line">22 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p><img src="/2018/10/11/MYSQL-SQL开发总结（一）-SQL基础/markdown-img-paste-20181014220313147.png" alt="MYSQL库-SQL开发技巧总结-4"></p><p><strong> 关键字 on  </strong></p><p>数据库在通过连接两张或多张表来返回记录时，都会生成一张中间的临时表，然后再将这张临时表返回给用户。</p><p>在使用 left jion 时，on 和 where 条件的区别如下：</p><p>1、 on 条件是在生成临时表时使用的条件，它不管 on 中的条件是否为真，都会返回左边表中的记录。<br>2、where 条件是在临时表生成好后，再对临时表进行过滤的条件。这时已经没有 left join 的含义（必须返回左边表的记录）了，条件不为真的就全部过滤掉。</p><p><a href="&quot;&quot; x" title="http://www.runoob.com/w3cnote/sql-join-the-different-of-on-and-where.html">SQL JOIN 中 on 与 where 的区别</a></p><h3 id="3-4-1-Cross-交叉连接"><a href="#3-4-1-Cross-交叉连接" class="headerlink" title="3.4.1 Cross 交叉连接"></a>3.4.1 Cross 交叉连接</h3><p><strong> CROSS JOIN  </strong></p><p>把表A和表B的数据进行一个N*M的组合，即笛卡尔积。如本例会产生3x5=15条记录，在开发过程中我们肯定是要过滤数据，所以这种很少用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT a.country ,a.app_name ,a.url,b.country ,b.name,b.alexa FROM apps a  CROSS JOIN websites b ;</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| country | app_name | url                     | country | name     | alexa |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | USA     | Google   |     1 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | USA     | Google   |     1 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | USA     | Google   |     1 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 淘宝     |    13 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 菜鸟教程 |  4689 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | CN      | 微博     |    20 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | CN      | 微博     |    20 |</span><br><span class="line">| CN      | QQ APP   | http://im.qq.com/       | USA     | Facebook |     3 |</span><br><span class="line">| CN      | 微博 APP | http://weibo.com/       | USA     | Facebook |     3 |</span><br><span class="line">| CN      | 淘宝 APP | https://www.taobao.com/ | USA     | Facebook |     3 |</span><br><span class="line">+<span class="comment">---------+----------+-------------------------+---------+----------+-------+</span></span><br><span class="line">15 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h1 id="4-参考借鉴"><a href="#4-参考借鉴" class="headerlink" title="4 参考借鉴"></a>4 参考借鉴</h1><p><a href="&quot;http://www.runoob.com/mysql/mysql-join.html&quot;">菜鸟教程mysql</a></p><h1 id="5-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#5-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="5.欢迎关注米宝窝，持续更新中，谢谢！"></a>5.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;p&gt;通过本文可以了解在使用mysql数据库开发时，一些开发技巧。本文比较基础，大神请绕道。&lt;/p&gt;
&lt;p&gt;通过本人能够掌握：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL UNION&lt;/li&gt;
&lt;li&gt;MySQL 排序&lt;/li&gt;
&lt;li&gt;MySQL 分组&lt;/li&gt;
&lt;li&gt;Mysql 连接的使用&lt;/li&gt;
&lt;li&gt;MySQL 导入数据&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="MYSQL" scheme="http://yoursite.com/categories/MYSQL/"/>
    
    
      <category term="SQL" scheme="http://yoursite.com/tags/SQL/"/>
    
      <category term="MYSQL" scheme="http://yoursite.com/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>WebLogic Java反序列化漏洞终极建议</title>
    <link href="http://yoursite.com/2018/09/25/WebLogic-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%BB%88%E6%9E%81%E5%BB%BA%E8%AE%AE/"/>
    <id>http://yoursite.com/2018/09/25/WebLogic-Java反序列化漏洞终极建议/</id>
    <published>2018-09-25T01:27:33.000Z</published>
    <updated>2018-09-25T05:07:02.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-概述："><a href="#0-概述：" class="headerlink" title="0. 概述："></a>0. 概述：</h1><p>本文针对这几年来WebLogic软件经常报出的java反序列化漏洞问题进行总结，其他中间件软件本文暂不讨论。内容主要涵盖客户最关心的一些问题、工程师打补丁时需要注意事项。</p><h1 id="1-序列化与反序列化介绍"><a href="#1-序列化与反序列化介绍" class="headerlink" title="1. 序列化与反序列化介绍"></a>1. 序列化与反序列化介绍</h1><p>Java 序列化与反序列化</p><ul><li>Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream类的 writeObject() 方法可以实现序列化。</li><li>Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 readObject() 方法用于反序列化。</li></ul><p><img src="/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925111252598.png" alt="WebLogic Java反序列化漏洞终极建议-2"></p><p>序列化与反序列化是让 Java 对象脱离 Java 运行环境的一种手段，可以有效的实现多平台之间的通信、对象持久化存储。主要应用在以下场景：</p><a id="more"></a><p><strong> HTTP： </strong> 多平台之间的通信，管理等</p><p><strong> RMI：</strong> 是 Java 的一组拥护开发分布式应用程序的 API，实现了不同操作系统之间程序的方法调用。值得注意的是，RMI 的传输 100% 基于反序列化，Java RMI 的默认端口是 1099 端口。</p><p><strong> JMX：</strong> JMX 是一套标准的代理和服务，用户可以在任何 Java 应用程序中使用这些代理和服务实现管理,中间件软件 WebLogic 的管理页面就是基于 JMX 开发的，而 JBoss 则整个系统都基于 JMX 构架。 ​</p><p>2016年Spring RMI反序列化漏洞今年比较出名的：Jackson，FastJson<br>Java 十分受开发者喜爱的一点是其拥有完善的第三方类库，和满足各种需求的框架；但正因为很多第三方类库引用广泛，如果其中某些组件出现安全问题，那么受影响范围将极为广泛。</p><h1 id="2-Java反序列化漏洞与Weblogic反序列化漏洞介绍"><a href="#2-Java反序列化漏洞与Weblogic反序列化漏洞介绍" class="headerlink" title="2. Java反序列化漏洞与Weblogic反序列化漏洞介绍"></a>2. Java反序列化漏洞与Weblogic反序列化漏洞介绍</h1><h2 id="2-1-Java反序列化漏洞历史"><a href="#2-1-Java反序列化漏洞历史" class="headerlink" title="2.1 Java反序列化漏洞历史"></a>2.1 Java反序列化漏洞历史</h2><p>最为出名的大概应该是：15年的Apache Commons Collections 反序列化远程命令执行漏洞，其当初影响范围包括：WebSphere、JBoss、Jenkins、WebLogic 和 OpenNMSd等。</p><p>Apache Commons Collections 3和4，Groovy，Spring，只要目标应用的Class Path中包含这些库，可让readObject()实现任意命令执行。影响比较广泛的就是Apache Commons Collections这个库，中间件基本都会涉及使用此库。</p><h2 id="2-2-Weblogic-Java反序列化漏洞介绍"><a href="#2-2-Weblogic-Java反序列化漏洞介绍" class="headerlink" title="2.2 Weblogic Java反序列化漏洞介绍"></a>2.2 Weblogic Java反序列化漏洞介绍</h2><p>因为weblogic底层也使用Apache Commons Collections库，WebLogic 存在Java反序列化漏洞无疑的。不过在漏洞修复这方面，Oracle可是不走心啊。正所谓，新三年，旧三年，缝缝补补又三年，还是未修完。以下是基于Weblogic t3协议引起远程代码执行的反序列化漏洞统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CVE-2015-4852</span><br><span class="line"></span><br><span class="line">CVE-2016-0638</span><br><span class="line"></span><br><span class="line">CVE-2016-3510</span><br><span class="line"></span><br><span class="line">CVE-2017-3248</span><br><span class="line"></span><br><span class="line">CVE-2018-2628</span><br></pre></td></tr></table></figure></p><p>从2015年一直修到2018年，反复修，反复被绕过，基于t3协议的Java反序列化漏洞还在继续。</p><p>问：那么为什么Java反序列化漏洞为什么波及范围如此广泛？Weblogic 的java反序列化漏洞未来可能还是会存在吗？</p><p> 答： （1）因为Apache Commons Collections 这个库使用太广泛了，市面主流中间件、Spring、fastjson 等都使用这个库。</p><p> （2）Oracle的Weblogic补丁是采用黑名单的方式过滤危险的反序列化类 ，每次新出现一种漏洞就提供一个新的黑名单，这种方式极不安全的。 一旦黑客发现新的漏洞，绕过这个黑名单就能攻击。详细原因请开大神分析</p><p>原因就在下文链接中：</p><p><a href="https://paper.seebug.org/333/" target="_blank" rel="noopener">https://paper.seebug.org/333/</a></p><p><a href="http://blog.knownsec.com/2018/04/weblogic-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Ecve-2018-2628%E6%BC%AB%E8%B0%88/" target="_blank" rel="noopener">Weblogic 反序列化漏洞(CVE-2018-2628)漫谈</a></p><h1 id="3-Weblogic-Java-反序列化客户关心的几个问题"><a href="#3-Weblogic-Java-反序列化客户关心的几个问题" class="headerlink" title="3.Weblogic Java 反序列化客户关心的几个问题?"></a>3.Weblogic Java 反序列化客户关心的几个问题?</h1><h2 id="3-1-客户关心的：t3协议是否默认开启？"><a href="#3-1-客户关心的：t3协议是否默认开启？" class="headerlink" title="3.1 客户关心的：t3协议是否默认开启？"></a>3.1 客户关心的：t3协议是否默认开启？</h2><p> 问题 ：大多数WebLogic反序列化漏洞主要是针对T3协议，我们默认是否已经启用此协议？通过什么方法确认？</p><p>  答 ：t3协议默认都是开启的，t3协议是非常重要的WebLogic内部的通讯协议。</p><h2 id="3-2-客户关心的：关于配置t3协议过滤器相关问题"><a href="#3-2-客户关心的：关于配置t3协议过滤器相关问题" class="headerlink" title="3.2 客户关心的：关于配置t3协议过滤器相关问题"></a>3.2 客户关心的：关于配置t3协议过滤器相关问题</h2><p>因为基本都是基于t3协议造成的Java反序列化问题，且Oracle提供的补丁集合无法完全解决java反序列化问题，官方提供一种临时解决办法就是过滤T3协议，即WebLogicServer 提供了名为weblogic.security.net.ConnectionFilterImpl 的默认连接筛选器，在此连接筛选器上添加过滤规则过滤连接。如果参考 <a href="http://www.sohu.com/a/241934306_465935" target="_blank" rel="noopener">http://www.sohu.com/a/241934306_465935</a> ，是否起到防护作用，文中配置方式是否正确？</p><h3 id="3-2-1-t3过滤器是否起到防护作用？"><a href="#3-2-1-t3过滤器是否起到防护作用？" class="headerlink" title="3.2.1 t3过滤器是否起到防护作用？"></a>3.2.1 t3过滤器是否起到防护作用？</h3><p> 问题：临时方案是否一定程度的起到预防的作用</p><p>  答：临时方案在一定程度的起到预防的作用。</p><h3 id="3-2-1-能否禁用所有t3协议？"><a href="#3-2-1-能否禁用所有t3协议？" class="headerlink" title="3.2.1 能否禁用所有t3协议？"></a>3.2.1 能否禁用所有t3协议？</h3><p>问题 ：能否禁用所有t3协议？</p><p><strong> 下文配置方式是错误的配置方式 </strong></p><p><img src="/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925095114461.png" alt="WebLogic Java反序列化漏洞终极建议-1"></p><p>答：文中提到的方法是错误的方法。文中提到：筛选规则填取：<em> </em> 7001 deny t3 t3s ，此种规则相当于禁用了t3 协议。禁用后会影响到使用t3协议启动的受管节点，WLST监控脚本、停止脚本…等等。</p><h1 id="4-Weblogic-Java-反序列化问题最终建议"><a href="#4-Weblogic-Java-反序列化问题最终建议" class="headerlink" title="4 Weblogic Java 反序列化问题最终建议"></a>4 Weblogic Java 反序列化问题最终建议</h1><h2 id="4-1-针对10-3-6-及以上版本建议"><a href="#4-1-针对10-3-6-及以上版本建议" class="headerlink" title="4.1 针对10.3.6 及以上版本建议"></a>4.1 针对10.3.6 及以上版本建议</h2><ul><li><p>（1）Oracle每个季度都会更新补丁集合，这个补丁集合不仅包含软件的安全漏洞修复而且包含软件的功能漏洞修复。所以不管怎样，即使没有完全解决反序列化漏洞，打补丁还是很有必要的。至于修复了哪些漏洞建议查bugsfixed 列表</p></li><li><p>（2）推荐Configure Weblogic Connection Filters<br>思路：需要禁用t3协议，但是不能禁死，对于受管节点或有需求的特定节点，需要放开限制。见4.3 、4.4</p></li></ul><p>参考官方doc链接（这两篇文档需要买了Oracle服务才可以下载）：<br>Steps to Configure Weblogic Connection Filters ( Doc ID 1508748.1 )</p><p>Connection-filter Rules To Allow Few Ips To Access One Port And To Allow All Ips To Access Another Port ( Doc ID 1494692.1 )</p><p>参考官方Doc链接：<br><a href="http://download.oracle.com/docs/cd/E12839_01/web.1111/e13711/con_filtr.htm#i1029357" target="_blank" rel="noopener">http://download.oracle.com/docs/cd/E12839_01/web.1111/e13711/con_filtr.htm#i1029357</a></p><ul><li><p>（3）针对bsu升级工具的weblogic版本，建议先升级补丁工具，否则检查冲突时间过程<br>WLS BSU (Smart Update) Takes Very Long Time to Apply Patches - Especially When Checking for Patch Conflicts (文档 ID 2271366.1)<br>下载补丁集合p25153061_1036_Generic.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">补丁工具升级</span><br><span class="line">#cd /home/cfmmc/Oracle/Middleware/utils/bsu/</span><br><span class="line">#unzip p25153061_1036_Generic.zip  </span><br><span class="line"># . ./bsu_fix.sh install</span><br><span class="line">回滚</span><br><span class="line"># . ./bsu_fix.sh rollback</span><br></pre></td></tr></table></figure></li><li><p>（4）调整bsu.sh 或bsu.cmd 内存，防止内容溢出<br>WL_HOME/utils/bsu 目录，vi bsu.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"$JAVA_HOME/bin/java" -Xms2048m -Xmx2048m -jar patch-client.jar $*</span><br></pre></td></tr></table></figure></li><li><p>（5）注意事项</p></li></ul><p>注意事项：临时方案存在一定风险，需要在测试环境严格实测，一旦禁用规则配置错误，可能会导致生产系统启动或调用失败。故内网环境酌情考虑，外网环境系统建议配置。</p><h2 id="4-2-针对weblogic-1036以下版本解决建议"><a href="#4-2-针对weblogic-1036以下版本解决建议" class="headerlink" title="4.2 针对weblogic 1036以下版本解决建议"></a>4.2 针对weblogic 1036以下版本解决建议</h2><p>按照oracle官网所说8和9、10版本没有反序列漏洞，但是实际中，如果在应用中含’<em>commons.collections</em>’的jar包，还是会在安全软件中扫描出反序列化漏洞。</p><p><strong> 非官方 </strong> 的修复方式有如下两种方法：</p><ul><li>(1)下载Apache官方最新的commons-collections包，替换有漏洞的commons-collections组件<br>地址：<a href="http://commons.apache.org/proper/commons-collections/download_collections.cgi" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-collections/download_collections.cgi</a></li></ul><ul><li>(2)调整应用程序，使用SerialKiller类包替换进行反序列化操作的ObjectInputStream类。<br>下载jar包和实施步骤请参考链接：<a href="https://github.com/ikkisoft/SerialKiller" target="_blank" rel="noopener">https://github.com/ikkisoft/SerialKiller</a></li></ul><p><strong> 题外话：不过运维人员还是不要背这颗雷吧，生产环境复杂，真出了事故我们付不起责任，更何况国企的企业政治复杂，就别把自己置于水火之中了。我们只提供建议，让甲方人员决定吧！ </strong></p><h2 id="4-3-Connection-Filters规则示例及解读"><a href="#4-3-Connection-Filters规则示例及解读" class="headerlink" title="4.3 Connection Filters规则示例及解读"></a>4.3 Connection Filters规则示例及解读</h2><p>一般写法示例（第二、第三个域用*号代替，意在简化配置，用户可根据自己的需要进行精准的控制，必须填写端口信息）：</p><p>127.0.0.1  <em>  </em>  allow</p><p>10.1.34.205  <em>  </em>  allow</p><p>10.156.0.57/255.255.255.0  <em>  </em>  allow 或 10.156.0.57/24  <em>  </em>  allow</p><p>0.0.0.0/0  <em>  </em>  deny t3 t3s</p><p>解读<br>第一条（127.0.0.1  <em> </em> allow）表示允许本机回环地址所有协议的连接<br>第二条（10.10.5.68 <em> </em> allow）表示允许来自10.10.5.68地址任何协议的访问请求<br>第三条（10.10.3.0/255.255.255.0  <em> </em> allow）表示允许10.10.3.0网段所有协议的连接，<br>最后一条（0.0.0.0/0 <em> </em> denyt3 t3s）表示禁止除上面三条规则以外所有IP地址或网段t3、t3s协议的连接。</p><h2 id="4-4-Connection-Filters规则示例2"><a href="#4-4-Connection-Filters规则示例2" class="headerlink" title="4.4 Connection Filters规则示例2"></a>4.4 Connection Filters规则示例2</h2><p><strong> 目标 </strong></p><p>The Admin server is running on port 8001 and the application is deployed on Managed<br>server, on port 7001<br>The purpose is that only 4 IPs should be able to access the console and no one else<br>should be allowed to access the console but all the IPs, internal or external, should have<br>access on the application</p><p><strong> 错误配置 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10.1.34.205 * 8001 allow</span><br><span class="line">10.156.0.57 * 8001 allow</span><br><span class="line">10.156.0.58 * 8001 allow</span><br><span class="line">0.0.0.0/0 * 7001 allow</span><br><span class="line">0.0.0.0/0 * * deny</span><br></pre></td></tr></table></figure></p><p><strong> 正确配置 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.1.34.205 * 8001 allow</span><br><span class="line">10.156.0.57 * 8001 allow</span><br><span class="line">10.156.0.58 * 8001 allow</span><br><span class="line">* * 8001 deny</span><br></pre></td></tr></table></figure></p><p>Make use of * instead of 0 (0.0.0.0/0)</p><p>“The default connection filter implementation interprets a target address of 0 (0.0.0.0/0)<br>as meaning “the rule should apply to all IP addresses.”By design, the default filter does<br>not evaluate the port or the local address, just the action. To clearly specify restrictions<br>when using the default filter, modify the rules.<br>Another option is to implement a custom connection filter.</p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h1><p><a href="http://www.enmotech.com:8089/web/detail/1/482/2.html" target="_blank" rel="noopener">田东云 -【无效的安全补丁】说说WebLogic那修不完的Java反序列化漏洞</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzYyNDQxNg==&amp;mid=2247484322&amp;idx=1&amp;sn=e881fbfa51c666b2f26ea096ba50301b&amp;chksm=eb213faddc56b6bb381a8e93c495d0b6e89e0e9ed97a02dbddc7a85b61f137b9b596749df78b&amp;mpshare=1&amp;scene=1&amp;srcid=1023bVsbAOqQ4o9XI9r2qWEM#rd" target="_blank" rel="noopener">王德富 -Weblogic之反序列化高危漏洞</a></p><h1 id="6-其他博文"><a href="#6-其他博文" class="headerlink" title="6.其他博文"></a>6.其他博文</h1><p><a href="https://blog.csdn.net/zhouleiblog/article/details/50454925" target="_blank" rel="noopener">CVE-2015-4852 java 反序列化漏洞–weblogic补丁</a></p><h1 id="7-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#7-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="7.欢迎关注米宝窝，持续更新中，谢谢！"></a>7.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-概述：&quot;&gt;&lt;a href=&quot;#0-概述：&quot; class=&quot;headerlink&quot; title=&quot;0. 概述：&quot;&gt;&lt;/a&gt;0. 概述：&lt;/h1&gt;&lt;p&gt;本文针对这几年来WebLogic软件经常报出的java反序列化漏洞问题进行总结，其他中间件软件本文暂不讨论。内容主要涵盖客户最关心的一些问题、工程师打补丁时需要注意事项。&lt;/p&gt;
&lt;h1 id=&quot;1-序列化与反序列化介绍&quot;&gt;&lt;a href=&quot;#1-序列化与反序列化介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 序列化与反序列化介绍&quot;&gt;&lt;/a&gt;1. 序列化与反序列化介绍&lt;/h1&gt;&lt;p&gt;Java 序列化与反序列化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream类的 writeObject() 方法可以实现序列化。&lt;/li&gt;
&lt;li&gt;Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 readObject() 方法用于反序列化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925111252598.png&quot; alt=&quot;WebLogic Java反序列化漏洞终极建议-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;序列化与反序列化是让 Java 对象脱离 Java 运行环境的一种手段，可以有效的实现多平台之间的通信、对象持久化存储。主要应用在以下场景：&lt;/p&gt;
    
    </summary>
    
      <category term="WebLogic" scheme="http://yoursite.com/categories/WebLogic/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="http://yoursite.com/tags/WebLogic/"/>
    
      <category term="Java 反序列化" scheme="http://yoursite.com/tags/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>架构师不得不知的Spring事务不能回滚的深层次原因</title>
    <link href="http://yoursite.com/2018/09/18/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E7%9A%84Spring%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E5%9B%9E%E6%BB%9A%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/</id>
    <published>2018-09-18T09:19:20.000Z</published>
    <updated>2018-09-25T00:38:06.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><ul><li>本文汇总了常见Spring事务无法回滚的问题，并配合实际案例模拟，并给出解决方案。通过本文可以更加详细的了解Spring事务无法回滚的原因。</li><li>希望大家手动敲一遍代码，会收获颇丰。</li></ul><a id="more"></a><h1 id="2-测试环境信息"><a href="#2-测试环境信息" class="headerlink" title="2.测试环境信息"></a>2.测试环境信息</h1><p><strong> 核心jar版本 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-web-4.1.7.RELEASE.jar</span><br><span class="line">spring-core-4.1.7.RELEASE.jar</span><br><span class="line">spring-jdbc-4.1.7.RELEASE.jar</span><br><span class="line">mybatis-spring-1.3.1.jar</span><br><span class="line">mybatis-3.4.6.jar</span><br><span class="line">ojdbc6-6.0.jar</span><br><span class="line">junit-4.11.jar</span><br></pre></td></tr></table></figure></p><h1 id="3-try-catch-非RuntimeException-导致回滚失败"><a href="#3-try-catch-非RuntimeException-导致回滚失败" class="headerlink" title="3.try{}catch{非RuntimeException} 导致回滚失败"></a>3.try{}catch{非RuntimeException} 导致回滚失败</h1><h2 id="3-1-测试场景"><a href="#3-1-测试场景" class="headerlink" title="3.1 测试场景"></a>3.1 测试场景</h2><p>模拟从中国农业银行（abcBank）张三账户转账给工商银行（icbcBank）李四账户200元。两个账户初始账户金额都为1000：</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-20180919105357114.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-20180919105357114.png"></p><h2 id="3-2-测试代码"><a href="#3-2-测试代码" class="headerlink" title="3.2 测试代码"></a>3.2 测试代码</h2><p>测试入口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferAccountsFromZsABCBankToLsICBCBankRuntimeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test开始转账........."</span>);</span><br><span class="line">    <span class="keyword">int</span> success = transferAccountsService.transferAccountRuntimeException(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="number">200</span>);</span><br><span class="line">    System.out.println(<span class="string">"test转账业务完成  and success = "</span> + success + <span class="string">"........."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>transferAccountsService （service层代码）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">           abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">           <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;  <span class="comment">//模拟出现异常</span></span><br><span class="line">           icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">           success = <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           success = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> success;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-测试结果"><a href="#3-3-测试结果" class="headerlink" title="3.3 测试结果"></a>3.3 测试结果</h2><p>张三取钱成功，李四存钱失败。钱转丢了！！！但是Spring事务并未回滚</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-2018091910593830.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-2018091910593830.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">test开始转账.........</span><br><span class="line">2018-09-19 10:58:15,998 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;txManager&apos;</span><br><span class="line">2018-09-19 10:58:15,999 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;transactionManager&apos;</span><br><span class="line">2018-09-19 10:58:16,079 org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:367) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Creating new transaction with name [com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRuntimeException]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">2018-09-19 10:58:29,487 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:206) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Acquired Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] for JDBC transaction</span><br><span class="line">2018-09-19 10:58:29,555 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:223) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Switching JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] to manual commit</span><br><span class="line">transferAccountRuntimeException 开始转账业务------------------------</span><br><span class="line">transferAccountRuntimeException 张三开始取钱------------------------</span><br><span class="line">2018-09-19 10:58:29,642 org.mybatis.spring.SqlSessionUtils.getSqlSession(SqlSessionUtils.java:97) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Creating a new SqlSession</span><br><span class="line">2018-09-19 10:58:29,723 org.mybatis.spring.SqlSessionUtils.registerSessionHolder(SqlSessionUtils.java:128) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:30,802 org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:87) org.mybatis.spring.transaction.SpringManagedTransaction</span><br><span class="line">DEBUG: JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] will be managed by Spring</span><br><span class="line">2018-09-19 10:58:30,855 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ABC_USER SET money = money - 200.0 WHERE username = ?</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRuntimeException(TransferAccountsServiceImpl.java:93)</span><br><span class="line">  ...</span><br><span class="line">at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)</span><br><span class="line">at com.sun.proxy.$Proxy21.transferAccountRuntimeException(Unknown Source)</span><br><span class="line">at tansferAccountTest.SpringTransactionTest.testTransferAccountsFromZsABCBankToLsICBCBankRuntimeException(SpringTransactionTest.java:62)</span><br><span class="line">  ....</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">2018-09-19 10:58:32,027 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: zhangsan(String)</span><br><span class="line">2018-09-19 10:58:32,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 10:58:32,040 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">transferAccountRuntimeException 李四开始存钱------------------------</span><br><span class="line">2018-09-19 10:58:32,049 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCommit(SqlSessionUtils.java:284) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,050 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:310) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,051 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:315) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,051 org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Initiating transaction commit</span><br><span class="line">2018-09-19 10:58:32,052 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:269) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Committing JDBC transaction on Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver]</span><br><span class="line">2018-09-19 10:58:32,059 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCleanupAfterCompletion(DataSourceTransactionManager.java:327) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Releasing JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] after transaction</span><br><span class="line">2018-09-19 10:58:32,060 org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection(DataSourceUtils.java:327) org.springframework.jdbc.datasource.DataSourceUtils</span><br><span class="line">DEBUG: Returning JDBC Connection to DataSource</span><br><span class="line">test转账业务完成  and success = 0.........</span><br></pre></td></tr></table></figure><h2 id="3-4-回滚失败原因"><a href="#3-4-回滚失败原因" class="headerlink" title="3.4 回滚失败原因"></a>3.4 回滚失败原因</h2><p>Spring的事务管理默认对Error异常和RuntimeException异常以及其子类进行事务回滚，且必须抛出异常，若使用try-catch对其异常捕获则不会进行回滚！（Error异常和RuntimeException异常抛出时不需要方法调用throws或try-catch语句）；</p><p>以下是spring-tx-4.1.7.RELEASE.jar包中的部分源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttribute</span> <span class="keyword">extends</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getQualifier</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable var1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.transaction.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTransactionAttribute</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span> <span class="keyword">implements</span> <span class="title">TransactionAttribute</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String qualifier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ex <span class="keyword">instanceof</span> RuntimeException || ex <span class="keyword">instanceof</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-5-回滚失败解决办法"><a href="#3-5-回滚失败解决办法" class="headerlink" title="3.5 回滚失败解决办法"></a>3.5 回滚失败解决办法</h2><p>以下三种方式都可以解决try{}catch{非RuntimeException} 造成事务不回滚的问题<br>（1）  throw new RuntimeException();<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">           abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">           <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">           icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">           success = <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           success = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> success;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>（2）配置 rollbackFor = Exception.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">          abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">          <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">          icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">          success = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          success = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> success;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>（3）手动回滚事务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountSetRollbackOnly</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">            abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">            success = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            success = <span class="number">0</span>;</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-this调用导致回滚失败"><a href="#4-this调用导致回滚失败" class="headerlink" title="4.this调用导致回滚失败"></a>4.this调用导致回滚失败</h1><h2 id="4-1-测试场景"><a href="#4-1-测试场景" class="headerlink" title="4.1 测试场景"></a>4.1 测试场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> username1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> username2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> money     业务需求：</span></span><br><span class="line"><span class="comment">  *                  1 transferAccountRequiresNew是一个加入事务的service层方法。且必须一个方法中同时调用 abcBankDrawMoney (zhangsan) 和  icbcUserMoneyDao.saveMoney(lisi)</span></span><br><span class="line"><span class="comment">  *                  2 abcBankDrawMoney (zhangsan)  允许失败，也就是说abcBankDrawMoney (zhangsan) 成功与否对icbcUserMoneyDao.saveMoney(lisi) 业务不影响</span></span><br><span class="line"><span class="comment">  *                  3 abcBankDrawMoney 是一个 <span class="doctag">@Transactional</span>(propagation = Propagation.REQUIRES_NEW) 的方法 。该方法发生异常回滚</span></span><br><span class="line"><span class="comment">  *                  4 初始金额 abcBank  zhangsan 1000</span></span><br><span class="line"><span class="comment">  *                  4 初始金额 icbcBank  lisi  1000</span></span><br><span class="line"><span class="comment">  *                  &lt;p&gt;</span></span><br><span class="line"><span class="comment">  *                  预期效果：</span></span><br><span class="line"><span class="comment">  *                  1 、abcBankDrawMoney (zhangsan)   回滚</span></span><br><span class="line"><span class="comment">  *                  2 、icbcUserMoneyDao.saveMoney(lisi) 取钱成功</span></span><br><span class="line"><span class="comment">  *                  3、 预期金额 abcBank  zhangsan 1000</span></span><br><span class="line"><span class="comment">  *                  4 、预期金额 icbcBank  lisi  1200</span></span><br><span class="line"><span class="comment">  *                  &lt;p&gt;</span></span><br><span class="line"><span class="comment">  *                  真实结果:</span></span><br><span class="line"><span class="comment">  *                  1、真实金额 abcBank  zhangsan 800</span></span><br><span class="line"><span class="comment">  *                  2、真实金额 icbcBank  lisi  1200</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h2 id="4-2-测试代码"><a href="#4-2-测试代码" class="headerlink" title="4.2 测试代码"></a>4.2 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferAccountsFromZsABCBankToLsICBCBankRequiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test开始转账........."</span>);</span><br><span class="line">    transferAccountsService.transferAccountRequiresNew(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="number">200</span>);</span><br><span class="line">    System.out.println(<span class="string">"test转账业务完成........."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferAccountRequiresNew</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.abcBankDrawMoney(username1, money);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为李四存钱业务---------------"</span>);</span><br><span class="line">       icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">       System.out.println(<span class="string">"李四存钱成功---------------"</span>);</span><br><span class="line">       System.out.println(<span class="string">"转账业务完成---------------"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abcBankDrawMoney</span><span class="params">(String username, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为张三取钱业务---------------"</span>);</span><br><span class="line">       abcUserMoneyDao.drawMoney(username, money);</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">       System.out.println(username + <span class="string">"张三取钱成功-------------"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-测试结果"><a href="#4-3-测试结果" class="headerlink" title="4.3 测试结果"></a>4.3 测试结果</h2><p>我们看到即使abcBankDrawMoney 方法发生了异常，但是并未进行回滚操作，钱还是被取成功了，和我们之前预期的结果不是一样。</p><p>以下是执行结果：</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-20180919143123549.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-20180919143123549.png"></p><p>执行日志，并未回滚：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">test开始转账.........</span><br><span class="line">2018-09-19 14:26:06,230 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;txManager&apos;</span><br><span class="line">2018-09-19 14:26:06,231 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;transactionManager&apos;</span><br><span class="line">2018-09-19 14:26:06,376 org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:367) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Creating new transaction with name [com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRequiresNew]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">2018-09-19 14:26:11,187 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:206) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Acquired Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] for JDBC transaction</span><br><span class="line">2018-09-19 14:26:11,229 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:223) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Switching JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] to manual commit</span><br><span class="line">准备开始为张三取钱业务---------------</span><br><span class="line">2018-09-19 14:26:11,261 org.mybatis.spring.SqlSessionUtils.getSqlSession(SqlSessionUtils.java:97) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Creating a new SqlSession</span><br><span class="line">2018-09-19 14:26:11,344 org.mybatis.spring.SqlSessionUtils.registerSessionHolder(SqlSessionUtils.java:128) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:11,855 org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:87) org.mybatis.spring.transaction.SpringManagedTransaction</span><br><span class="line">DEBUG: JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] will be managed by Spring</span><br><span class="line">2018-09-19 14:26:11,875 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ABC_USER SET money = money - 200.0 WHERE username = ?</span><br><span class="line">2018-09-19 14:26:12,292 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: zhangsan(String)</span><br><span class="line">2018-09-19 14:26:12,477 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 14:26:12,479 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line"></span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.ab</span><br><span class="line">  .... 省略部分堆栈</span><br><span class="line"></span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">准备开始为李四存钱业务---------------</span><br><span class="line">2018-09-19 14:26:12,495 org.mybatis.spring.SqlSessionUtils.sessionHolder(SqlSessionUtils.java:163) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Fetched SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211] from current transaction</span><br><span class="line">2018-09-19 14:26:12,497 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ICBC_USER SET money = money + 200.0 WHERE username = ?</span><br><span class="line">2018-09-19 14:26:12,499 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: lisi(String)</span><br><span class="line">2018-09-19 14:26:12,541 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 14:26:12,542 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">李四存钱成功---------------</span><br><span class="line">转账业务完成---------------</span><br><span class="line">2018-09-19 14:26:12,544 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCommit(SqlSessionUtils.java:284) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,545 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:310) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,546 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:315) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,546 org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Initiating transaction commit</span><br><span class="line">2018-09-19 14:26:12,547 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:269) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Committing JDBC transaction on Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver]</span><br><span class="line">2018-09-19 14:26:12,552 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCleanupAfterCompletion(DataSourceTransactionManager.java:327) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Releasing JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] after transaction</span><br><span class="line">2018-09-19 14:26:12,553 org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection(DataSourceUtils.java:327) org.springframework.jdbc.datasource.DataSourceUtils</span><br><span class="line">DEBUG: Returning JDBC Connection to DataSource</span><br><span class="line">test转账业务完成.........</span><br></pre></td></tr></table></figure></p><h2 id="4-4-回滚失败原因"><a href="#4-4-回滚失败原因" class="headerlink" title="4.4 回滚失败原因"></a>4.4 回滚失败原因</h2><p>在SpringIoC容器中返回的调用的对象是代理对象而不是真实的对象，只有被动态代理直接调用的才会产生事务。this调用并非代理对象。</p><h2 id="4-5-回滚失败解决办法"><a href="#4-5-回滚失败解决办法" class="headerlink" title="4.5 回滚失败解决办法"></a>4.5 回滚失败解决办法</h2><p>通过AopContext.currentProxy(); 获取代理对象，通过代理对象调用abcBankDrawMoney()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferAccountRequiresNew</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TransferAccountsService proxy = (TransferAccountsService) AopContext.currentProxy();</span><br><span class="line">           proxy.abcBankDrawMoney(username1, money);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为李四存钱业务---------------"</span>);</span><br><span class="line">       icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">       System.out.println(<span class="string">"李四存钱成功---------------"</span>);</span><br><span class="line">       System.out.println(<span class="string">"转账业务完成---------------"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可能出现如下异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Cannot find current proxy: Set <span class="string">'exposeProxy'</span> property on Advised to <span class="string">'true'</span> to make it available.</span><br><span class="line">at org.springframework.aop.framework.AopContext.currentProxy(AopContext.java:<span class="number">64</span>)</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRequiresNew(TransferAccountsServiceImpl.java:<span class="number">62</span>)</span><br></pre></td></tr></table></figure></p><p>解决办法在spring 配置文件中设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>小技巧：可以使用如下代码 确认你的bean 是代理对象吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AopUtils.isAopProxy()</span><br><span class="line">AopUtils.isCglibProxy() <span class="comment">//cglib</span></span><br><span class="line">AopUtils.isJdkDynamicProxy() <span class="comment">//jdk动态代理</span></span><br></pre></td></tr></table></figure><h1 id="5-其他原因导致回滚失败"><a href="#5-其他原因导致回滚失败" class="headerlink" title="5.其他原因导致回滚失败"></a>5.其他原因导致回滚失败</h1><ul><li>mysql数据库且引擎是MyISAM造成的（因为不支持事务），改成InnoDB即可。</li></ul><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>本文总结了几种spring事务无法回滚的原因，总结如下：</p><ul><li>try{}catch{}  catch到非RuntimeException，并且未处理。默认spring仅对Error和RuntimeException 异常才回滚</li><li>this调用导致回滚失败。只有被动态代理直接调用的才会产生事务</li><li>mysql数据库且引擎是MyISAM造成的（因为不支持事务），改成InnoDB即可。</li></ul><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h1><p><a href="http://jinnianshilongnian.iteye.com/blog/1850432" title="http://jinnianshilongnian.iteye.com/blog/1850432" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/1850432</a></p><p>图灵学院张飞老师–《架构师不得不知道的Spring事物不能回滚的深层次原因-张飞》</p><h1 id="8-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#8-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="8.欢迎关注米宝窝，持续更新中，谢谢！"></a>8.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文汇总了常见Spring事务无法回滚的问题，并配合实际案例模拟，并给出解决方案。通过本文可以更加详细的了解Spring事务无法回滚的原因。&lt;/li&gt;
&lt;li&gt;希望大家手动敲一遍代码，会收获颇丰。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring Transaction" scheme="http://yoursite.com/tags/Spring-Transaction/"/>
    
  </entry>
  
  <entry>
    <title>org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class</title>
    <link href="http://yoursite.com/2018/09/18/org-apache-commons-dbcp-SQLNestedException-Cannot-load-JDBC-driver-class/"/>
    <id>http://yoursite.com/2018/09/18/org-apache-commons-dbcp-SQLNestedException-Cannot-load-JDBC-driver-class/</id>
    <published>2018-09-18T05:52:30.000Z</published>
    <updated>2018-09-25T00:40:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>SSM （Spring MVC + Spring + mybatis）项目集成时无法加载JDBC驱动，通过junit 测试dao层方法无法完成， 报出如下错误: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class ‘${jdbc.driver_class}’</p><h1 id="2-环境信息"><a href="#2-环境信息" class="headerlink" title="2.环境信息"></a>2.环境信息</h1><p><strong> 核心jar版本 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-web-4.1.7.RELEASE.jar</span><br><span class="line">spring-core-4.1.7.RELEASE.jar</span><br><span class="line">spring-jdbc-4.1.7.RELEASE.jar</span><br><span class="line">mybatis-spring-1.3.1.jar</span><br><span class="line">mybatis-3.4.6.jar</span><br><span class="line">ojdbc6-6.0.jar</span><br><span class="line">junit-4.11.jar</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong> spring-dao.xml 配置 </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:jdbc.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver_class&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">       ··· 略</span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.entity"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:mapper/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="3-错误信息"><a href="#3-错误信息" class="headerlink" title="3.错误信息"></a>3.错误信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class &apos;$&#123;jdbc.driver_class&#125;&apos;</span><br><span class="line"></span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:245)</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:463)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:276)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)</span><br><span class="line">at com.sun.proxy.$Proxy21.transferAccountSetRollbackOnly(Unknown Source)</span><br><span class="line">at tansferAccountTest.SpringTransactionTest.testTransferAccountsFromZsABCBankToLsICBCBankSetRollbackOnly(SpringTransactionTest.java:69)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)</span><br><span class="line">at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:224)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)</span><br><span class="line">at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)</span><br><span class="line">at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)</span><br><span class="line">at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)</span><br><span class="line">at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:309)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class &apos;$&#123;jdbc.driver_class&#125;&apos;</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createConnectionFactory(BasicDataSource.java:1429)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1371)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:204)</span><br><span class="line">... 36 more</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: $&#123;jdbc.driver_class&#125;</span><br><span class="line">at java.net.URLClassLoader$1.run(URLClassLoader.java:366)</span><br><span class="line">at java.net.URLClassLoader$1.run(URLClassLoader.java:355)</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:354)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:425)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:358)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createConnectionFactory(BasicDataSource.java:1420)</span><br><span class="line">... 39 more</span><br></pre></td></tr></table></figure><h1 id="4-原因"><a href="#4-原因" class="headerlink" title="4.原因"></a>4.原因</h1><p>在spring里使用org.mybatis.spring.mapper.MapperScannerConfigurer 进行自动扫描的时候，设置了sqlSessionFactory 的话，可能会导致PropertyPlaceholderConfigurer失效，也就是用${jdbc.driver_class}这样之类的表达式，将无法获取到properties文件里的内容。</p><p>导致这一原因是因为：MapperScannerConigurer实际是在解析加载bean定义阶段的，这个时候要是设置sqlSessionFactory的话，会导致提前初始化一些类，这个时候，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了。</p><p>但如果不设置sqlSessionFactory 属性的话，就必须要保证sessionFactory在spring中名称一定要是sqlSessionFactory ，否则就无法自动注入。又或者直接定义 MapperFactoryBean ，再或者放弃自动代理接口方式。</p><h1 id="5-解决办法"><a href="#5-解决办法" class="headerlink" title="5.解决办法"></a>5.解决办法</h1><p>改用sqlSessionFactoryBeanName注入就没有问题(不要使用sqlSessionFactory属性注入，使用sqlSessionFactoryBeanName注入)，因为这时不会立即初始化sqlSessionFactory,传入的只是名字，非bean，所以不会引发提前初始化问题。</p><p><strong> 问题：</strong> 如果您足够仔细的话，可以看到文章最开始的配置已经通过sqlSessionFactoryBeanName注入，为什么还是会失败呢？</p><p><strong> 答：</strong> 这里还是要改名称，如果注入时候还是value=sqlSessionFactory的话还是出现该问题。故在使用sqlSessionFactoryBeanName注入的同时，将sqlSessionFactory 更名为mySqlSessionFactory。（名称可以任意起）</p><p><strong> 正确的的配置应该为： </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.entity"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:mapper/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"mySqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><p>引自<a href="http://songjianyong.iteye.com/blog/1663170 &quot;http://songjianyong.iteye.com/blog/1663170" target="_blank" rel="noopener">http://songjianyong.iteye.com/blog/1663170</a></p><h1 id="7-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#7-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="7.欢迎关注米宝窝，持续更新中，谢谢！"></a>7.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h1&gt;&lt;p&gt;SSM （Spring MVC + Spring + mybatis）项目集成时无法加载JDBC驱动，通过junit 测试dao层方法无法完成， 报出如下错误: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class ‘${jdbc.driver_class}’&lt;/p&gt;
&lt;h1 id=&quot;2-环境信息&quot;&gt;&lt;a href=&quot;#2-环境信息&quot; class=&quot;headerlink&quot; title=&quot;2.环境信息&quot;&gt;&lt;/a&gt;2.环境信息&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; 核心jar版本 &lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring-web-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring-core-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring-jdbc-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mybatis-spring-1.3.1.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mybatis-3.4.6.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ojdbc6-6.0.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;junit-4.11.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Driver" scheme="http://yoursite.com/tags/Driver/"/>
    
      <category term="SSM集成" scheme="http://yoursite.com/tags/SSM%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Java高级开发必知必会——反射</title>
    <link href="http://yoursite.com/2018/09/16/Java%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E2%80%94%E2%80%94%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/09/16/Java高级开发必知必会——反射/</id>
    <published>2018-09-16T00:20:57.000Z</published>
    <updated>2018-09-25T00:41:34.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标与意义"><a href="#1-目标与意义" class="headerlink" title="1.目标与意义"></a>1.目标与意义</h1><p>反射是Java开发中一个非常重要的概念，掌握了反射的知识，才能更好的学习Java高级课程。如Spring框架的核心就是使用Java反射实现的，而且对做一些Java底层的操作会很有帮助。</p><p><strong> 强烈建议大家手动敲一遍，会收获颇丰！ </strong></p><p><strong> 目标：</strong></p><ul><li>(1)、能够理解并应用反射机制。</li><li>(2)、能够了解反射机制在集合泛型中的应用。</li><li>(3)、有利于更好的学习框架等Java高级技术。</li></ul><a id="more"></a><h1 id="2-Class类的使用"><a href="#2-Class类的使用" class="headerlink" title="2.Class类的使用"></a>2.Class类的使用</h1><ul><li><p>(1） 在面向对象的世界里，万事万物皆对象。（java语言中，静态的成员、普通数据类型除外)</p><p><strong> 问题：</strong> 类是不是对象呢?类是(哪个类的对象呢?)谁的对象呢?</p><p><strong> 答： </strong> 类是对象，类是java.lang.Class类的实例对象（类对象）</p></li></ul><ul><li><p>(2）这个对象到底如何表示（三种表示方法）</p><ul><li>通过隐藏的静态成员变量Student.class获取</li><li>通过对象 stu1.getClass();方法获取</li><li>通过Class.forName(类路径) 获取</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Student的实例对象如何表示</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Student 这个类 也是一个实例对象，Class类的实例对象,如何表示呢</span></span><br><span class="line">        <span class="comment">//任何一个类都是Class的实例对象，这个实例对象有三种表示方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种表示方式---&gt;实际在告诉我们任何一个类都有一个隐含的静态成员变量class</span></span><br><span class="line">        Class c1 = Student.class;</span><br><span class="line">        <span class="comment">//第二中表达方式  已经知道该类的对象通过getClass方法</span></span><br><span class="line">        Class c2 = stu1.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三种表达方式</span></span><br><span class="line">        Class c3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c3 = Class.forName(<span class="string">"com.rocklei123.reflect.Student"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不管c1 or c2 or c3都代表了Student类的类类型，一个类只可能是Class类的一个实例对象.</span></span><br><span class="line">        System.out.println(c1 == c2); <span class="comment">//结果True</span></span><br><span class="line">        System.out.println(c2 == c3);<span class="comment">//结果True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们完全可以通过类的类类型创建该类的对象实例----&gt;通过c1 or c2 or c3创建Student的实例对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student stu2 = (Student) c1.newInstance();<span class="comment">//需要有无参数的构造方法</span></span><br><span class="line">            stu2.print();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外Class类对象不可以new 出来，因为它的构造方法为私有的，只有JVM 才可以创建类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Private constructor. Only the Java Virtual Machine creates Class objects.</span></span><br><span class="line"><span class="comment"> * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment"> * generated.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">    <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">    classLoader = loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Java动态加载类"><a href="#3-Java动态加载类" class="headerlink" title="3.Java动态加载类"></a>3.Java动态加载类</h1><p><strong> 请大家区分编译、运行：</strong> 编译时刻加载类是静态加载类、运行时刻加载类是动态加载类</p><ul><li><p>(1) new 创建的对象，是静态类加载，在编译时刻就需要加载所有的可能使用到的类。</p></li><li><p>(2)Class.forName(“类的全称”)不仅表示了，类的类类型，还代表了动态加载类，在运行时刻加载。</p></li></ul><h1 id="4-图解类的正常加载过程和反射的原理在与class对象"><a href="#4-图解类的正常加载过程和反射的原理在与class对象" class="headerlink" title="4.图解类的正常加载过程和反射的原理在与class对象"></a>4.图解类的正常加载过程和反射的原理在与class对象</h1><p>图解类的正常加载过程和反射的原理在与class对象<br><img src="/2018/09/16/Java高级开发必知必会——反射/Java高级开发必知必会——反射--4-图解反射1.png" alt="Java高级开发必知必会——反射--4-图解反射1"></p><p>图解类的加载过程中各对象创建时占用的JVM内存区域<br><img src="/2018/09/16/Java高级开发必知必会——反射/Java高级开发必知必会——反射--4-图解反射2-reflet_jvm_memory.jpg" alt="Java高级开发必知必会——反射--4-图解反射2"></p><h1 id="5-基本的数据类型、void关键字的类类型"><a href="#5-基本的数据类型、void关键字的类类型" class="headerlink" title="5.基本的数据类型、void关键字的类类型"></a>5.基本的数据类型、void关键字的类类型</h1><p>基本的数据类型、void等关键字等都存在类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class c1 = <span class="keyword">int</span>.class;<span class="comment">//int 的类类型</span></span><br><span class="line">        Class c2 = String.class;<span class="comment">//String类的类类型   String类字节码（自己发明的)</span></span><br><span class="line">        Class c3 = <span class="keyword">double</span>.class;</span><br><span class="line">        Class c4 = Double.class;</span><br><span class="line">        Class c5 = <span class="keyword">void</span>.class;</span><br><span class="line">        Class c6 = Enum.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line">        System.out.println(c2.getSimpleName());<span class="comment">//不包含包名的类的名称</span></span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line">        System.out.println(c4.getName());</span><br><span class="line">        System.out.println(c5.getName());</span><br><span class="line">        System.out.println(c6.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * c1: int</span></span><br><span class="line"><span class="comment">         * c2: java.lang.String</span></span><br><span class="line"><span class="comment">         * c2: String</span></span><br><span class="line"><span class="comment">         * c3: double</span></span><br><span class="line"><span class="comment">         * c4: java.lang.Double</span></span><br><span class="line"><span class="comment">         * c5: void</span></span><br><span class="line"><span class="comment">         * c6: java.lang.Enum</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-通过反射获取方法信息、成员变量、构造函数信息"><a href="#6-通过反射获取方法信息、成员变量、构造函数信息" class="headerlink" title="6.通过反射获取方法信息、成员变量、构造函数信息"></a>6.通过反射获取方法信息、成员变量、构造函数信息</h1><p>实体类信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.spring.transaction.transferAccount.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: SpringTransactionTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/14 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反射ClassUtil打印类的信息，包括类的成员函数、成员变量(只获取成员函数)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.spring.transaction.transferAccount.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ClassUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 09:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 打印类的信息，包括类的成员函数、成员变量(只获取成员函数)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印类信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfoMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        System.out.println(<span class="string">"类加载器为:"</span> + c.getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"包名为:"</span> + c.getPackage());</span><br><span class="line">        System.out.println(<span class="string">"类名称为:"</span> + c.getName());</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印方法信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassMethodMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Method类，方法对象</span></span><br><span class="line"><span class="comment">         * 一个成员方法就是一个Method对象</span></span><br><span class="line"><span class="comment">         * getMethods()方法获取的是所有的public的函数，包括父类继承而来的</span></span><br><span class="line"><span class="comment">         * getDeclaredMethods()获取的是所有该类自己声明的方法，不问访问权限</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method[] methods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            Method method = methods[i];</span><br><span class="line">            System.out.print(<span class="string">"方法名称为："</span> + method.getName() + <span class="string">" ,"</span>);</span><br><span class="line">            Class returnType = method.getReturnType();</span><br><span class="line">            System.out.print(<span class="string">" 方法返回值类型为："</span> + returnType.getName() + <span class="string">" 方法参数类型("</span>);</span><br><span class="line">            Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; parameterTypes.length; j++) &#123;</span><br><span class="line">                System.out.print(parameterTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">            System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印成员变量信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pirntClassFiledsMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 成员变量也是对象</span></span><br><span class="line"><span class="comment">         * java.lang.reflect.Field</span></span><br><span class="line"><span class="comment">         * Field类封装了关于成员变量的操作</span></span><br><span class="line"><span class="comment">         * getFields()方法获取的是所有的public的成员变量的信息</span></span><br><span class="line"><span class="comment">         * getDeclaredFields获取的是该类自己声明的成员变量的信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        Field[] fields = c.getFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            Field field = fields[i];</span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.print(<span class="string">"成员属性类型为:"</span> + fieldType.getName() + <span class="string">",属性名称为："</span> + fieldName + <span class="string">" , "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印构造方法信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 构造函数也是对象</span></span><br><span class="line"><span class="comment">         * java.lang. Constructor中封装了构造函数的信息</span></span><br><span class="line"><span class="comment">         * getConstructors获取所有的public的构造函数</span></span><br><span class="line"><span class="comment">         * getDeclaredConstructors得到所有的构造函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        Constructor[] constructors = c.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.length; i++) &#123;</span><br><span class="line">            Constructor cons = constructors[i];</span><br><span class="line">            System.out.print(<span class="string">"构造方法："</span> + cons.getName() + <span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//获取构造函数的参数列表---&gt;得到的是参数列表的类类型</span></span><br><span class="line">            Class[] paramTypes = cons.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : paramTypes) &#123;</span><br><span class="line">                System.out.print(class1.getName() + <span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        ClassUtil.printClassInfoMessage(user);</span><br><span class="line">        ClassUtil.printClassMethodMessage(user);</span><br><span class="line">        ClassUtil.printConstructMessage(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">类加载器为:sun.misc.Launcher$AppClassLoader@4921a90</span><br><span class="line">包名为:package com.rocklei123.spring.transaction.transferAccount.entity</span><br><span class="line">类名称为:com.rocklei123.spring.transaction.transferAccount.entity.User</span><br><span class="line">===========================================</span><br><span class="line">方法名称为：getUsername , 方法返回值类型为：java.lang.String 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：setUsername , 方法返回值类型为：void 方法参数类型(java.lang.String)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：getMoney , 方法返回值类型为：double 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：setMoney , 方法返回值类型为：void 方法参数类型(double)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型(longint)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型(long)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：equals , 方法返回值类型为：boolean 方法参数类型(java.lang.Object)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：toString , 方法返回值类型为：java.lang.String 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：hashCode , 方法返回值类型为：int 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：getClass , 方法返回值类型为：java.lang.Class 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：notify , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：notifyAll , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">===========================================</span><br><span class="line">构造方法：com.rocklei123.spring.transaction.transferAccount.entity.User(java.lang.String,double,)</span><br><span class="line">构造方法：com.rocklei123.spring.transaction.transferAccount.entity.User()</span><br><span class="line">===========================================</span><br></pre></td></tr></table></figure></p><h1 id="7-方法的反射"><a href="#7-方法的反射" class="headerlink" title="7.方法的反射"></a>7.方法的反射</h1><p>1）如何获取某个方法</p><pre><code>方法的名称和方法的参数列表才能唯一决定某个方法</code></pre><p>2)方法反射的操作</p><p>   method.invoke(对象，参数列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MethodDemo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 11:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        Class demoClass = demo.getClass();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2.获取方法 名称和参数列表来决定  </span></span><br><span class="line"><span class="comment"> * getMethod获取的是public的方法</span></span><br><span class="line"><span class="comment"> * getDelcaredMethod自己声明的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//两种获取方式</span></span><br><span class="line">          <span class="comment">//Method m =  c.getMethod("("", new Class[]&#123;int.class,int.class&#125;);</span></span><br><span class="line">          <span class="comment">//Method m = c.getMethod("add", int.class, int.class);</span></span><br><span class="line">            Method addMethod = demoClass.getMethod(<span class="string">"add"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">            addMethod.invoke(demo, <span class="keyword">new</span> Object[]&#123;<span class="number">10</span>, <span class="number">20</span>&#125;);</span><br><span class="line">            Method printMethod = demoClass.getMethod(<span class="string">"print"</span>, <span class="keyword">new</span> Class[]&#123;String.class, String.class&#125;);</span><br><span class="line">            printMethod.invoke(demo, <span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果：</span></span><br><span class="line"><span class="comment">     * sum=30</span></span><br><span class="line"><span class="comment">     * HELLO WORLD !</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        System.out.println(<span class="string">"sum="</span> + c);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">" "</span> + b.toUpperCase() + <span class="string">" !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-通过Class-Method来认识泛型的本质"><a href="#8-通过Class-Method来认识泛型的本质" class="headerlink" title="8.通过Class,Method来认识泛型的本质"></a>8.通过Class,Method来认识泛型的本质</h1><ul><li>编译之后集合的泛型是去泛型化的</li><li>Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译就无效了</li><li>验证：我们可以通过方法的反射来操作，绕过编译</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MethodDemo2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 12:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; listInt = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;String&gt; listStr = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        listStr.add(<span class="string">"Hello"</span>);</span><br><span class="line">        Class classListInt = listInt.getClass();</span><br><span class="line">        Class classListStr = listStr.getClass();</span><br><span class="line">        System.out.println(classListInt == classListStr);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * classListInt == classListStr 结果返回true说明编译之后集合的泛型是去泛型化的</span></span><br><span class="line"><span class="comment">         * Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译就无效了</span></span><br><span class="line"><span class="comment">         * 验证：我们可以通过方法的反射来操作，绕过编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = classListStr.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            method.invoke(listStr, <span class="number">20</span>);</span><br><span class="line">            System.out.println(<span class="string">"listStr大小："</span> + listStr.size());</span><br><span class="line">            System.out.println(<span class="string">"listStr值："</span> + listStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  结果：</span></span><br><span class="line"><span class="comment">         *  true</span></span><br><span class="line"><span class="comment">         *  listStr大小：2</span></span><br><span class="line"><span class="comment">         *  listStr值：[Hello, 20]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-参考"><a href="#9-参考" class="headerlink" title="9.参考"></a>9.参考</h1><p><a href="https://www.imooc.com/learn/199" target="_blank" rel="noopener">慕课网 https://www.imooc.com/learn/199</a></p><p><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="noopener">Java基础之—反射（非常重要） https://blog.csdn.net/sinat_38259539/article/details/71799078</a></p><h1 id="10-建议大家手动敲一遍会收获颇丰！"><a href="#10-建议大家手动敲一遍会收获颇丰！" class="headerlink" title="10.建议大家手动敲一遍会收获颇丰！"></a>10.建议大家手动敲一遍会收获颇丰！</h1><h1 id="11-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#11-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="11.欢迎关注米宝窝，持续更新中，谢谢！"></a>11.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标与意义&quot;&gt;&lt;a href=&quot;#1-目标与意义&quot; class=&quot;headerlink&quot; title=&quot;1.目标与意义&quot;&gt;&lt;/a&gt;1.目标与意义&lt;/h1&gt;&lt;p&gt;反射是Java开发中一个非常重要的概念，掌握了反射的知识，才能更好的学习Java高级课程。如Spring框架的核心就是使用Java反射实现的，而且对做一些Java底层的操作会很有帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 强烈建议大家手动敲一遍，会收获颇丰！ &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 目标：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)、能够理解并应用反射机制。&lt;/li&gt;
&lt;li&gt;(2)、能够了解反射机制在集合泛型中的应用。&lt;/li&gt;
&lt;li&gt;(3)、有利于更好的学习框架等Java高级技术。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Oracle-数据泵导入导出数据步骤</title>
    <link href="http://yoursite.com/2018/09/14/Oracle-%E6%95%B0%E6%8D%AE%E6%B3%B5%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/09/14/Oracle-数据泵导入导出数据步骤/</id>
    <published>2018-09-14T08:47:10.000Z</published>
    <updated>2018-09-25T00:41:15.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-目标"><a href="#0-目标" class="headerlink" title="0.目标"></a>0.目标</h1><p>通过Oracle数据泵工具导入导出数据</p><ul><li><p>测试版本 Oracle  Release 11.2.0.4.0 - 64bit Production</p></li><li><p>1 从原始库通过expdp 导出数据库指定对象或一个用户schema 到文件dmp中</p></li><li>2 通过impdp将数据文件导入到目标库中</li></ul><h1 id="1-创建导出文件夹目录"><a href="#1-创建导出文件夹目录" class="headerlink" title="1. 创建导出文件夹目录"></a>1. 创建导出文件夹目录</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;create directory expdir as 'D:\myjava\olm\20170913\approbe0904';</span><br><span class="line">SQL&gt;grant read,write on directory expdir to public;</span><br></pre></td></tr></table></figure><h1 id="2-查询已经有的directory"><a href="#2-查询已经有的directory" class="headerlink" title="2. 查询已经有的directory"></a>2. 查询已经有的directory</h1><p>查看当前数据库导入导出路径</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_directories;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="3-导出dmp文件"><a href="#3-导出dmp文件" class="headerlink" title="3. 导出dmp文件"></a>3. 导出dmp文件</h1><p><strong>注意</strong><br>users是本地的表空间，请用实际的表空间替换users</p><p>操作系统命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expdp "'/ as sysdba'" directory=expdir dumpfile=si0915.dmp logfile=si0915_exp.log schemas=appuser</span><br></pre></td></tr></table></figure></p><h1 id="4-目标数据库导入全量表方法如下："><a href="#4-目标数据库导入全量表方法如下：" class="headerlink" title="4.目标数据库导入全量表方法如下："></a>4.目标数据库导入全量表方法如下：</h1><p>（1） 删除approbe用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> approbe <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><p>（2）导入新的全量数据</p><p><strong>注意</strong>—users是本地的表空间，请用实际的表空间替换users<br>将appuser用户的数据导入到approbe用户下</p><p>操作系统命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp "'/ as sysdba'" directory=expdir dumpfile=si0915.dmp logfile=si0915_imp.log remap_schema=appuser:approbe</span><br></pre></td></tr></table></figure></p><h1 id="5-可能遇到的问题"><a href="#5-可能遇到的问题" class="headerlink" title="5.可能遇到的问题"></a>5.可能遇到的问题</h1><h2 id="5-1-问题1-：Object-type-TYPE-failed-to-create-with-error"><a href="#5-1-问题1-：Object-type-TYPE-failed-to-create-with-error" class="headerlink" title="5.1 问题1 ：Object type TYPE failed to create with error"></a>5.1 问题1 ：Object type TYPE failed to create with error</h2><h3 id="5-1-1-错误信息"><a href="#5-1-1-错误信息" class="headerlink" title="5.1.1 错误信息"></a>5.1.1 错误信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TYPE:</span><br><span class="line">ORA-39083: Object type TYPE failed to <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-02304</span>: invalid <span class="keyword">object</span> identifier literal</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="string">"APPROBEBAK"</span>.<span class="string">"XXX_TAB_XXX_DDL"</span>   <span class="keyword">OID</span> <span class="string">'253439611478D21AE050A8C0D240D7B3'</span> <span class="keyword">as</span> <span class="keyword">object</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">number</span>,</span><br><span class="line">  PROJECT_ID <span class="built_in">number</span>,</span><br><span class="line">  module_id <span class="built_in">number</span>,</span><br><span class="line">  TABLE_NAME VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  <span class="keyword">status</span> varchar2(<span class="number">20</span>),</span><br><span class="line">  <span class="keyword">action</span> varchar2(<span class="number">20</span>),</span><br><span class="line">  ddl_part_flag <span class="built_in">number</span>,</span><br><span class="line">  ddl_str varchar2(<span class="number">32767</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORA<span class="number">-39083</span>: <span class="keyword">Object</span> <span class="keyword">type</span> <span class="keyword">TYPE</span> <span class="keyword">failed</span> <span class="keyword">to</span> <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-02304</span>: invalid <span class="keyword">object</span> identifier literal</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="string">"APPROBEBAK"</span>.<span class="string">"XXX_TAB_XXX_RM"</span>   <span class="keyword">OID</span> <span class="string">'253439611487D21AE050A8C0D240D7B3'</span> <span class="keyword">as</span> <span class="keyword">object</span></span><br><span class="line">(</span><br><span class="line">  owner          VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  table_name     VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  column_name    VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  data_type      VARCHAR2(<span class="number">106</span>),</span><br><span class="line">  data_length    <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_precision <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_scale     <span class="built_in">NUMBER</span>,</span><br><span class="line">  nullable       VARCHAR2(<span class="number">1</span>),</span><br><span class="line">  column_id      <span class="built_in">NUMBER</span>,</span><br><span class="line">  default_length <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_defau</span><br></pre></td></tr></table></figure><h3 id="5-1-2-错误原因"><a href="#5-1-2-错误原因" class="headerlink" title="5.1.2 错误原因"></a>5.1.2 错误原因</h3><p>这个错误是因为同一个OID的对象已经在数据库中存在了，所以导致冲突无法创建，通过impdp help=y命令查看帮助，发现有参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 TRANSFORM             Metadata transform to apply to applicable objects.                      Valid transform keywords: SEGMENT_ATTRIBUTES, STORAGE                      OID, and PCTSPACE.</span><br></pre></td></tr></table></figure></p><p>查看联机文档发现关于OID这个参数的解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 OID - If the value is specified as n, the assignment of the exported OID during the creation of object tables and types is inhibited. Instead, a new OID is assigned. This can be useful for cloning schemas, but does not affect referenced objects. The default value is y.</span><br></pre></td></tr></table></figure></p><p>意思就是说如果这个OID参数设置为“N”，那么导出的对象的OID在object table和type被创建时会被抑制，它会被分配一个新的OID，这个参数可以被用来clone schema，但是对被引用的对象是无效的。这个参数默认值为“Y”<br>于是只要将参数transform的OID显示的设置为N即可解决，如下所示：</p><p><a href="http://www.ask600.com/ora-39083-object-type-type-failed-to-create-with-error.html" target="_blank" rel="noopener">http://www.ask600.com/ora-39083-object-type-type-failed-to-create-with-error.html</a></p><h3 id="5-1-3-解决办法"><a href="#5-1-3-解决办法" class="headerlink" title="5.1.3 解决办法"></a>5.1.3 解决办法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp "'/ as sysdba'" directory=approbebak dumpfile=APPROBE_V2.4.DMP logfile=APPROBE_V2.4_imp.log remap_schema=approbe:approbebak   transform=oid:n</span><br></pre></td></tr></table></figure><h2 id="5-2-问题2：违反唯一性约束-JOB-ID重复"><a href="#5-2-问题2：违反唯一性约束-JOB-ID重复" class="headerlink" title="5.2 问题2：违反唯一性约束 JOB_ID重复"></a>5.2 问题2：违反唯一性约束 JOB_ID重复</h2><h3 id="5-2-1-错误日志"><a href="#5-2-1-错误日志" class="headerlink" title="5.2.1 错误日志"></a>5.2.1 错误日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ORA-39083: Object type JOB failed to <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-00001</span>: <span class="keyword">unique</span> <span class="keyword">constraint</span> (SYS.I_JOB_JOB) violated</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.XXXX.SUBMIT( JOB=&gt; <span class="number">401</span>, LUSER=&gt; <span class="string">'XXX'</span>, PUSER=&gt; <span class="string">'XXX'</span>, CUSER=&gt; <span class="string">'XXX'</span>, NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2014-11-13 22:03:45'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>), <span class="built_in">INTERVAL</span>=&gt; <span class="string">'SYSDATE + 120/1440  '</span>, BROKEN=&gt;  <span class="literal">FALSE</span>, WHAT=&gt; <span class="string">'dbms_refresh.refresh(''"XXX"."XXX"'');'</span>, NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMER</span></span><br><span class="line"><span class="string">Processing object type SCHEMA_EXPORT/REFRESH_GROUP</span></span><br><span class="line"><span class="string">Job "SYSTEM"."SYS_IMPORT_SCHEMA_02" completed with 4 error(s) at Fri Nov 14 09:00:27 2014 elapsed 0 00:30:37</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-解决办法"><a href="#5-2-2-解决办法" class="headerlink" title="5.2.2 解决办法"></a>5.2.2 解决办法</h3><p> <strong>（1）导出dmp文件中的ddl sql语句</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp &quot;&apos;/ as sysdba&apos;&quot; directory=approbebak dumpfile=APPROBE_V2.4.DMP logfile=APPROBE_V2.4_imp.log remap_schema=approbe:approbebak   transform=oid:n SQLFILE=impdp.sql</span><br></pre></td></tr></table></figure></p><p><strong>（2）在SQLFILE=impdp.sql找到相关JOB id的创建语句</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- new object type path: SCHEMA_EXPORT/JOB</span></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">401</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">402</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX.222_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br></pre></td></tr></table></figure></p><p><strong>（3）  查到最大JOB_ID修改语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max (job)  from   dba_jobs;</span><br></pre></td></tr></table></figure><p><strong>（4） 调整报错SQL语句为最大JOB_ID ，本例为403 404，手工创建如下语句 SYStem用户执行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- new object type path: SCHEMA_EXPORT/JOB</span></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">403</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">404</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX.222_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br></pre></td></tr></table></figure><p>（5）查看最后结果是否插入成功</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select job,SCHEMA_USER,what from dba_jobs;</span><br><span class="line"></span><br><span class="line">       JOB SCHEMA_USER</span><br><span class="line"><span class="comment">---------- ------------------------------</span></span><br><span class="line">WHAT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">       403 APPROBEBAK</span><br><span class="line">pkg_XXXXX.222_XXXXX;</span><br><span class="line"></span><br><span class="line">       404 APPROBEBAK</span><br><span class="line">pkg_XXXXX;</span><br><span class="line"></span><br><span class="line">       402 APPROBE</span><br><span class="line">pkg_XXXXX.222_XXXXX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       JOB SCHEMA_USER</span><br><span class="line"><span class="comment">---------- ------------------------------</span></span><br><span class="line">WHAT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">       401 APPROBE</span><br><span class="line">pkg_XXXXX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure><h1 id="6-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#6-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="6.欢迎关注米宝窝，持续更新中，谢谢！"></a>6.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-目标&quot;&gt;&lt;a href=&quot;#0-目标&quot; class=&quot;headerlink&quot; title=&quot;0.目标&quot;&gt;&lt;/a&gt;0.目标&lt;/h1&gt;&lt;p&gt;通过Oracle数据泵工具导入导出数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试版本 Oracle  Release 11.2.0.4.0 - 64bit Production&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 从原始库通过expdp 导出数据库指定对象或一个用户schema 到文件dmp中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2 通过impdp将数据文件导入到目标库中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-创建导出文件夹目录&quot;&gt;&lt;a href=&quot;#1-创建导出文件夹目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建导出文件夹目录&quot;&gt;&lt;/a&gt;1. 创建导出文件夹目录&lt;/h1&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;create directory expdir as &#39;D:\myjava\olm\20170913\approbe0904&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;grant read,write on directory expdir to public;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;2-查询已经有的directory&quot;&gt;&lt;a href=&quot;#2-查询已经有的directory&quot; class=&quot;headerlink&quot; title=&quot;2. 查询已经有的directory&quot;&gt;&lt;/a&gt;2. 查询已经有的directory&lt;/h1&gt;&lt;p&gt;查看当前数据库导入导出路径&lt;/p&gt;
 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; dba_directories;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
      <category term="数据泵" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%B3%B5/"/>
    
  </entry>
  
</feed>
