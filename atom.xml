<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rocklei123 米宝窝</title>
  
  <subtitle>水滴石穿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-25T05:07:02.573Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>rocklei123</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebLogic Java反序列化漏洞终极建议</title>
    <link href="http://yoursite.com/2018/09/25/WebLogic-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%BB%88%E6%9E%81%E5%BB%BA%E8%AE%AE/"/>
    <id>http://yoursite.com/2018/09/25/WebLogic-Java反序列化漏洞终极建议/</id>
    <published>2018-09-25T01:27:33.000Z</published>
    <updated>2018-09-25T05:07:02.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-概述："><a href="#0-概述：" class="headerlink" title="0. 概述："></a>0. 概述：</h1><p>本文针对这几年来WebLogic软件经常报出的java反序列化漏洞问题进行总结，其他中间件软件本文暂不讨论。内容主要涵盖客户最关心的一些问题、工程师打补丁时需要注意事项。</p><h1 id="1-序列化与反序列化介绍"><a href="#1-序列化与反序列化介绍" class="headerlink" title="1. 序列化与反序列化介绍"></a>1. 序列化与反序列化介绍</h1><p>Java 序列化与反序列化</p><ul><li>Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream类的 writeObject() 方法可以实现序列化。</li><li>Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 readObject() 方法用于反序列化。</li></ul><p><img src="/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925111252598.png" alt="WebLogic Java反序列化漏洞终极建议-2"></p><p>序列化与反序列化是让 Java 对象脱离 Java 运行环境的一种手段，可以有效的实现多平台之间的通信、对象持久化存储。主要应用在以下场景：</p><a id="more"></a><p><strong> HTTP： </strong> 多平台之间的通信，管理等</p><p><strong> RMI：</strong> 是 Java 的一组拥护开发分布式应用程序的 API，实现了不同操作系统之间程序的方法调用。值得注意的是，RMI 的传输 100% 基于反序列化，Java RMI 的默认端口是 1099 端口。</p><p><strong> JMX：</strong> JMX 是一套标准的代理和服务，用户可以在任何 Java 应用程序中使用这些代理和服务实现管理,中间件软件 WebLogic 的管理页面就是基于 JMX 开发的，而 JBoss 则整个系统都基于 JMX 构架。 ​</p><p>2016年Spring RMI反序列化漏洞今年比较出名的：Jackson，FastJson<br>Java 十分受开发者喜爱的一点是其拥有完善的第三方类库，和满足各种需求的框架；但正因为很多第三方类库引用广泛，如果其中某些组件出现安全问题，那么受影响范围将极为广泛。</p><h1 id="2-Java反序列化漏洞与Weblogic反序列化漏洞介绍"><a href="#2-Java反序列化漏洞与Weblogic反序列化漏洞介绍" class="headerlink" title="2. Java反序列化漏洞与Weblogic反序列化漏洞介绍"></a>2. Java反序列化漏洞与Weblogic反序列化漏洞介绍</h1><h2 id="2-1-Java反序列化漏洞历史"><a href="#2-1-Java反序列化漏洞历史" class="headerlink" title="2.1 Java反序列化漏洞历史"></a>2.1 Java反序列化漏洞历史</h2><p>最为出名的大概应该是：15年的Apache Commons Collections 反序列化远程命令执行漏洞，其当初影响范围包括：WebSphere、JBoss、Jenkins、WebLogic 和 OpenNMSd等。</p><p>Apache Commons Collections 3和4，Groovy，Spring，只要目标应用的Class Path中包含这些库，可让readObject()实现任意命令执行。影响比较广泛的就是Apache Commons Collections这个库，中间件基本都会涉及使用此库。</p><h2 id="2-2-Weblogic-Java反序列化漏洞介绍"><a href="#2-2-Weblogic-Java反序列化漏洞介绍" class="headerlink" title="2.2 Weblogic Java反序列化漏洞介绍"></a>2.2 Weblogic Java反序列化漏洞介绍</h2><p>因为weblogic底层也使用Apache Commons Collections库，WebLogic 存在Java反序列化漏洞无疑的。不过在漏洞修复这方面，Oracle可是不走心啊。正所谓，新三年，旧三年，缝缝补补又三年，还是未修完。以下是基于Weblogic t3协议引起远程代码执行的反序列化漏洞统计：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CVE-2015-4852</span><br><span class="line"></span><br><span class="line">CVE-2016-0638</span><br><span class="line"></span><br><span class="line">CVE-2016-3510</span><br><span class="line"></span><br><span class="line">CVE-2017-3248</span><br><span class="line"></span><br><span class="line">CVE-2018-2628</span><br></pre></td></tr></table></figure></p><p>从2015年一直修到2018年，反复修，反复被绕过，基于t3协议的Java反序列化漏洞还在继续。</p><p>问：那么为什么Java反序列化漏洞为什么波及范围如此广泛？Weblogic 的java反序列化漏洞未来可能还是会存在吗？</p><p> 答： （1）因为Apache Commons Collections 这个库使用太广泛了，市面主流中间件、Spring、fastjson 等都使用这个库。</p><p> （2）Oracle的Weblogic补丁是采用黑名单的方式过滤危险的反序列化类 ，每次新出现一种漏洞就提供一个新的黑名单，这种方式极不安全的。 一旦黑客发现新的漏洞，绕过这个黑名单就能攻击。详细原因请开大神分析</p><p>原因就在下文链接中：</p><p><a href="https://paper.seebug.org/333/" target="_blank" rel="noopener">https://paper.seebug.org/333/</a></p><p><a href="http://blog.knownsec.com/2018/04/weblogic-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9Ecve-2018-2628%E6%BC%AB%E8%B0%88/" target="_blank" rel="noopener">Weblogic 反序列化漏洞(CVE-2018-2628)漫谈</a></p><h1 id="3-Weblogic-Java-反序列化客户关心的几个问题"><a href="#3-Weblogic-Java-反序列化客户关心的几个问题" class="headerlink" title="3.Weblogic Java 反序列化客户关心的几个问题?"></a>3.Weblogic Java 反序列化客户关心的几个问题?</h1><h2 id="3-1-客户关心的：t3协议是否默认开启？"><a href="#3-1-客户关心的：t3协议是否默认开启？" class="headerlink" title="3.1 客户关心的：t3协议是否默认开启？"></a>3.1 客户关心的：t3协议是否默认开启？</h2><p> 问题 ：大多数WebLogic反序列化漏洞主要是针对T3协议，我们默认是否已经启用此协议？通过什么方法确认？</p><p>  答 ：t3协议默认都是开启的，t3协议是非常重要的WebLogic内部的通讯协议。</p><h2 id="3-2-客户关心的：关于配置t3协议过滤器相关问题"><a href="#3-2-客户关心的：关于配置t3协议过滤器相关问题" class="headerlink" title="3.2 客户关心的：关于配置t3协议过滤器相关问题"></a>3.2 客户关心的：关于配置t3协议过滤器相关问题</h2><p>因为基本都是基于t3协议造成的Java反序列化问题，且Oracle提供的补丁集合无法完全解决java反序列化问题，官方提供一种临时解决办法就是过滤T3协议，即WebLogicServer 提供了名为weblogic.security.net.ConnectionFilterImpl 的默认连接筛选器，在此连接筛选器上添加过滤规则过滤连接。如果参考 <a href="http://www.sohu.com/a/241934306_465935" target="_blank" rel="noopener">http://www.sohu.com/a/241934306_465935</a> ，是否起到防护作用，文中配置方式是否正确？</p><h3 id="3-2-1-t3过滤器是否起到防护作用？"><a href="#3-2-1-t3过滤器是否起到防护作用？" class="headerlink" title="3.2.1 t3过滤器是否起到防护作用？"></a>3.2.1 t3过滤器是否起到防护作用？</h3><p> 问题：临时方案是否一定程度的起到预防的作用</p><p>  答：临时方案在一定程度的起到预防的作用。</p><h3 id="3-2-1-能否禁用所有t3协议？"><a href="#3-2-1-能否禁用所有t3协议？" class="headerlink" title="3.2.1 能否禁用所有t3协议？"></a>3.2.1 能否禁用所有t3协议？</h3><p>问题 ：能否禁用所有t3协议？</p><p><strong> 下文配置方式是错误的配置方式 </strong></p><p><img src="/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925095114461.png" alt="WebLogic Java反序列化漏洞终极建议-1"></p><p>答：文中提到的方法是错误的方法。文中提到：筛选规则填取：<em> </em> 7001 deny t3 t3s ，此种规则相当于禁用了t3 协议。禁用后会影响到使用t3协议启动的受管节点，WLST监控脚本、停止脚本…等等。</p><h1 id="4-Weblogic-Java-反序列化问题最终建议"><a href="#4-Weblogic-Java-反序列化问题最终建议" class="headerlink" title="4 Weblogic Java 反序列化问题最终建议"></a>4 Weblogic Java 反序列化问题最终建议</h1><h2 id="4-1-针对10-3-6-及以上版本建议"><a href="#4-1-针对10-3-6-及以上版本建议" class="headerlink" title="4.1 针对10.3.6 及以上版本建议"></a>4.1 针对10.3.6 及以上版本建议</h2><ul><li><p>（1）Oracle每个季度都会更新补丁集合，这个补丁集合不仅包含软件的安全漏洞修复而且包含软件的功能漏洞修复。所以不管怎样，即使没有完全解决反序列化漏洞，打补丁还是很有必要的。至于修复了哪些漏洞建议查bugsfixed 列表</p></li><li><p>（2）推荐Configure Weblogic Connection Filters<br>思路：需要禁用t3协议，但是不能禁死，对于受管节点或有需求的特定节点，需要放开限制。见4.3 、4.4</p></li></ul><p>参考官方doc链接（这两篇文档需要买了Oracle服务才可以下载）：<br>Steps to Configure Weblogic Connection Filters ( Doc ID 1508748.1 )</p><p>Connection-filter Rules To Allow Few Ips To Access One Port And To Allow All Ips To Access Another Port ( Doc ID 1494692.1 )</p><p>参考官方Doc链接：<br><a href="http://download.oracle.com/docs/cd/E12839_01/web.1111/e13711/con_filtr.htm#i1029357" target="_blank" rel="noopener">http://download.oracle.com/docs/cd/E12839_01/web.1111/e13711/con_filtr.htm#i1029357</a></p><ul><li><p>（3）针对bsu升级工具的weblogic版本，建议先升级补丁工具，否则检查冲突时间过程<br>WLS BSU (Smart Update) Takes Very Long Time to Apply Patches - Especially When Checking for Patch Conflicts (文档 ID 2271366.1)<br>下载补丁集合p25153061_1036_Generic.zip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">补丁工具升级</span><br><span class="line">#cd /home/cfmmc/Oracle/Middleware/utils/bsu/</span><br><span class="line">#unzip p25153061_1036_Generic.zip  </span><br><span class="line"># . ./bsu_fix.sh install</span><br><span class="line">回滚</span><br><span class="line"># . ./bsu_fix.sh rollback</span><br></pre></td></tr></table></figure></li><li><p>（4）调整bsu.sh 或bsu.cmd 内存，防止内容溢出<br>WL_HOME/utils/bsu 目录，vi bsu.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"$JAVA_HOME/bin/java" -Xms2048m -Xmx2048m -jar patch-client.jar $*</span><br></pre></td></tr></table></figure></li><li><p>（5）注意事项</p></li></ul><p>注意事项：临时方案存在一定风险，需要在测试环境严格实测，一旦禁用规则配置错误，可能会导致生产系统启动或调用失败。故内网环境酌情考虑，外网环境系统建议配置。</p><h2 id="4-2-针对weblogic-1036以下版本解决建议"><a href="#4-2-针对weblogic-1036以下版本解决建议" class="headerlink" title="4.2 针对weblogic 1036以下版本解决建议"></a>4.2 针对weblogic 1036以下版本解决建议</h2><p>按照oracle官网所说8和9、10版本没有反序列漏洞，但是实际中，如果在应用中含’<em>commons.collections</em>’的jar包，还是会在安全软件中扫描出反序列化漏洞。</p><p><strong> 非官方 </strong> 的修复方式有如下两种方法：</p><ul><li>(1)下载Apache官方最新的commons-collections包，替换有漏洞的commons-collections组件<br>地址：<a href="http://commons.apache.org/proper/commons-collections/download_collections.cgi" target="_blank" rel="noopener">http://commons.apache.org/proper/commons-collections/download_collections.cgi</a></li></ul><ul><li>(2)调整应用程序，使用SerialKiller类包替换进行反序列化操作的ObjectInputStream类。<br>下载jar包和实施步骤请参考链接：<a href="https://github.com/ikkisoft/SerialKiller" target="_blank" rel="noopener">https://github.com/ikkisoft/SerialKiller</a></li></ul><p><strong> 题外话：不过运维人员还是不要背这颗雷吧，生产环境复杂，真出了事故我们付不起责任，更何况国企的企业政治复杂，就别把自己置于水火之中了。我们只提供建议，让甲方人员决定吧！ </strong></p><h2 id="4-3-Connection-Filters规则示例及解读"><a href="#4-3-Connection-Filters规则示例及解读" class="headerlink" title="4.3 Connection Filters规则示例及解读"></a>4.3 Connection Filters规则示例及解读</h2><p>一般写法示例（第二、第三个域用*号代替，意在简化配置，用户可根据自己的需要进行精准的控制，必须填写端口信息）：</p><p>127.0.0.1  <em>  </em>  allow</p><p>10.1.34.205  <em>  </em>  allow</p><p>10.156.0.57/255.255.255.0  <em>  </em>  allow 或 10.156.0.57/24  <em>  </em>  allow</p><p>0.0.0.0/0  <em>  </em>  deny t3 t3s</p><p>解读<br>第一条（127.0.0.1  <em> </em> allow）表示允许本机回环地址所有协议的连接<br>第二条（10.10.5.68 <em> </em> allow）表示允许来自10.10.5.68地址任何协议的访问请求<br>第三条（10.10.3.0/255.255.255.0  <em> </em> allow）表示允许10.10.3.0网段所有协议的连接，<br>最后一条（0.0.0.0/0 <em> </em> denyt3 t3s）表示禁止除上面三条规则以外所有IP地址或网段t3、t3s协议的连接。</p><h2 id="4-4-Connection-Filters规则示例2"><a href="#4-4-Connection-Filters规则示例2" class="headerlink" title="4.4 Connection Filters规则示例2"></a>4.4 Connection Filters规则示例2</h2><p><strong> 目标 </strong></p><p>The Admin server is running on port 8001 and the application is deployed on Managed<br>server, on port 7001<br>The purpose is that only 4 IPs should be able to access the console and no one else<br>should be allowed to access the console but all the IPs, internal or external, should have<br>access on the application</p><p><strong> 错误配置 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10.1.34.205 * 8001 allow</span><br><span class="line">10.156.0.57 * 8001 allow</span><br><span class="line">10.156.0.58 * 8001 allow</span><br><span class="line">0.0.0.0/0 * 7001 allow</span><br><span class="line">0.0.0.0/0 * * deny</span><br></pre></td></tr></table></figure></p><p><strong> 正确配置 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">10.1.34.205 * 8001 allow</span><br><span class="line">10.156.0.57 * 8001 allow</span><br><span class="line">10.156.0.58 * 8001 allow</span><br><span class="line">* * 8001 deny</span><br></pre></td></tr></table></figure></p><p>Make use of * instead of 0 (0.0.0.0/0)</p><p>“The default connection filter implementation interprets a target address of 0 (0.0.0.0/0)<br>as meaning “the rule should apply to all IP addresses.”By design, the default filter does<br>not evaluate the port or the local address, just the action. To clearly specify restrictions<br>when using the default filter, modify the rules.<br>Another option is to implement a custom connection filter.</p><h1 id="5-参考"><a href="#5-参考" class="headerlink" title="5 参考"></a>5 参考</h1><p><a href="http://www.enmotech.com:8089/web/detail/1/482/2.html" target="_blank" rel="noopener">田东云 -【无效的安全补丁】说说WebLogic那修不完的Java反序列化漏洞</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzYyNDQxNg==&amp;mid=2247484322&amp;idx=1&amp;sn=e881fbfa51c666b2f26ea096ba50301b&amp;chksm=eb213faddc56b6bb381a8e93c495d0b6e89e0e9ed97a02dbddc7a85b61f137b9b596749df78b&amp;mpshare=1&amp;scene=1&amp;srcid=1023bVsbAOqQ4o9XI9r2qWEM#rd" target="_blank" rel="noopener">王德富 -Weblogic之反序列化高危漏洞</a></p><h1 id="6-其他博文"><a href="#6-其他博文" class="headerlink" title="6.其他博文"></a>6.其他博文</h1><p><a href="https://blog.csdn.net/zhouleiblog/article/details/50454925" target="_blank" rel="noopener">CVE-2015-4852 java 反序列化漏洞–weblogic补丁</a></p><h1 id="7-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#7-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="7.欢迎关注米宝窝，持续更新中，谢谢！"></a>7.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-概述：&quot;&gt;&lt;a href=&quot;#0-概述：&quot; class=&quot;headerlink&quot; title=&quot;0. 概述：&quot;&gt;&lt;/a&gt;0. 概述：&lt;/h1&gt;&lt;p&gt;本文针对这几年来WebLogic软件经常报出的java反序列化漏洞问题进行总结，其他中间件软件本文暂不讨论。内容主要涵盖客户最关心的一些问题、工程师打补丁时需要注意事项。&lt;/p&gt;
&lt;h1 id=&quot;1-序列化与反序列化介绍&quot;&gt;&lt;a href=&quot;#1-序列化与反序列化介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 序列化与反序列化介绍&quot;&gt;&lt;/a&gt;1. 序列化与反序列化介绍&lt;/h1&gt;&lt;p&gt;Java 序列化与反序列化&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 序列化是指把 Java 对象转换为字节序列的过程便于保存在内存、文件、数据库中，ObjectOutputStream类的 writeObject() 方法可以实现序列化。&lt;/li&gt;
&lt;li&gt;Java 反序列化是指把字节序列恢复为 Java 对象的过程，ObjectInputStream 类的 readObject() 方法用于反序列化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/25/WebLogic-Java反序列化漏洞终极建议/markdown-img-paste-20180925111252598.png&quot; alt=&quot;WebLogic Java反序列化漏洞终极建议-2&quot;&gt;&lt;/p&gt;
&lt;p&gt;序列化与反序列化是让 Java 对象脱离 Java 运行环境的一种手段，可以有效的实现多平台之间的通信、对象持久化存储。主要应用在以下场景：&lt;/p&gt;
    
    </summary>
    
      <category term="WebLogic" scheme="http://yoursite.com/categories/WebLogic/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="WebLogic" scheme="http://yoursite.com/tags/WebLogic/"/>
    
      <category term="Java 反序列化" scheme="http://yoursite.com/tags/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>架构师不得不知的Spring事务不能回滚的深层次原因</title>
    <link href="http://yoursite.com/2018/09/18/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B8%8D%E5%BE%97%E4%B8%8D%E7%9F%A5%E7%9A%84Spring%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%83%BD%E5%9B%9E%E6%BB%9A%E7%9A%84%E6%B7%B1%E5%B1%82%E6%AC%A1%E5%8E%9F%E5%9B%A0/"/>
    <id>http://yoursite.com/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/</id>
    <published>2018-09-18T09:19:20.000Z</published>
    <updated>2018-09-25T00:38:06.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><ul><li>本文汇总了常见Spring事务无法回滚的问题，并配合实际案例模拟，并给出解决方案。通过本文可以更加详细的了解Spring事务无法回滚的原因。</li><li>希望大家手动敲一遍代码，会收获颇丰。</li></ul><a id="more"></a><h1 id="2-测试环境信息"><a href="#2-测试环境信息" class="headerlink" title="2.测试环境信息"></a>2.测试环境信息</h1><p><strong> 核心jar版本 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-web-4.1.7.RELEASE.jar</span><br><span class="line">spring-core-4.1.7.RELEASE.jar</span><br><span class="line">spring-jdbc-4.1.7.RELEASE.jar</span><br><span class="line">mybatis-spring-1.3.1.jar</span><br><span class="line">mybatis-3.4.6.jar</span><br><span class="line">ojdbc6-6.0.jar</span><br><span class="line">junit-4.11.jar</span><br></pre></td></tr></table></figure></p><h1 id="3-try-catch-非RuntimeException-导致回滚失败"><a href="#3-try-catch-非RuntimeException-导致回滚失败" class="headerlink" title="3.try{}catch{非RuntimeException} 导致回滚失败"></a>3.try{}catch{非RuntimeException} 导致回滚失败</h1><h2 id="3-1-测试场景"><a href="#3-1-测试场景" class="headerlink" title="3.1 测试场景"></a>3.1 测试场景</h2><p>模拟从中国农业银行（abcBank）张三账户转账给工商银行（icbcBank）李四账户200元。两个账户初始账户金额都为1000：</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-20180919105357114.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-20180919105357114.png"></p><h2 id="3-2-测试代码"><a href="#3-2-测试代码" class="headerlink" title="3.2 测试代码"></a>3.2 测试代码</h2><p>测试入口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferAccountsFromZsABCBankToLsICBCBankRuntimeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test开始转账........."</span>);</span><br><span class="line">    <span class="keyword">int</span> success = transferAccountsService.transferAccountRuntimeException(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="number">200</span>);</span><br><span class="line">    System.out.println(<span class="string">"test转账业务完成  and success = "</span> + success + <span class="string">"........."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>transferAccountsService （service层代码）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">           abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">           <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;  <span class="comment">//模拟出现异常</span></span><br><span class="line">           icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">           success = <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           success = <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> success;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-3-测试结果"><a href="#3-3-测试结果" class="headerlink" title="3.3 测试结果"></a>3.3 测试结果</h2><p>张三取钱成功，李四存钱失败。钱转丢了！！！但是Spring事务并未回滚</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-2018091910593830.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-2018091910593830.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">test开始转账.........</span><br><span class="line">2018-09-19 10:58:15,998 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;txManager&apos;</span><br><span class="line">2018-09-19 10:58:15,999 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;transactionManager&apos;</span><br><span class="line">2018-09-19 10:58:16,079 org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:367) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Creating new transaction with name [com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRuntimeException]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">2018-09-19 10:58:29,487 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:206) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Acquired Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] for JDBC transaction</span><br><span class="line">2018-09-19 10:58:29,555 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:223) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Switching JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] to manual commit</span><br><span class="line">transferAccountRuntimeException 开始转账业务------------------------</span><br><span class="line">transferAccountRuntimeException 张三开始取钱------------------------</span><br><span class="line">2018-09-19 10:58:29,642 org.mybatis.spring.SqlSessionUtils.getSqlSession(SqlSessionUtils.java:97) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Creating a new SqlSession</span><br><span class="line">2018-09-19 10:58:29,723 org.mybatis.spring.SqlSessionUtils.registerSessionHolder(SqlSessionUtils.java:128) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:30,802 org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:87) org.mybatis.spring.transaction.SpringManagedTransaction</span><br><span class="line">DEBUG: JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] will be managed by Spring</span><br><span class="line">2018-09-19 10:58:30,855 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ABC_USER SET money = money - 200.0 WHERE username = ?</span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRuntimeException(TransferAccountsServiceImpl.java:93)</span><br><span class="line">  ...</span><br><span class="line">at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)</span><br><span class="line">at com.sun.proxy.$Proxy21.transferAccountRuntimeException(Unknown Source)</span><br><span class="line">at tansferAccountTest.SpringTransactionTest.testTransferAccountsFromZsABCBankToLsICBCBankRuntimeException(SpringTransactionTest.java:62)</span><br><span class="line">  ....</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">2018-09-19 10:58:32,027 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: zhangsan(String)</span><br><span class="line">2018-09-19 10:58:32,039 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 10:58:32,040 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">transferAccountRuntimeException 李四开始存钱------------------------</span><br><span class="line">2018-09-19 10:58:32,049 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCommit(SqlSessionUtils.java:284) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,050 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:310) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,051 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:315) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4f1d60b0]</span><br><span class="line">2018-09-19 10:58:32,051 org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Initiating transaction commit</span><br><span class="line">2018-09-19 10:58:32,052 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:269) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Committing JDBC transaction on Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver]</span><br><span class="line">2018-09-19 10:58:32,059 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCleanupAfterCompletion(DataSourceTransactionManager.java:327) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Releasing JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] after transaction</span><br><span class="line">2018-09-19 10:58:32,060 org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection(DataSourceUtils.java:327) org.springframework.jdbc.datasource.DataSourceUtils</span><br><span class="line">DEBUG: Returning JDBC Connection to DataSource</span><br><span class="line">test转账业务完成  and success = 0.........</span><br></pre></td></tr></table></figure><h2 id="3-4-回滚失败原因"><a href="#3-4-回滚失败原因" class="headerlink" title="3.4 回滚失败原因"></a>3.4 回滚失败原因</h2><p>Spring的事务管理默认对Error异常和RuntimeException异常以及其子类进行事务回滚，且必须抛出异常，若使用try-catch对其异常捕获则不会进行回滚！（Error异常和RuntimeException异常抛出时不需要方法调用throws或try-catch语句）；</p><p>以下是spring-tx-4.1.7.RELEASE.jar包中的部分源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.transaction.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.TransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TransactionAttribute</span> <span class="keyword">extends</span> <span class="title">TransactionDefinition</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getQualifier</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable var1)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.transaction.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.support.DefaultTransactionDefinition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultTransactionAttribute</span> <span class="keyword">extends</span> <span class="title">DefaultTransactionDefinition</span> <span class="keyword">implements</span> <span class="title">TransactionAttribute</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String qualifier;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">rollbackOn</span><span class="params">(Throwable ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ex <span class="keyword">instanceof</span> RuntimeException || ex <span class="keyword">instanceof</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-5-回滚失败解决办法"><a href="#3-5-回滚失败解决办法" class="headerlink" title="3.5 回滚失败解决办法"></a>3.5 回滚失败解决办法</h2><p>以下三种方式都可以解决try{}catch{非RuntimeException} 造成事务不回滚的问题<br>（1）  throw new RuntimeException();<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">           abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">           <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">           icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">           System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">           success = <span class="number">1</span>;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">           success = <span class="number">0</span>;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> success;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>（2）配置 rollbackFor = Exception.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountRuntimeException</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">          abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">          <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">          icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">          System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">          success = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">          success = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> success;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>（3）手动回滚事务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">transferAccountSetRollbackOnly</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> success = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 开始转账业务------------------------"</span>);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 张三开始取钱------------------------"</span>);</span><br><span class="line">            abcUserMoneyDao.drawMoney(username1, money);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 李四开始存钱------------------------"</span>);</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">            icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">            System.out.println(<span class="string">"transferAccountRuntimeException 转账业完成务------------------------"</span>);</span><br><span class="line">            success = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            success = <span class="number">0</span>;</span><br><span class="line">            TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="4-this调用导致回滚失败"><a href="#4-this调用导致回滚失败" class="headerlink" title="4.this调用导致回滚失败"></a>4.this调用导致回滚失败</h1><h2 id="4-1-测试场景"><a href="#4-1-测试场景" class="headerlink" title="4.1 测试场景"></a>4.1 测试场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> username1</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> username2</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> money     业务需求：</span></span><br><span class="line"><span class="comment">  *                  1 transferAccountRequiresNew是一个加入事务的service层方法。且必须一个方法中同时调用 abcBankDrawMoney (zhangsan) 和  icbcUserMoneyDao.saveMoney(lisi)</span></span><br><span class="line"><span class="comment">  *                  2 abcBankDrawMoney (zhangsan)  允许失败，也就是说abcBankDrawMoney (zhangsan) 成功与否对icbcUserMoneyDao.saveMoney(lisi) 业务不影响</span></span><br><span class="line"><span class="comment">  *                  3 abcBankDrawMoney 是一个 <span class="doctag">@Transactional</span>(propagation = Propagation.REQUIRES_NEW) 的方法 。该方法发生异常回滚</span></span><br><span class="line"><span class="comment">  *                  4 初始金额 abcBank  zhangsan 1000</span></span><br><span class="line"><span class="comment">  *                  4 初始金额 icbcBank  lisi  1000</span></span><br><span class="line"><span class="comment">  *                  &lt;p&gt;</span></span><br><span class="line"><span class="comment">  *                  预期效果：</span></span><br><span class="line"><span class="comment">  *                  1 、abcBankDrawMoney (zhangsan)   回滚</span></span><br><span class="line"><span class="comment">  *                  2 、icbcUserMoneyDao.saveMoney(lisi) 取钱成功</span></span><br><span class="line"><span class="comment">  *                  3、 预期金额 abcBank  zhangsan 1000</span></span><br><span class="line"><span class="comment">  *                  4 、预期金额 icbcBank  lisi  1200</span></span><br><span class="line"><span class="comment">  *                  &lt;p&gt;</span></span><br><span class="line"><span class="comment">  *                  真实结果:</span></span><br><span class="line"><span class="comment">  *                  1、真实金额 abcBank  zhangsan 800</span></span><br><span class="line"><span class="comment">  *                  2、真实金额 icbcBank  lisi  1200</span></span><br><span class="line"><span class="comment">  */</span></span><br></pre></td></tr></table></figure><h2 id="4-2-测试代码"><a href="#4-2-测试代码" class="headerlink" title="4.2 测试代码"></a>4.2 测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferAccountsFromZsABCBankToLsICBCBankRequiresNew</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"test开始转账........."</span>);</span><br><span class="line">    transferAccountsService.transferAccountRequiresNew(<span class="string">"zhangsan"</span>, <span class="string">"lisi"</span>, <span class="number">200</span>);</span><br><span class="line">    System.out.println(<span class="string">"test转账业务完成........."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferAccountRequiresNew</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.abcBankDrawMoney(username1, money);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为李四存钱业务---------------"</span>);</span><br><span class="line">       icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">       System.out.println(<span class="string">"李四存钱成功---------------"</span>);</span><br><span class="line">       System.out.println(<span class="string">"转账业务完成---------------"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Transactional</span>(propagation = Propagation.REQUIRES_NEW)</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">abcBankDrawMoney</span><span class="params">(String username, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为张三取钱业务---------------"</span>);</span><br><span class="line">       abcUserMoneyDao.drawMoney(username, money);</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">       System.out.println(username + <span class="string">"张三取钱成功-------------"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-测试结果"><a href="#4-3-测试结果" class="headerlink" title="4.3 测试结果"></a>4.3 测试结果</h2><p>我们看到即使abcBankDrawMoney 方法发生了异常，但是并未进行回滚操作，钱还是被取成功了，和我们之前预期的结果不是一样。</p><p>以下是执行结果：</p><p><img src="/2018/09/18/架构师不得不知的Spring事务不能回滚的深层次原因/markdown-img-paste-20180919143123549.png" alt="架构师不得不知的Spring事务不能回滚的深层次原因-markdown-img-paste-20180919143123549.png"></p><p>执行日志，并未回滚：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">test开始转账.........</span><br><span class="line">2018-09-19 14:26:06,230 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;txManager&apos;</span><br><span class="line">2018-09-19 14:26:06,231 org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:248) org.springframework.beans.factory.support.DefaultListableBeanFactory</span><br><span class="line">DEBUG: Returning cached instance of singleton bean &apos;transactionManager&apos;</span><br><span class="line">2018-09-19 14:26:06,376 org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:367) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Creating new transaction with name [com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRequiresNew]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; &apos;&apos;</span><br><span class="line">2018-09-19 14:26:11,187 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:206) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Acquired Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] for JDBC transaction</span><br><span class="line">2018-09-19 14:26:11,229 org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:223) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Switching JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] to manual commit</span><br><span class="line">准备开始为张三取钱业务---------------</span><br><span class="line">2018-09-19 14:26:11,261 org.mybatis.spring.SqlSessionUtils.getSqlSession(SqlSessionUtils.java:97) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Creating a new SqlSession</span><br><span class="line">2018-09-19 14:26:11,344 org.mybatis.spring.SqlSessionUtils.registerSessionHolder(SqlSessionUtils.java:128) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Registering transaction synchronization for SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:11,855 org.mybatis.spring.transaction.SpringManagedTransaction.openConnection(SpringManagedTransaction.java:87) org.mybatis.spring.transaction.SpringManagedTransaction</span><br><span class="line">DEBUG: JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] will be managed by Spring</span><br><span class="line">2018-09-19 14:26:11,875 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ABC_USER SET money = money - 200.0 WHERE username = ?</span><br><span class="line">2018-09-19 14:26:12,292 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: zhangsan(String)</span><br><span class="line">2018-09-19 14:26:12,477 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ABCUserMoneyDao.drawMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 14:26:12,479 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line"></span><br><span class="line">java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.ab</span><br><span class="line">  .... 省略部分堆栈</span><br><span class="line"></span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">准备开始为李四存钱业务---------------</span><br><span class="line">2018-09-19 14:26:12,495 org.mybatis.spring.SqlSessionUtils.sessionHolder(SqlSessionUtils.java:163) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Fetched SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211] from current transaction</span><br><span class="line">2018-09-19 14:26:12,497 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: ==&gt;  Preparing: UPDATE ICBC_USER SET money = money + 200.0 WHERE username = ?</span><br><span class="line">2018-09-19 14:26:12,499 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: ==&gt; Parameters: lisi(String)</span><br><span class="line">2018-09-19 14:26:12,541 org.apache.ibatis.logging.jdbc.BaseJdbcLogger.debug(BaseJdbcLogger.java:159) com.rocklei123.spring.transaction.transferAccount.dao.ICBCUserMoneyDao.saveMoney</span><br><span class="line">DEBUG: &lt;==    Updates: 1</span><br><span class="line">2018-09-19 14:26:12,542 org.mybatis.spring.SqlSessionUtils.closeSqlSession(SqlSessionUtils.java:186) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Releasing transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">李四存钱成功---------------</span><br><span class="line">转账业务完成---------------</span><br><span class="line">2018-09-19 14:26:12,544 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCommit(SqlSessionUtils.java:284) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization committing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,545 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:310) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization deregistering SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,546 org.mybatis.spring.SqlSessionUtils$SqlSessionSynchronization.beforeCompletion(SqlSessionUtils.java:315) org.mybatis.spring.SqlSessionUtils</span><br><span class="line">DEBUG: Transaction synchronization closing SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@4db1f211]</span><br><span class="line">2018-09-19 14:26:12,546 org.springframework.transaction.support.AbstractPlatformTransactionManager.processCommit(AbstractPlatformTransactionManager.java:755) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Initiating transaction commit</span><br><span class="line">2018-09-19 14:26:12,547 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCommit(DataSourceTransactionManager.java:269) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Committing JDBC transaction on Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver]</span><br><span class="line">2018-09-19 14:26:12,552 org.springframework.jdbc.datasource.DataSourceTransactionManager.doCleanupAfterCompletion(DataSourceTransactionManager.java:327) org.springframework.jdbc.datasource.DataSourceTransactionManager</span><br><span class="line">DEBUG: Releasing JDBC Connection [jdbc:oracle:thin:@127.0.0.1:1521:XE, UserName=APPROBE, Oracle JDBC driver] after transaction</span><br><span class="line">2018-09-19 14:26:12,553 org.springframework.jdbc.datasource.DataSourceUtils.doReleaseConnection(DataSourceUtils.java:327) org.springframework.jdbc.datasource.DataSourceUtils</span><br><span class="line">DEBUG: Returning JDBC Connection to DataSource</span><br><span class="line">test转账业务完成.........</span><br></pre></td></tr></table></figure></p><h2 id="4-4-回滚失败原因"><a href="#4-4-回滚失败原因" class="headerlink" title="4.4 回滚失败原因"></a>4.4 回滚失败原因</h2><p>在SpringIoC容器中返回的调用的对象是代理对象而不是真实的对象，只有被动态代理直接调用的才会产生事务。this调用并非代理对象。</p><h2 id="4-5-回滚失败解决办法"><a href="#4-5-回滚失败解决办法" class="headerlink" title="4.5 回滚失败解决办法"></a>4.5 回滚失败解决办法</h2><p>通过AopContext.currentProxy(); 获取代理对象，通过代理对象调用abcBankDrawMoney()方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transferAccountRequiresNew</span><span class="params">(String username1, String username2, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           TransferAccountsService proxy = (TransferAccountsService) AopContext.currentProxy();</span><br><span class="line">           proxy.abcBankDrawMoney(username1, money);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       System.out.println(<span class="string">"准备开始为李四存钱业务---------------"</span>);</span><br><span class="line">       icbcUserMoneyDao.saveMoney(username2, money);</span><br><span class="line">       System.out.println(<span class="string">"李四存钱成功---------------"</span>);</span><br><span class="line">       System.out.println(<span class="string">"转账业务完成---------------"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可能出现如下异常：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalStateException: Cannot find current proxy: Set <span class="string">'exposeProxy'</span> property on Advised to <span class="string">'true'</span> to make it available.</span><br><span class="line">at org.springframework.aop.framework.AopContext.currentProxy(AopContext.java:<span class="number">64</span>)</span><br><span class="line">at com.rocklei123.spring.transaction.transferAccount.service.Impl.TransferAccountsServiceImpl.transferAccountRequiresNew(TransferAccountsServiceImpl.java:<span class="number">62</span>)</span><br></pre></td></tr></table></figure></p><p>解决办法在spring 配置文件中设置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">expose-proxy</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>小技巧：可以使用如下代码 确认你的bean 是代理对象吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AopUtils.isAopProxy()</span><br><span class="line">AopUtils.isCglibProxy() <span class="comment">//cglib</span></span><br><span class="line">AopUtils.isJdkDynamicProxy() <span class="comment">//jdk动态代理</span></span><br></pre></td></tr></table></figure><h1 id="5-其他原因导致回滚失败"><a href="#5-其他原因导致回滚失败" class="headerlink" title="5.其他原因导致回滚失败"></a>5.其他原因导致回滚失败</h1><ul><li>mysql数据库且引擎是MyISAM造成的（因为不支持事务），改成InnoDB即可。</li></ul><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h1><p>本文总结了几种spring事务无法回滚的原因，总结如下：</p><ul><li>try{}catch{}  catch到非RuntimeException，并且未处理。默认spring仅对Error和RuntimeException 异常才回滚</li><li>this调用导致回滚失败。只有被动态代理直接调用的才会产生事务</li><li>mysql数据库且引擎是MyISAM造成的（因为不支持事务），改成InnoDB即可。</li></ul><h1 id="7-参考"><a href="#7-参考" class="headerlink" title="7.参考"></a>7.参考</h1><p><a href="http://jinnianshilongnian.iteye.com/blog/1850432" title="http://jinnianshilongnian.iteye.com/blog/1850432" target="_blank" rel="noopener">http://jinnianshilongnian.iteye.com/blog/1850432</a></p><p>图灵学院张飞老师–《架构师不得不知道的Spring事物不能回滚的深层次原因-张飞》</p><h1 id="8-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#8-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="8.欢迎关注米宝窝，持续更新中，谢谢！"></a>8.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;本文汇总了常见Spring事务无法回滚的问题，并配合实际案例模拟，并给出解决方案。通过本文可以更加详细的了解Spring事务无法回滚的原因。&lt;/li&gt;
&lt;li&gt;希望大家手动敲一遍代码，会收获颇丰。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Spring Transaction" scheme="http://yoursite.com/tags/Spring-Transaction/"/>
    
  </entry>
  
  <entry>
    <title>org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class</title>
    <link href="http://yoursite.com/2018/09/18/org-apache-commons-dbcp-SQLNestedException-Cannot-load-JDBC-driver-class/"/>
    <id>http://yoursite.com/2018/09/18/org-apache-commons-dbcp-SQLNestedException-Cannot-load-JDBC-driver-class/</id>
    <published>2018-09-18T05:52:30.000Z</published>
    <updated>2018-09-25T00:40:48.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h1><p>SSM （Spring MVC + Spring + mybatis）项目集成时无法加载JDBC驱动，通过junit 测试dao层方法无法完成， 报出如下错误: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class ‘${jdbc.driver_class}’</p><h1 id="2-环境信息"><a href="#2-环境信息" class="headerlink" title="2.环境信息"></a>2.环境信息</h1><p><strong> 核心jar版本 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring-web-4.1.7.RELEASE.jar</span><br><span class="line">spring-core-4.1.7.RELEASE.jar</span><br><span class="line">spring-jdbc-4.1.7.RELEASE.jar</span><br><span class="line">mybatis-spring-1.3.1.jar</span><br><span class="line">mybatis-3.4.6.jar</span><br><span class="line">ojdbc6-6.0.jar</span><br><span class="line">junit-4.11.jar</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><strong> spring-dao.xml 配置 </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置整合mybatis过程 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.配置数据库相关参数properties的属性：$&#123;url&#125; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath*:jdbc.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver_class&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></span><br><span class="line">       ··· 略</span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.entity"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:mapper/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="3-错误信息"><a href="#3-错误信息" class="headerlink" title="3.错误信息"></a>3.错误信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class &apos;$&#123;jdbc.driver_class&#125;&apos;</span><br><span class="line"></span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:245)</span><br><span class="line">at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:463)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:276)</span><br><span class="line">at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)</span><br><span class="line">at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)</span><br><span class="line">at com.sun.proxy.$Proxy21.transferAccountSetRollbackOnly(Unknown Source)</span><br><span class="line">at tansferAccountTest.SpringTransactionTest.testTransferAccountsFromZsABCBankToLsICBCBankSetRollbackOnly(SpringTransactionTest.java:69)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:606)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)</span><br><span class="line">at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)</span><br><span class="line">at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)</span><br><span class="line">at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)</span><br><span class="line">at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)</span><br><span class="line">at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:224)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)</span><br><span class="line">at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)</span><br><span class="line">at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)</span><br><span class="line">at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)</span><br><span class="line">at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)</span><br><span class="line">at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)</span><br><span class="line">at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)</span><br><span class="line">at org.junit.runners.ParentRunner.run(ParentRunner.java:309)</span><br><span class="line">at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)</span><br><span class="line">at org.junit.runner.JUnitCore.run(JUnitCore.java:160)</span><br><span class="line">at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)</span><br><span class="line">at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)</span><br><span class="line">at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)</span><br><span class="line">Caused by: org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class &apos;$&#123;jdbc.driver_class&#125;&apos;</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createConnectionFactory(BasicDataSource.java:1429)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createDataSource(BasicDataSource.java:1371)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.getConnection(BasicDataSource.java:1044)</span><br><span class="line">at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:204)</span><br><span class="line">... 36 more</span><br><span class="line">Caused by: java.lang.ClassNotFoundException: $&#123;jdbc.driver_class&#125;</span><br><span class="line">at java.net.URLClassLoader$1.run(URLClassLoader.java:366)</span><br><span class="line">at java.net.URLClassLoader$1.run(URLClassLoader.java:355)</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">at java.net.URLClassLoader.findClass(URLClassLoader.java:354)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:425)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:358)</span><br><span class="line">at org.apache.commons.dbcp.BasicDataSource.createConnectionFactory(BasicDataSource.java:1420)</span><br><span class="line">... 39 more</span><br></pre></td></tr></table></figure><h1 id="4-原因"><a href="#4-原因" class="headerlink" title="4.原因"></a>4.原因</h1><p>在spring里使用org.mybatis.spring.mapper.MapperScannerConfigurer 进行自动扫描的时候，设置了sqlSessionFactory 的话，可能会导致PropertyPlaceholderConfigurer失效，也就是用${jdbc.driver_class}这样之类的表达式，将无法获取到properties文件里的内容。</p><p>导致这一原因是因为：MapperScannerConigurer实际是在解析加载bean定义阶段的，这个时候要是设置sqlSessionFactory的话，会导致提前初始化一些类，这个时候，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了。</p><p>但如果不设置sqlSessionFactory 属性的话，就必须要保证sessionFactory在spring中名称一定要是sqlSessionFactory ，否则就无法自动注入。又或者直接定义 MapperFactoryBean ，再或者放弃自动代理接口方式。</p><h1 id="5-解决办法"><a href="#5-解决办法" class="headerlink" title="5.解决办法"></a>5.解决办法</h1><p>改用sqlSessionFactoryBeanName注入就没有问题(不要使用sqlSessionFactory属性注入，使用sqlSessionFactoryBeanName注入)，因为这时不会立即初始化sqlSessionFactory,传入的只是名字，非bean，所以不会引发提前初始化问题。</p><p><strong> 问题：</strong> 如果您足够仔细的话，可以看到文章最开始的配置已经通过sqlSessionFactoryBeanName注入，为什么还是会失败呢？</p><p><strong> 答：</strong> 这里还是要改名称，如果注入时候还是value=sqlSessionFactory的话还是出现该问题。故在使用sqlSessionFactoryBeanName注入的同时，将sqlSessionFactory 更名为mySqlSessionFactory。（名称可以任意起）</p><p><strong> 正确的的配置应该为： </strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mySqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描entity包 使用别名 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typeAliasesPackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.entity"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 扫描sql配置文件:mapper需要的xml文件 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:mapper/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 --&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"mySqlSessionFactory"</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.rocklei123.spring.transaction.transferAccount.dao"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="6-参考"><a href="#6-参考" class="headerlink" title="6. 参考"></a>6. 参考</h1><p>引自<a href="http://songjianyong.iteye.com/blog/1663170 &quot;http://songjianyong.iteye.com/blog/1663170" target="_blank" rel="noopener">http://songjianyong.iteye.com/blog/1663170</a></p><h1 id="7-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#7-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="7.欢迎关注米宝窝，持续更新中，谢谢！"></a>7.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h1&gt;&lt;p&gt;SSM （Spring MVC + Spring + mybatis）项目集成时无法加载JDBC驱动，通过junit 测试dao层方法无法完成， 报出如下错误: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is org.apache.commons.dbcp.SQLNestedException: Cannot load JDBC driver class ‘${jdbc.driver_class}’&lt;/p&gt;
&lt;h1 id=&quot;2-环境信息&quot;&gt;&lt;a href=&quot;#2-环境信息&quot; class=&quot;headerlink&quot; title=&quot;2.环境信息&quot;&gt;&lt;/a&gt;2.环境信息&lt;/h1&gt;&lt;p&gt;&lt;strong&gt; 核心jar版本 &lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;spring-web-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring-core-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;spring-jdbc-4.1.7.RELEASE.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mybatis-spring-1.3.1.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mybatis-3.4.6.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ojdbc6-6.0.jar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;junit-4.11.jar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Driver" scheme="http://yoursite.com/tags/Driver/"/>
    
      <category term="SSM集成" scheme="http://yoursite.com/tags/SSM%E9%9B%86%E6%88%90/"/>
    
  </entry>
  
  <entry>
    <title>Java高级开发必知必会——反射</title>
    <link href="http://yoursite.com/2018/09/16/Java%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E2%80%94%E2%80%94%E5%8F%8D%E5%B0%84/"/>
    <id>http://yoursite.com/2018/09/16/Java高级开发必知必会——反射/</id>
    <published>2018-09-16T00:20:57.000Z</published>
    <updated>2018-09-25T00:41:34.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标与意义"><a href="#1-目标与意义" class="headerlink" title="1.目标与意义"></a>1.目标与意义</h1><p>反射是Java开发中一个非常重要的概念，掌握了反射的知识，才能更好的学习Java高级课程。如Spring框架的核心就是使用Java反射实现的，而且对做一些Java底层的操作会很有帮助。</p><p><strong> 强烈建议大家手动敲一遍，会收获颇丰！ </strong></p><p><strong> 目标：</strong></p><ul><li>(1)、能够理解并应用反射机制。</li><li>(2)、能够了解反射机制在集合泛型中的应用。</li><li>(3)、有利于更好的学习框架等Java高级技术。</li></ul><a id="more"></a><h1 id="2-Class类的使用"><a href="#2-Class类的使用" class="headerlink" title="2.Class类的使用"></a>2.Class类的使用</h1><ul><li><p>(1） 在面向对象的世界里，万事万物皆对象。（java语言中，静态的成员、普通数据类型除外)</p><p><strong> 问题：</strong> 类是不是对象呢?类是(哪个类的对象呢?)谁的对象呢?</p><p><strong> 答： </strong> 类是对象，类是java.lang.Class类的实例对象（类对象）</p></li></ul><ul><li><p>(2）这个对象到底如何表示（三种表示方法）</p><ul><li>通过隐藏的静态成员变量Student.class获取</li><li>通过对象 stu1.getClass();方法获取</li><li>通过Class.forName(类路径) 获取</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Student的实例对象如何表示</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Student 这个类 也是一个实例对象，Class类的实例对象,如何表示呢</span></span><br><span class="line">        <span class="comment">//任何一个类都是Class的实例对象，这个实例对象有三种表示方式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种表示方式---&gt;实际在告诉我们任何一个类都有一个隐含的静态成员变量class</span></span><br><span class="line">        Class c1 = Student.class;</span><br><span class="line">        <span class="comment">//第二中表达方式  已经知道该类的对象通过getClass方法</span></span><br><span class="line">        Class c2 = stu1.getClass();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第三种表达方式</span></span><br><span class="line">        Class c3 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            c3 = Class.forName(<span class="string">"com.rocklei123.reflect.Student"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不管c1 or c2 or c3都代表了Student类的类类型，一个类只可能是Class类的一个实例对象.</span></span><br><span class="line">        System.out.println(c1 == c2); <span class="comment">//结果True</span></span><br><span class="line">        System.out.println(c2 == c3);<span class="comment">//结果True</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们完全可以通过类的类类型创建该类的对象实例----&gt;通过c1 or c2 or c3创建Student的实例对象</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student stu2 = (Student) c1.newInstance();<span class="comment">//需要有无参数的构造方法</span></span><br><span class="line">            stu2.print();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I am a student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外Class类对象不可以new 出来，因为它的构造方法为私有的，只有JVM 才可以创建类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Private constructor. Only the Java Virtual Machine creates Class objects.</span></span><br><span class="line"><span class="comment"> * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment"> * generated.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">    <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">    classLoader = loader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Java动态加载类"><a href="#3-Java动态加载类" class="headerlink" title="3.Java动态加载类"></a>3.Java动态加载类</h1><p><strong> 请大家区分编译、运行：</strong> 编译时刻加载类是静态加载类、运行时刻加载类是动态加载类</p><ul><li><p>(1) new 创建的对象，是静态类加载，在编译时刻就需要加载所有的可能使用到的类。</p></li><li><p>(2)Class.forName(“类的全称”)不仅表示了，类的类类型，还代表了动态加载类，在运行时刻加载。</p></li></ul><h1 id="4-图解类的正常加载过程和反射的原理在与class对象"><a href="#4-图解类的正常加载过程和反射的原理在与class对象" class="headerlink" title="4.图解类的正常加载过程和反射的原理在与class对象"></a>4.图解类的正常加载过程和反射的原理在与class对象</h1><p>图解类的正常加载过程和反射的原理在与class对象<br><img src="/2018/09/16/Java高级开发必知必会——反射/Java高级开发必知必会——反射--4-图解反射1.png" alt="Java高级开发必知必会——反射--4-图解反射1"></p><p>图解类的加载过程中各对象创建时占用的JVM内存区域<br><img src="/2018/09/16/Java高级开发必知必会——反射/Java高级开发必知必会——反射--4-图解反射2-reflet_jvm_memory.jpg" alt="Java高级开发必知必会——反射--4-图解反射2"></p><h1 id="5-基本的数据类型、void关键字的类类型"><a href="#5-基本的数据类型、void关键字的类类型" class="headerlink" title="5.基本的数据类型、void关键字的类类型"></a>5.基本的数据类型、void关键字的类类型</h1><p>基本的数据类型、void等关键字等都存在类类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class c1 = <span class="keyword">int</span>.class;<span class="comment">//int 的类类型</span></span><br><span class="line">        Class c2 = String.class;<span class="comment">//String类的类类型   String类字节码（自己发明的)</span></span><br><span class="line">        Class c3 = <span class="keyword">double</span>.class;</span><br><span class="line">        Class c4 = Double.class;</span><br><span class="line">        Class c5 = <span class="keyword">void</span>.class;</span><br><span class="line">        Class c6 = Enum.class;</span><br><span class="line"></span><br><span class="line">        System.out.println(c1.getName());</span><br><span class="line">        System.out.println(c2.getName());</span><br><span class="line">        System.out.println(c2.getSimpleName());<span class="comment">//不包含包名的类的名称</span></span><br><span class="line">        System.out.println(c3.getName());</span><br><span class="line">        System.out.println(c4.getName());</span><br><span class="line">        System.out.println(c5.getName());</span><br><span class="line">        System.out.println(c6.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 结果：</span></span><br><span class="line"><span class="comment">         * c1: int</span></span><br><span class="line"><span class="comment">         * c2: java.lang.String</span></span><br><span class="line"><span class="comment">         * c2: String</span></span><br><span class="line"><span class="comment">         * c3: double</span></span><br><span class="line"><span class="comment">         * c4: java.lang.Double</span></span><br><span class="line"><span class="comment">         * c5: void</span></span><br><span class="line"><span class="comment">         * c6: java.lang.Enum</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-通过反射获取方法信息、成员变量、构造函数信息"><a href="#6-通过反射获取方法信息、成员变量、构造函数信息" class="headerlink" title="6.通过反射获取方法信息、成员变量、构造函数信息"></a>6.通过反射获取方法信息、成员变量、构造函数信息</h1><p>实体类信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.spring.transaction.transferAccount.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: SpringTransactionTest</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/14 14:52</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String username, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> money;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMoney</span><span class="params">(<span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.money = money;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>反射ClassUtil打印类的信息，包括类的成员函数、成员变量(只获取成员函数)：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.rocklei123.spring.transaction.transferAccount.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: ClassUtil</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 09:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 打印类的信息，包括类的成员函数、成员变量(只获取成员函数)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印类信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassInfoMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        System.out.println(<span class="string">"类加载器为:"</span> + c.getClassLoader());</span><br><span class="line">        System.out.println(<span class="string">"包名为:"</span> + c.getPackage());</span><br><span class="line">        System.out.println(<span class="string">"类名称为:"</span> + c.getName());</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印方法信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printClassMethodMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Method类，方法对象</span></span><br><span class="line"><span class="comment">         * 一个成员方法就是一个Method对象</span></span><br><span class="line"><span class="comment">         * getMethods()方法获取的是所有的public的函数，包括父类继承而来的</span></span><br><span class="line"><span class="comment">         * getDeclaredMethods()获取的是所有该类自己声明的方法，不问访问权限</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method[] methods = c.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            Method method = methods[i];</span><br><span class="line">            System.out.print(<span class="string">"方法名称为："</span> + method.getName() + <span class="string">" ,"</span>);</span><br><span class="line">            Class returnType = method.getReturnType();</span><br><span class="line">            System.out.print(<span class="string">" 方法返回值类型为："</span> + returnType.getName() + <span class="string">" 方法参数类型("</span>);</span><br><span class="line">            Class[] parameterTypes = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; parameterTypes.length; j++) &#123;</span><br><span class="line">                System.out.print(parameterTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">            System.out.println(<span class="string">"------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印成员变量信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">pirntClassFiledsMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 成员变量也是对象</span></span><br><span class="line"><span class="comment">         * java.lang.reflect.Field</span></span><br><span class="line"><span class="comment">         * Field类封装了关于成员变量的操作</span></span><br><span class="line"><span class="comment">         * getFields()方法获取的是所有的public的成员变量的信息</span></span><br><span class="line"><span class="comment">         * getDeclaredFields获取的是该类自己声明的成员变量的信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        Field[] fields = c.getFields();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            Field field = fields[i];</span><br><span class="line">            Class fieldType = field.getType();</span><br><span class="line">            String fieldName = field.getName();</span><br><span class="line">            System.out.print(<span class="string">"成员属性类型为:"</span> + fieldType.getName() + <span class="string">",属性名称为："</span> + fieldName + <span class="string">" , "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印构造方法信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructMessage</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 构造函数也是对象</span></span><br><span class="line"><span class="comment">         * java.lang. Constructor中封装了构造函数的信息</span></span><br><span class="line"><span class="comment">         * getConstructors获取所有的public的构造函数</span></span><br><span class="line"><span class="comment">         * getDeclaredConstructors得到所有的构造函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Class c = object.getClass();</span><br><span class="line">        Constructor[] constructors = c.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; constructors.length; i++) &#123;</span><br><span class="line">            Constructor cons = constructors[i];</span><br><span class="line">            System.out.print(<span class="string">"构造方法："</span> + cons.getName() + <span class="string">"("</span>);</span><br><span class="line">            <span class="comment">//获取构造函数的参数列表---&gt;得到的是参数列表的类类型</span></span><br><span class="line">            Class[] paramTypes = cons.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (Class class1 : paramTypes) &#123;</span><br><span class="line">                System.out.print(class1.getName() + <span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">")"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"==========================================="</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        ClassUtil.printClassInfoMessage(user);</span><br><span class="line">        ClassUtil.printClassMethodMessage(user);</span><br><span class="line">        ClassUtil.printConstructMessage(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行结果：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">类加载器为:sun.misc.Launcher$AppClassLoader@4921a90</span><br><span class="line">包名为:package com.rocklei123.spring.transaction.transferAccount.entity</span><br><span class="line">类名称为:com.rocklei123.spring.transaction.transferAccount.entity.User</span><br><span class="line">===========================================</span><br><span class="line">方法名称为：getUsername , 方法返回值类型为：java.lang.String 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：setUsername , 方法返回值类型为：void 方法参数类型(java.lang.String)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：getMoney , 方法返回值类型为：double 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：setMoney , 方法返回值类型为：void 方法参数类型(double)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型(longint)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型(long)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：wait , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：equals , 方法返回值类型为：boolean 方法参数类型(java.lang.Object)</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：toString , 方法返回值类型为：java.lang.String 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：hashCode , 方法返回值类型为：int 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：getClass , 方法返回值类型为：java.lang.Class 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：notify , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">------------------------------------</span><br><span class="line">方法名称为：notifyAll , 方法返回值类型为：void 方法参数类型()</span><br><span class="line">===========================================</span><br><span class="line">构造方法：com.rocklei123.spring.transaction.transferAccount.entity.User(java.lang.String,double,)</span><br><span class="line">构造方法：com.rocklei123.spring.transaction.transferAccount.entity.User()</span><br><span class="line">===========================================</span><br></pre></td></tr></table></figure></p><h1 id="7-方法的反射"><a href="#7-方法的反射" class="headerlink" title="7.方法的反射"></a>7.方法的反射</h1><p>1）如何获取某个方法</p><pre><code>方法的名称和方法的参数列表才能唯一决定某个方法</code></pre><p>2)方法反射的操作</p><p>   method.invoke(对象，参数列表)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MethodDemo1</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 11:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo demo = <span class="keyword">new</span> Demo();</span><br><span class="line">        Class demoClass = demo.getClass();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 2.获取方法 名称和参数列表来决定  </span></span><br><span class="line"><span class="comment"> * getMethod获取的是public的方法</span></span><br><span class="line"><span class="comment"> * getDelcaredMethod自己声明的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//两种获取方式</span></span><br><span class="line">          <span class="comment">//Method m =  c.getMethod("("", new Class[]&#123;int.class,int.class&#125;);</span></span><br><span class="line">          <span class="comment">//Method m = c.getMethod("add", int.class, int.class);</span></span><br><span class="line">            Method addMethod = demoClass.getMethod(<span class="string">"add"</span>, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class);</span><br><span class="line">            addMethod.invoke(demo, <span class="keyword">new</span> Object[]&#123;<span class="number">10</span>, <span class="number">20</span>&#125;);</span><br><span class="line">            Method printMethod = demoClass.getMethod(<span class="string">"print"</span>, <span class="keyword">new</span> Class[]&#123;String.class, String.class&#125;);</span><br><span class="line">            printMethod.invoke(demo, <span class="string">"hello"</span>, <span class="string">"world"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结果：</span></span><br><span class="line"><span class="comment">     * sum=30</span></span><br><span class="line"><span class="comment">     * HELLO WORLD !</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = a + b;</span><br><span class="line">        System.out.println(<span class="string">"sum="</span> + c);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String a, String b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a.toUpperCase() + <span class="string">" "</span> + b.toUpperCase() + <span class="string">" !"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="8-通过Class-Method来认识泛型的本质"><a href="#8-通过Class-Method来认识泛型的本质" class="headerlink" title="8.通过Class,Method来认识泛型的本质"></a>8.通过Class,Method来认识泛型的本质</h1><ul><li>编译之后集合的泛型是去泛型化的</li><li>Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译就无效了</li><li>验证：我们可以通过方法的反射来操作，绕过编译</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.reflect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: MethodDemo2</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Auther</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/9/16 12:22</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; listInt = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        List&lt;String&gt; listStr = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        listStr.add(<span class="string">"Hello"</span>);</span><br><span class="line">        Class classListInt = listInt.getClass();</span><br><span class="line">        Class classListStr = listStr.getClass();</span><br><span class="line">        System.out.println(classListInt == classListStr);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * classListInt == classListStr 结果返回true说明编译之后集合的泛型是去泛型化的</span></span><br><span class="line"><span class="comment">         * Java中集合的泛型，是防止错误输入的，只在编译阶段有效，绕过编译就无效了</span></span><br><span class="line"><span class="comment">         * 验证：我们可以通过方法的反射来操作，绕过编译</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Method method = classListStr.getMethod(<span class="string">"add"</span>, Object.class);</span><br><span class="line">            method.invoke(listStr, <span class="number">20</span>);</span><br><span class="line">            System.out.println(<span class="string">"listStr大小："</span> + listStr.size());</span><br><span class="line">            System.out.println(<span class="string">"listStr值："</span> + listStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  结果：</span></span><br><span class="line"><span class="comment">         *  true</span></span><br><span class="line"><span class="comment">         *  listStr大小：2</span></span><br><span class="line"><span class="comment">         *  listStr值：[Hello, 20]</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-参考"><a href="#9-参考" class="headerlink" title="9.参考"></a>9.参考</h1><p><a href="https://www.imooc.com/learn/199" target="_blank" rel="noopener">慕课网 https://www.imooc.com/learn/199</a></p><p><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" target="_blank" rel="noopener">Java基础之—反射（非常重要） https://blog.csdn.net/sinat_38259539/article/details/71799078</a></p><h1 id="10-建议大家手动敲一遍会收获颇丰！"><a href="#10-建议大家手动敲一遍会收获颇丰！" class="headerlink" title="10.建议大家手动敲一遍会收获颇丰！"></a>10.建议大家手动敲一遍会收获颇丰！</h1><h1 id="11-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#11-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="11.欢迎关注米宝窝，持续更新中，谢谢！"></a>11.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标与意义&quot;&gt;&lt;a href=&quot;#1-目标与意义&quot; class=&quot;headerlink&quot; title=&quot;1.目标与意义&quot;&gt;&lt;/a&gt;1.目标与意义&lt;/h1&gt;&lt;p&gt;反射是Java开发中一个非常重要的概念，掌握了反射的知识，才能更好的学习Java高级课程。如Spring框架的核心就是使用Java反射实现的，而且对做一些Java底层的操作会很有帮助。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 强烈建议大家手动敲一遍，会收获颇丰！ &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; 目标：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(1)、能够理解并应用反射机制。&lt;/li&gt;
&lt;li&gt;(2)、能够了解反射机制在集合泛型中的应用。&lt;/li&gt;
&lt;li&gt;(3)、有利于更好的学习框架等Java高级技术。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="反射" scheme="http://yoursite.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>Oracle-数据泵导入导出数据步骤</title>
    <link href="http://yoursite.com/2018/09/14/Oracle-%E6%95%B0%E6%8D%AE%E6%B3%B5%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/09/14/Oracle-数据泵导入导出数据步骤/</id>
    <published>2018-09-14T08:47:10.000Z</published>
    <updated>2018-09-25T00:41:15.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-目标"><a href="#0-目标" class="headerlink" title="0.目标"></a>0.目标</h1><p>通过Oracle数据泵工具导入导出数据</p><ul><li><p>测试版本 Oracle  Release 11.2.0.4.0 - 64bit Production</p></li><li><p>1 从原始库通过expdp 导出数据库指定对象或一个用户schema 到文件dmp中</p></li><li>2 通过impdp将数据文件导入到目标库中</li></ul><h1 id="1-创建导出文件夹目录"><a href="#1-创建导出文件夹目录" class="headerlink" title="1. 创建导出文件夹目录"></a>1. 创建导出文件夹目录</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt;create directory expdir as 'D:\myjava\olm\20170913\approbe0904';</span><br><span class="line">SQL&gt;grant read,write on directory expdir to public;</span><br></pre></td></tr></table></figure><h1 id="2-查询已经有的directory"><a href="#2-查询已经有的directory" class="headerlink" title="2. 查询已经有的directory"></a>2. 查询已经有的directory</h1><p>查看当前数据库导入导出路径</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_directories;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="3-导出dmp文件"><a href="#3-导出dmp文件" class="headerlink" title="3. 导出dmp文件"></a>3. 导出dmp文件</h1><p><strong>注意</strong><br>users是本地的表空间，请用实际的表空间替换users</p><p>操作系统命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expdp "'/ as sysdba'" directory=expdir dumpfile=si0915.dmp logfile=si0915_exp.log schemas=appuser</span><br></pre></td></tr></table></figure></p><h1 id="4-目标数据库导入全量表方法如下："><a href="#4-目标数据库导入全量表方法如下：" class="headerlink" title="4.目标数据库导入全量表方法如下："></a>4.目标数据库导入全量表方法如下：</h1><p>（1） 删除approbe用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">user</span> approbe <span class="keyword">cascade</span>;</span><br></pre></td></tr></table></figure><p>（2）导入新的全量数据</p><p><strong>注意</strong>—users是本地的表空间，请用实际的表空间替换users<br>将appuser用户的数据导入到approbe用户下</p><p>操作系统命令：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp "'/ as sysdba'" directory=expdir dumpfile=si0915.dmp logfile=si0915_imp.log remap_schema=appuser:approbe</span><br></pre></td></tr></table></figure></p><h1 id="5-可能遇到的问题"><a href="#5-可能遇到的问题" class="headerlink" title="5.可能遇到的问题"></a>5.可能遇到的问题</h1><h2 id="5-1-问题1-：Object-type-TYPE-failed-to-create-with-error"><a href="#5-1-问题1-：Object-type-TYPE-failed-to-create-with-error" class="headerlink" title="5.1 问题1 ：Object type TYPE failed to create with error"></a>5.1 问题1 ：Object type TYPE failed to create with error</h2><h3 id="5-1-1-错误信息"><a href="#5-1-1-错误信息" class="headerlink" title="5.1.1 错误信息"></a>5.1.1 错误信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TYPE:</span><br><span class="line">ORA-39083: Object type TYPE failed to <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-02304</span>: invalid <span class="keyword">object</span> identifier literal</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="string">"APPROBEBAK"</span>.<span class="string">"XXX_TAB_XXX_DDL"</span>   <span class="keyword">OID</span> <span class="string">'253439611478D21AE050A8C0D240D7B3'</span> <span class="keyword">as</span> <span class="keyword">object</span> (</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">number</span>,</span><br><span class="line">  PROJECT_ID <span class="built_in">number</span>,</span><br><span class="line">  module_id <span class="built_in">number</span>,</span><br><span class="line">  TABLE_NAME VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  <span class="keyword">status</span> varchar2(<span class="number">20</span>),</span><br><span class="line">  <span class="keyword">action</span> varchar2(<span class="number">20</span>),</span><br><span class="line">  ddl_part_flag <span class="built_in">number</span>,</span><br><span class="line">  ddl_str varchar2(<span class="number">32767</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">ORA<span class="number">-39083</span>: <span class="keyword">Object</span> <span class="keyword">type</span> <span class="keyword">TYPE</span> <span class="keyword">failed</span> <span class="keyword">to</span> <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-02304</span>: invalid <span class="keyword">object</span> identifier literal</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> <span class="string">"APPROBEBAK"</span>.<span class="string">"XXX_TAB_XXX_RM"</span>   <span class="keyword">OID</span> <span class="string">'253439611487D21AE050A8C0D240D7B3'</span> <span class="keyword">as</span> <span class="keyword">object</span></span><br><span class="line">(</span><br><span class="line">  owner          VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  table_name     VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  column_name    VARCHAR2(<span class="number">30</span>),</span><br><span class="line">  data_type      VARCHAR2(<span class="number">106</span>),</span><br><span class="line">  data_length    <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_precision <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_scale     <span class="built_in">NUMBER</span>,</span><br><span class="line">  nullable       VARCHAR2(<span class="number">1</span>),</span><br><span class="line">  column_id      <span class="built_in">NUMBER</span>,</span><br><span class="line">  default_length <span class="built_in">NUMBER</span>,</span><br><span class="line">  data_defau</span><br></pre></td></tr></table></figure><h3 id="5-1-2-错误原因"><a href="#5-1-2-错误原因" class="headerlink" title="5.1.2 错误原因"></a>5.1.2 错误原因</h3><p>这个错误是因为同一个OID的对象已经在数据库中存在了，所以导致冲突无法创建，通过impdp help=y命令查看帮助，发现有参数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123 TRANSFORM             Metadata transform to apply to applicable objects.                      Valid transform keywords: SEGMENT_ATTRIBUTES, STORAGE                      OID, and PCTSPACE.</span><br></pre></td></tr></table></figure></p><p>查看联机文档发现关于OID这个参数的解释如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 OID - If the value is specified as n, the assignment of the exported OID during the creation of object tables and types is inhibited. Instead, a new OID is assigned. This can be useful for cloning schemas, but does not affect referenced objects. The default value is y.</span><br></pre></td></tr></table></figure></p><p>意思就是说如果这个OID参数设置为“N”，那么导出的对象的OID在object table和type被创建时会被抑制，它会被分配一个新的OID，这个参数可以被用来clone schema，但是对被引用的对象是无效的。这个参数默认值为“Y”<br>于是只要将参数transform的OID显示的设置为N即可解决，如下所示：</p><p><a href="http://www.ask600.com/ora-39083-object-type-type-failed-to-create-with-error.html" target="_blank" rel="noopener">http://www.ask600.com/ora-39083-object-type-type-failed-to-create-with-error.html</a></p><h3 id="5-1-3-解决办法"><a href="#5-1-3-解决办法" class="headerlink" title="5.1.3 解决办法"></a>5.1.3 解决办法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp "'/ as sysdba'" directory=approbebak dumpfile=APPROBE_V2.4.DMP logfile=APPROBE_V2.4_imp.log remap_schema=approbe:approbebak   transform=oid:n</span><br></pre></td></tr></table></figure><h2 id="5-2-问题2：违反唯一性约束-JOB-ID重复"><a href="#5-2-问题2：违反唯一性约束-JOB-ID重复" class="headerlink" title="5.2 问题2：违反唯一性约束 JOB_ID重复"></a>5.2 问题2：违反唯一性约束 JOB_ID重复</h2><h3 id="5-2-1-错误日志"><a href="#5-2-1-错误日志" class="headerlink" title="5.2.1 错误日志"></a>5.2.1 错误日志</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ORA-39083: Object type JOB failed to <span class="keyword">create</span> <span class="keyword">with</span> <span class="keyword">error</span>:</span><br><span class="line">ORA<span class="number">-00001</span>: <span class="keyword">unique</span> <span class="keyword">constraint</span> (SYS.I_JOB_JOB) violated</span><br><span class="line">Failing <span class="keyword">sql</span> <span class="keyword">is</span>:</span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.XXXX.SUBMIT( JOB=&gt; <span class="number">401</span>, LUSER=&gt; <span class="string">'XXX'</span>, PUSER=&gt; <span class="string">'XXX'</span>, CUSER=&gt; <span class="string">'XXX'</span>, NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2014-11-13 22:03:45'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>), <span class="built_in">INTERVAL</span>=&gt; <span class="string">'SYSDATE + 120/1440  '</span>, BROKEN=&gt;  <span class="literal">FALSE</span>, WHAT=&gt; <span class="string">'dbms_refresh.refresh(''"XXX"."XXX"'');'</span>, NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMER</span></span><br><span class="line"><span class="string">Processing object type SCHEMA_EXPORT/REFRESH_GROUP</span></span><br><span class="line"><span class="string">Job "SYSTEM"."SYS_IMPORT_SCHEMA_02" completed with 4 error(s) at Fri Nov 14 09:00:27 2014 elapsed 0 00:30:37</span></span><br></pre></td></tr></table></figure><h3 id="5-2-2-解决办法"><a href="#5-2-2-解决办法" class="headerlink" title="5.2.2 解决办法"></a>5.2.2 解决办法</h3><p> <strong>（1）导出dmp文件中的ddl sql语句</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">impdp &quot;&apos;/ as sysdba&apos;&quot; directory=approbebak dumpfile=APPROBE_V2.4.DMP logfile=APPROBE_V2.4_imp.log remap_schema=approbe:approbebak   transform=oid:n SQLFILE=impdp.sql</span><br></pre></td></tr></table></figure></p><p><strong>（2）在SQLFILE=impdp.sql找到相关JOB id的创建语句</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- new object type path: SCHEMA_EXPORT/JOB</span></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">401</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">402</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX.222_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br></pre></td></tr></table></figure></p><p><strong>（3）  查到最大JOB_ID修改语句</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select max (job)  from   dba_jobs;</span><br></pre></td></tr></table></figure><p><strong>（4） 调整报错SQL语句为最大JOB_ID ，本例为403 404，手工创建如下语句 SYStem用户执行</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- new object type path: SCHEMA_EXPORT/JOB</span></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">403</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span> SYS.DBMS_IJOB.SUBMIT(</span><br><span class="line">      JOB=&gt; <span class="number">404</span>,</span><br><span class="line">      LUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      PUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      CUSER=&gt; <span class="string">'APPROBEBAK'</span>,</span><br><span class="line">      NEXT_DATE=&gt; <span class="keyword">TO_DATE</span>(<span class="string">'2017-12-15 09:08:27'</span>, <span class="string">'YYYY-MM-DD:HH24:MI:SS'</span>),</span><br><span class="line">      <span class="built_in">INTERVAL</span>=&gt; <span class="string">'sysdate+1'</span>,</span><br><span class="line">      BROKEN=&gt;  <span class="literal">FALSE</span>,</span><br><span class="line">      WHAT=&gt; <span class="string">'pkg_XXXXX.222_XXXXX;'</span>,</span><br><span class="line">      NLSENV=&gt; <span class="string">'NLS_LANGUAGE=''AMERICAN'' NLS_TERRITORY=''AMERICA'' NLS_CURRENCY=''$'' NLS_ISO_CURRENCY=''AMERICA'' NLS_NUMERIC_CHARACTERS=''.,'' NLS_DATE_FORMAT=''DD-MON-RR'' NLS_DATE_LANGUAGE=''AMERICAN'' NLS_SORT=''BINARY'''</span>,</span><br><span class="line">      ENV=&gt; <span class="string">'0102000200000000'</span>);</span><br><span class="line">      <span class="keyword">END</span>;</span><br><span class="line"> /</span><br></pre></td></tr></table></figure><p>（5）查看最后结果是否插入成功</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">SQL&gt; select job,SCHEMA_USER,what from dba_jobs;</span><br><span class="line"></span><br><span class="line">       JOB SCHEMA_USER</span><br><span class="line"><span class="comment">---------- ------------------------------</span></span><br><span class="line">WHAT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">       403 APPROBEBAK</span><br><span class="line">pkg_XXXXX.222_XXXXX;</span><br><span class="line"></span><br><span class="line">       404 APPROBEBAK</span><br><span class="line">pkg_XXXXX;</span><br><span class="line"></span><br><span class="line">       402 APPROBE</span><br><span class="line">pkg_XXXXX.222_XXXXX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       JOB SCHEMA_USER</span><br><span class="line"><span class="comment">---------- ------------------------------</span></span><br><span class="line">WHAT</span><br><span class="line"><span class="comment">--------------------------------------------------------------------------------</span></span><br><span class="line">       401 APPROBE</span><br><span class="line">pkg_XXXXX;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure><h1 id="6-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#6-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="6.欢迎关注米宝窝，持续更新中，谢谢！"></a>6.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0-目标&quot;&gt;&lt;a href=&quot;#0-目标&quot; class=&quot;headerlink&quot; title=&quot;0.目标&quot;&gt;&lt;/a&gt;0.目标&lt;/h1&gt;&lt;p&gt;通过Oracle数据泵工具导入导出数据&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;测试版本 Oracle  Release 11.2.0.4.0 - 64bit Production&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;1 从原始库通过expdp 导出数据库指定对象或一个用户schema 到文件dmp中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;2 通过impdp将数据文件导入到目标库中&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-创建导出文件夹目录&quot;&gt;&lt;a href=&quot;#1-创建导出文件夹目录&quot; class=&quot;headerlink&quot; title=&quot;1. 创建导出文件夹目录&quot;&gt;&lt;/a&gt;1. 创建导出文件夹目录&lt;/h1&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;create directory expdir as &#39;D:\myjava\olm\20170913\approbe0904&#39;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SQL&amp;gt;grant read,write on directory expdir to public;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;2-查询已经有的directory&quot;&gt;&lt;a href=&quot;#2-查询已经有的directory&quot; class=&quot;headerlink&quot; title=&quot;2. 查询已经有的directory&quot;&gt;&lt;/a&gt;2. 查询已经有的directory&lt;/h1&gt;&lt;p&gt;查看当前数据库导入导出路径&lt;/p&gt;
 &lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; dba_directories;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Oracle" scheme="http://yoursite.com/categories/Oracle/"/>
    
    
      <category term="Oracle" scheme="http://yoursite.com/tags/Oracle/"/>
    
      <category term="数据泵" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E6%B3%B5/"/>
    
  </entry>
  
  <entry>
    <title>Spring AOP实践-统计Action层方法执行时间</title>
    <link href="http://yoursite.com/2018/09/10/Spring-AOP%E5%AE%9E%E8%B7%B5-%E7%BB%9F%E8%AE%A1%E6%96%B9%E6%B3%95%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2018/09/10/Spring-AOP实践-统计方法执行时间/</id>
    <published>2018-09-10T14:23:37.000Z</published>
    <updated>2018-09-25T00:40:32.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-目标"><a href="#1-目标" class="headerlink" title="1.目标"></a>1.目标</h1><ul><li><p>背景：<br>基于Spring+Strust2+Ibatis 的JAVA Web项目，后台实现分传统的3层结构，dao层，service层，action层。业务调用链一般为 action层–&gt; service层 –&gt; dao层。</p></li><li><p>目标：<br>统计Action层某个方法的执行时间，只需要在该方法上加入一个注解便可以打印出该方法的执行时间。（通过Action层统计方法，基本能粗略统计从客户发起到完成请求反馈给前台页面的总时间。）</p></li></ul><h1 id="2-项目环境"><a href="#2-项目环境" class="headerlink" title="2.项目环境"></a>2.项目环境</h1><p>基于Spring Strust2 Ibatis JAVA Web项目</p><ul><li>spring-XXX-3.0.5.RELEASE.jar</li><li>aspectjrt-1.6.8.jar</li><li>struts2-core-2.3.24.jar</li><li>log4j-1.2.17.jar<br>（等）</li></ul><a id="more"></a><h1 id="3-通过Spring-AOP-实现"><a href="#3-通过Spring-AOP-实现" class="headerlink" title="3.通过Spring AOP 实现"></a>3.通过Spring AOP 实现</h1><h2 id="3-1-注解类（为统计方法上加入该注解）"><a href="#3-1-注解类（为统计方法上加入该注解）" class="headerlink" title="3.1 注解类（为统计方法上加入该注解）"></a>3.1 注解类（为统计方法上加入该注解）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.annotaion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: rocklei123 用于记录方法耗时</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/10 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MethodPerformanceLog &#123;</span><br><span class="line">    <span class="function">String <span class="title">module</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;  <span class="comment">//功能模块</span></span><br><span class="line">    <span class="function">String <span class="title">remark</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">// 操作备注</span></span><br><span class="line">    <span class="function">String <span class="title">operateType</span><span class="params">()</span> <span class="keyword">default</span> ""</span>; <span class="comment">// 操作类型：Add/Update/Delete/Search/Login等</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-log4j-配置（单独生成文件并按日期滚动）"><a href="#3-2-log4j-配置（单独生成文件并按日期滚动）" class="headerlink" title="3.2 log4j 配置（单独生成文件并按日期滚动）"></a>3.2 log4j 配置（单独生成文件并按日期滚动）</h2><p>%l 表示：输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">loglevel=DEBUG</span><br><span class="line">log4j.rootLogger=$&#123;loglevel&#125;,stdout,perfile</span><br><span class="line">log4j.logger.com.mchange=ERROR</span><br><span class="line">log4j.logger.org.apache=ERROR</span><br><span class="line">log4j.logger.org.springframework=ERROR</span><br><span class="line">log4j.logger.org.apache.catalina=ERROR</span><br><span class="line">log4j.logger.org.apache.struts2=ERROR</span><br><span class="line">log4j.logger.org.apache.struts2.util.StrutsTypeConverter=ERROR</span><br><span class="line">log4j.logger.com.opensymphony.xwork2=ERROR</span><br><span class="line">log4j.logger.org.quartz=ERROR</span><br><span class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.stdout.layout.ConversionPattern=[sqlrobe] %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%-5p] %t(%c:%L) - %m%n</span><br><span class="line">log4j.appender.perfile=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.perfile.File=$&#123;catalina.base&#125;/logs/sqlrobe/sqlrobe.log</span><br><span class="line">log4j.appender.perfile.layout.ConversionPattern=[sqlrobe] %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%-5p] %t(%c:%L) - %m%n</span><br><span class="line">log4j.appender.perfile.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.perfile.threshold=DEBUG</span><br><span class="line">log4j.appender.perfile.DatePattern='.'yyyy-MM-dd</span><br><span class="line">log4j.appender.perfile.BufferedIO=true</span><br><span class="line">log4j.appender.perfile.BufferSize=8192</span><br><span class="line"></span><br><span class="line">##middleware</span><br><span class="line">log4j.logger.middleware=$&#123;loglevel&#125;,middleware    </span><br><span class="line">log4j.appender.middleware=org.apache.log4j.DailyRollingFileAppender   </span><br><span class="line">log4j.appender.middleware.File=$&#123;catalina.base&#125;/logs/sqlrobe/middleware.log</span><br><span class="line">log4j.appender.middleware.DatePattern='.'yyyy-MM-dd</span><br><span class="line">log4j.appender.middleware.layout=org.apache.log4j.PatternLayout  </span><br><span class="line">log4j.appender.middleware.layout.ConversionPattern=[middleware] %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%-5p] %t(%l) - %m%n</span><br><span class="line">log4j.additivity.middleware=false</span><br></pre></td></tr></table></figure></p><h2 id="3-3-利用-Spring-AOP的思想来统计方法执行时间并打印"><a href="#3-3-利用-Spring-AOP的思想来统计方法执行时间并打印" class="headerlink" title="3.3 利用 Spring AOP的思想来统计方法执行时间并打印"></a>3.3 利用 Spring AOP的思想来统计方法执行时间并打印</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.rocklei123.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: sqlrobe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/10 17:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PerformanceMonitorMiddleware</span> </span>&#123;</span><br><span class="line">    <span class="comment">//日志记录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(<span class="string">"middleware"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一分钟，即60000ms。为超过一分钟的方法统计到日志中</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ONE_MINUTE = <span class="number">60000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义切点</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.approbe.annotaion.MethodPerformanceLog)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodCachePointcut</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 统计方法执行耗时Around环绕通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"methodCachePointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">timeAround</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义返回对象、得到方法需要的参数</span></span><br><span class="line">        Object obj = <span class="keyword">null</span>;</span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            obj = joinPoint.proceed(args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            logger.error(<span class="string">"统计某方法执行耗时环绕通知出错"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取执行的方法名</span></span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        String methodName = signature.getDeclaringTypeName() + <span class="string">"."</span> + signature.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印耗时的信息</span></span><br><span class="line">        <span class="keyword">this</span>.printExecTime(methodName, startTime, endTime);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打印方法执行耗时的信息，如果超过了一定的时间，才打印</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startTime</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> endTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printExecTime</span><span class="params">(String methodName, <span class="keyword">long</span> startTime, <span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> diffTime = endTime - startTime;</span><br><span class="line">        <span class="comment">//超过1分钟的方法单独打印</span></span><br><span class="line">        <span class="keyword">if</span> (diffTime &gt; ONE_MINUTE) &#123;</span><br><span class="line">            logger.warn(<span class="string">"-----"</span> + methodName + <span class="string">" 方法执行耗时："</span> + diffTime + <span class="string">" ms"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"--------------------------------------------"</span> + methodName + <span class="string">" 方法执行耗时："</span> + diffTime + <span class="string">" ms"</span>);</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------------"</span> + methodName + <span class="string">" 方法执行耗时："</span> + diffTime + <span class="string">" ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-Spring-配置文件配置"><a href="#3-4-Spring-配置文件配置" class="headerlink" title="3.4 Spring 配置文件配置"></a>3.4 Spring 配置文件配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">"performenceMonitorMiddlewareAop"</span> <span class="attr">ref</span>=<span class="string">"performenceMonitorMiddleware"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 注入bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"performenceMonitorMiddleware"</span> <span class="attr">class</span>=<span class="string">"com.approbe.aop.PerformanceMonitorMiddleware"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 强制使用cglib代理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong> 为什么强制使用cglib代理呢？</strong></p><p>spring的动态代理如果不指定，他会根据类的信息来进行代理，如果类有接口的会使用JDK的动态代理，如果类没有接口的就会使用cglib，因为struts2的ActionSupport是有实现接口的，所以他用了JDK的动态代理，那样你类中自己的属性自然就没有了。而你指定了使用cglib，那他就会动态生成一个继承你这个Action的子类，自然你Action类中可供子类访问的属性都有了。 不过struts2有自己的拦截器没必要也是不建议用spring的AOP 出处：<a href="http://bbs.csdn.net/topics/390630278" target="_blank" rel="noopener">http://bbs.csdn.net/topics/390630278</a></p><h2 id="3-5-Struts2-配置文件配置"><a href="#3-5-Struts2-配置文件配置" class="headerlink" title="3.5 Struts2 配置文件配置"></a>3.5 Struts2 配置文件配置</h2><p>分析：一般struts2+spring应用中，spring的插件只负责action的ioc部分，但并没有进行功能加强，即采用代理的机制，所有的action还是使用struts2进行管理，在使用AOP后，这些action需要由spring进行管理，如果没有被spring进行呢代理，将出现注入失败。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- 让struts2始终先考虑spring的自动装箱--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.objectFactory.spring.autoWire.alwaysRespect"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>故如果不增加这句话，Action 中的service方法为空。会报空指针异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">java.lang.NullPointerException</span><br><span class="line">at com.approbe.middlware.action.WlsServerInfoAction.updateWlsBySystemId(WlsServerInfoAction.java:<span class="number">92</span>)</span><br><span class="line">at com.approbe.middlware.action.WlsServerInfoAction$$FastClassByCGLIB$$<span class="number">2291828</span>.invoke(&lt;generated&gt;)</span><br><span class="line">at net.sf.cglib.proxy.MethodProxy.invoke(MethodProxy.java:<span class="number">191</span>)</span><br><span class="line">at org.springframework.aop.framework.Cglib2AopProxy$CglibMethodInvocation.invokeJoinpoint(Cglib2AopProxy.java:<span class="number">688</span>)</span><br><span class="line">at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:<span class="number">150</span>)</span><br><span class="line">at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:<span class="number">91</span>)</span><br><span class="line">at com.approbe.aop.PerformanceMonitorMiddleware.timeAround(PerformanceMonitorMiddleware.java:<span class="number">46</span>)</span><br><span class="line">at sun.reflect.GeneratedMethodAccessor543.invoke(Unknown Source)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)</span><br><span class="line">at java.lang.reflect.Method.invoke(Unknown Source)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:<span class="number">621</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:<span class="number">610</span>)</span><br><span class="line">at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:<span class="number">65</span>)</span><br></pre></td></tr></table></figure><h2 id="3-6-实现效果"><a href="#3-6-实现效果" class="headerlink" title="3.6 实现效果"></a>3.6 实现效果</h2><ul><li>在希望统计的方法上加注释</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"updateWlsBySystemId"</span>)</span><br><span class="line"><span class="meta">@MethodPerformanceLog</span>(<span class="keyword">module</span> = <span class="string">"中间件批量修改/中间件树结构管理"</span>, remark = <span class="string">"更新功能"</span>, operateType = <span class="string">"更新"</span>)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateWlsBySystemId</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"更新系统------------------------"</span>);</span><br><span class="line">    middlewareLogger.info(<span class="string">"更新系统----------------"</span>);</span><br><span class="line">    String remoteAddr = GetRemoteAddrUtil.getRemoteIpAddr(request);</span><br><span class="line">    String requestUserName = HttpSessionUtil.getSessionUserName(request);</span><br></pre></td></tr></table></figure><ul><li>执行方法打印执行时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------com.approbe.middlware.action.WlsServerInfoAction.updateWlsBySystemId 方法执行耗时：<span class="number">6853</span> ms</span><br></pre></td></tr></table></figure><h1 id="4-参考"><a href="#4-参考" class="headerlink" title="4.参考"></a>4.参考</h1><p><a href="http://jinnianshilongnian.iteye.com/category/283252" title="京东jinnianshilongnian 《java开发常见问题分析》" target="_blank" rel="noopener">京东jinnianshilongnian 《java开发常见问题分析》 http://jinnianshilongnian.iteye.com/category/283252 </a></p><p><a href="http://jinnianshilongnian.iteye.com/blog/1901694" title="京东jinnianshilongnian 《请不要再使用低级别的AOP API》" target="_blank" rel="noopener">京东jinnianshilongnian 《请不要再使用低级别的AOP API》 http://jinnianshilongnian.iteye.com/blog/1901694</a></p><p><a href="https://blog.csdn.net/unei66/article/details/9422339" title="9876- 《spring aop拦截action配置》" target="_blank" rel="noopener">《spring aop拦截action配置》 https://blog.csdn.net/unei66/article/details/9422339</a></p><h1 id="5-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#5-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="5.欢迎关注米宝窝，持续更新中，谢谢！"></a>5.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-目标&quot;&gt;&lt;a href=&quot;#1-目标&quot; class=&quot;headerlink&quot; title=&quot;1.目标&quot;&gt;&lt;/a&gt;1.目标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;背景：&lt;br&gt;基于Spring+Strust2+Ibatis 的JAVA Web项目，后台实现分传统的3层结构，dao层，service层，action层。业务调用链一般为 action层–&amp;gt; service层 –&amp;gt; dao层。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目标：&lt;br&gt;统计Action层某个方法的执行时间，只需要在该方法上加入一个注解便可以打印出该方法的执行时间。（通过Action层统计方法，基本能粗略统计从客户发起到完成请求反馈给前台页面的总时间。）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;2-项目环境&quot;&gt;&lt;a href=&quot;#2-项目环境&quot; class=&quot;headerlink&quot; title=&quot;2.项目环境&quot;&gt;&lt;/a&gt;2.项目环境&lt;/h1&gt;&lt;p&gt;基于Spring Strust2 Ibatis JAVA Web项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;spring-XXX-3.0.5.RELEASE.jar&lt;/li&gt;
&lt;li&gt;aspectjrt-1.6.8.jar&lt;/li&gt;
&lt;li&gt;struts2-core-2.3.24.jar&lt;/li&gt;
&lt;li&gt;log4j-1.2.17.jar&lt;br&gt;（等）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
    
      <category term="Spring AOP" scheme="http://yoursite.com/tags/Spring-AOP/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>某保险公司核心系统中间件Hibernate 一级缓存导致内存溢出的故障诊断</title>
    <link href="http://yoursite.com/2018/09/02/%E6%9F%90%E4%BF%9D%E9%99%A9%E5%85%AC%E5%8F%B8%E6%A0%B8%E5%BF%83%E7%B3%BB%E7%BB%9F%E4%B8%AD%E9%97%B4%E4%BB%B6Hibernate-%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AF%BC%E8%87%B4%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"/>
    <id>http://yoursite.com/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/</id>
    <published>2018-09-02T14:15:45.000Z</published>
    <updated>2018-09-25T00:52:52.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-客户环境"><a href="#1-客户环境" class="headerlink" title="1.客户环境"></a>1.客户环境</h2><ul><li>Weblogic版本：9.2</li><li>Linux ：suse 12</li><li>JDK版本： Sun JDK 1.5</li></ul><h2 id="2-故障现象"><a href="#2-故障现象" class="headerlink" title="2.故障现象"></a>2.故障现象</h2><p>在 201X 年 X 月 X 日早上 10 点多时，某保险公司核心系统多个<br>Weblogic 的应用服务器都极度缓慢，正常的业务都无法开展。</p><a id="more"></a><h2 id="3-详细分析"><a href="#3-详细分析" class="headerlink" title="3.详细分析"></a>3.详细分析</h2><h3 id="应用缓慢原因"><a href="#应用缓慢原因" class="headerlink" title="应用缓慢原因"></a>应用缓慢原因</h3><p>检查 Weblogic 的相关日志文件，发现有内存溢出的情况发生，如下：<br>java.lang.OutOfMemoryError: Java heap space</p><p>并产生了相关的内存溢出 HeapDump 文件：java_pid25528.hprof 随后对该文件进行下一步分析，可知：</p><p><img src="/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/markdown-img-paste-2018090222312212.png" alt="hibernate_cache_outOfmemory1"></p><p>其中占据内存较多的两组对象都是产生了 Stuck 的 Weblogic 线程，分别占用的内存是 84.85%和 10.40%，这两部分加起来是 95.25%，</p><p>说明已经占用了整个 Weblogic Server 的绝大部分内存。</p><h3 id="进一步分析内存溢出对象"><a href="#进一步分析内存溢出对象" class="headerlink" title="进一步分析内存溢出对象"></a>进一步分析内存溢出对象</h3><p>进一步分析，发现大量的对象都被缓存在<br>（org.hibernate.engine.StatefulPersistenceContext）中.<br><img src="/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/markdown-img-paste-20180902223516304.png" alt="hibernate_cache_outofMemory_statefulPeristence"></p><p>在这个缓存中的    对    象    是我们的业务对象</p><p><img src="/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/markdown-img-paste-20180902223734874.png" alt="hibernate_cache_outofMemory_entityName"></p><p>业务对象如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.**.scms.inf.model.ScmsCcommission</span><br><span class="line">com.**.scms.inf.model.ScmsCcomissionId</span><br></pre></td></tr></table></figure></p><p>由于这些缓存的数据无法释放，系统在业务量较大时，内存迅速 在 2 分钟内从 1G 增长到 4G，并且不断地进行 Full GC，导致系统极其缓慢。</p><h3 id="StatefulPersistenceContext-解密"><a href="#StatefulPersistenceContext-解密" class="headerlink" title="StatefulPersistenceContext 解密"></a>StatefulPersistenceContext 解密</h3><h4 id="SessionImpl"><a href="#SessionImpl" class="headerlink" title="SessionImpl"></a>SessionImpl</h4><p>Hibernate的一级缓存就是指Session缓存。通过查看Session接口的实现类——SessionImpl.java的源码可发现有如下两个类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">161</span>   <span class="keyword">private</span> <span class="keyword">transient</span> ActionQueue actionQueue;</span><br><span class="line"><span class="number">162</span>   <span class="keyword">private</span> <span class="keyword">transient</span> StatefulPersistenceContext persistenceContext;</span><br></pre></td></tr></table></figure></p><p>actionQueue它是一个行动队列，它主要记录crud操作的相关信息。<br>persistenceContext它是持久化上下文，它其实才是真正的缓存。</p><h4 id="persistenceContext缓存存储方式"><a href="#persistenceContext缓存存储方式" class="headerlink" title="persistenceContext缓存存储方式"></a>persistenceContext缓存存储方式</h4><p>当执行完以下这句代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Customer customer = session.get(Customer.class, 1);</span><br></pre></td></tr></table></figure></p><p>就会向一级缓存中存储数据，一级缓存其底层使用了一个Map集合来存储，Map的key存储的是一级缓存对象，而value存储的是快照。通过在这句代码上打个断点，然后以debug的方式运行，Watch一下session会看得更加清楚，如下：</p><p><img src="/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/markdown-img-paste-20180902232812809.png" alt="persistenceContext-debug1"></p><p><img src="/2018/09/02/某保险公司核心系统中间件Hibernate-一级缓存导致内存溢出的故障诊断/markdown-img-paste-20180902233103142.png" alt="persistenceContext-debug2"></p><h4 id="Hibernate-session的清理方法"><a href="#Hibernate-session的清理方法" class="headerlink" title="Hibernate session的清理方法"></a>Hibernate session的清理方法</h4><p>从如下的代码中，也可以看出，session在执行相关清理工作时，也会执行persistenceContext.clear();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">  281   errorIfClosed();</span><br><span class="line">  282   checkTransactionSynchStatus();</span><br><span class="line">  283   persistenceContext.clear();</span><br><span class="line">  284   actionQueue.clear();</span><br><span class="line">  285   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  466   /**</span><br><span class="line">  467    * clear all the internal collections, just</span><br><span class="line">  468    * to help the garbage collector, does not</span><br><span class="line">  469    * clear anything that is needed during the</span><br><span class="line">  470    * afterTransactionCompletion() phase</span><br><span class="line">  471    */</span><br><span class="line">  472   private void cleanup() &#123;</span><br><span class="line">  473   persistenceContext.clear();</span><br><span class="line">  474   &#125;</span><br></pre></td></tr></table></figure></p><h4 id="StatefulPersistenceContext源码"><a href="#StatefulPersistenceContext源码" class="headerlink" title="StatefulPersistenceContext源码"></a>StatefulPersistenceContext源码</h4><p><a href="http://www.docjar.com/html/api/org/hibernate/engine/StatefulPersistenceContext.java.html &quot;StatefulPersistenceContext源码" target="_blank" rel="noopener">StatefulPersistenceContext源码</a></p><p>org.hibernate.engine.StatefulPersistenceContext<br>结合以上代码和该类的实现类可以确定是一个缓存上下文引用，而且从session.cleanup()方法session.cleanup()实际调用的就是persistenceContext.clear()，注意这句话<strong>clear all the internal collections, just to help the garbage collector;</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">58   import org.hibernate.util.IdentityMap;</span></span><br><span class="line"><span class="comment">59   import org.hibernate.util.MarkerObject;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   62    * A &lt;tt&gt;PersistenceContext&lt;/tt&gt; represents the state of persistent "stuff" which</span></span><br><span class="line"><span class="comment">   63    * Hibernate is tracking.  This includes persistent entities, collections,</span></span><br><span class="line"><span class="comment">   64    * as well as proxies generated.</span></span><br><span class="line"><span class="comment">   65    * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">   66    * There is meant to be a one-to-one correspondence between a SessionImpl and</span></span><br><span class="line"><span class="comment">   67    * a PersistentContext.  The SessionImpl uses the PersistentContext to track</span></span><br><span class="line"><span class="comment">   68    * the current state of its context.  Event-listeners then use the</span></span><br><span class="line"><span class="comment">   69    * PersistentContext to drive their processing.</span></span><br><span class="line"><span class="comment">   70    *</span></span><br><span class="line"><span class="comment">   71    * <span class="doctag">@author</span> Steve Ebersole</span></span><br><span class="line"><span class="comment">   72    */</span></span><br></pre></td></tr></table></figure></p><h2 id="4-建议"><a href="#4-建议" class="headerlink" title="4.建议"></a>4.建议</h2><p><strong>由于 Hibernate 的一级缓存是其内部使用的，无法关闭或停用</strong>（随着Session 销毁）。从<br>Hibernate 的手册或文档中可知，Hibernate 的一级缓存的清除可通过以下方式：<br>1）对于单个对象的清除：</p><p>Session session=sessionFactory.getCurrentSession(); session.evict(entity);</p><p>2）对于实体集合的清除：</p><p>Session session=sessionFactory.getCurrentSession(); session.clear();<br>建议在程序中加入对 Hibernate 一级缓存的清除工作，以便可以其<br>内存数据可以及时释放。</p><p>关于Hibernate缓存问题可参考：<br><a href="https://rocklei123.github.io/2018/09/02/Hibernate缓存策略/" title="Hibernate缓存策略" target="_blank" rel="noopener">Hibernate缓存策略</a></p><h2 id="5-可能场景"><a href="#5-可能场景" class="headerlink" title="5.可能场景"></a>5.可能场景</h2><p>如果应用会定时启动几个quartz任务来处理复杂且影响页面、响应时间的业务，这部分业务的业务数据是从数据库查的，只有业务数据全都被处理完后这个quartz才会结束。<br>当这几个 quartz任务的业务数据较多的时候，就会有很多对象被填入一级缓存这样一来持久化上下文中保存的对象越来越多。最终导致OOM.</p><h2 id="6-参考"><a href="#6-参考" class="headerlink" title="6.参考"></a>6.参考</h2><p><a href="http://www.docjar.com/html/api/org/hibernate/engine/StatefulPersistenceContext.java.html" target="_blank" rel="noopener">http://www.docjar.com/html/api/org/hibernate/engine/StatefulPersistenceContext.java.html</a></p><p><a href="http://www.docjar.com/html/api/org/hibernate/impl/SessionImpl.java.html" target="_blank" rel="noopener">http://www.docjar.com/html/api/org/hibernate/impl/SessionImpl.java.html</a></p><p><a href="https://blog.csdn.net/yerenyuan_pku/article/details/70148567" target="_blank" rel="noopener">https://blog.csdn.net/yerenyuan_pku/article/details/70148567</a></p><p><a href="https://www.cnblogs.com/hyl8218/p/5076338.html" target="_blank" rel="noopener">https://www.cnblogs.com/hyl8218/p/5076338.html</a></p><h2 id="7-了解Hibernate缓存策略请看"><a href="#7-了解Hibernate缓存策略请看" class="headerlink" title="7.了解Hibernate缓存策略请看"></a>7.了解Hibernate缓存策略请看</h2><p><a href="&quot;https://blog.csdn.net/zhouleiblog/article/details/82834296&quot; https://blog.csdn.net/zhouleiblog/article/details/82834296">Hibernate缓存策略</a><br><a href="https://rocklei123.github.io/2018/09/02/Hibernate%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/" title="https://rocklei123.github.io/2018/09/02/Hibernate%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/" target="_blank" rel="noopener">Hibernate缓存策略</a></p><h2 id="8-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#8-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="8.欢迎关注米宝窝，持续更新中，谢谢！"></a>8.欢迎关注米宝窝，持续更新中，谢谢！</h2><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-客户环境&quot;&gt;&lt;a href=&quot;#1-客户环境&quot; class=&quot;headerlink&quot; title=&quot;1.客户环境&quot;&gt;&lt;/a&gt;1.客户环境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Weblogic版本：9.2&lt;/li&gt;
&lt;li&gt;Linux ：suse 12&lt;/li&gt;
&lt;li&gt;JDK版本： Sun JDK 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-故障现象&quot;&gt;&lt;a href=&quot;#2-故障现象&quot; class=&quot;headerlink&quot; title=&quot;2.故障现象&quot;&gt;&lt;/a&gt;2.故障现象&lt;/h2&gt;&lt;p&gt;在 201X 年 X 月 X 日早上 10 点多时，某保险公司核心系统多个&lt;br&gt;Weblogic 的应用服务器都极度缓慢，正常的业务都无法开展。&lt;/p&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="WebLogic" scheme="http://yoursite.com/tags/WebLogic/"/>
    
      <category term="内存溢出" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>Hibernate缓存策略</title>
    <link href="http://yoursite.com/2018/09/02/Hibernate%E7%BC%93%E5%AD%98%E7%AD%96%E7%95%A5/"/>
    <id>http://yoursite.com/2018/09/02/Hibernate缓存策略/</id>
    <published>2018-09-02T08:29:56.000Z</published>
    <updated>2018-09-25T00:46:42.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是Hibernate一级缓存"><a href="#一、什么是Hibernate一级缓存" class="headerlink" title="一、什么是Hibernate一级缓存"></a>一、什么是Hibernate一级缓存</h2><h3 id="1、-一级缓存范围"><a href="#1、-一级缓存范围" class="headerlink" title="1、 一级缓存范围"></a>1、 一级缓存范围</h3><p>（1）Hibernate 一级缓存又称之为”Session 缓存”、“会话级缓存”<br>（2）通过Session从数据库查询时会吧实体在内存中存储起来，下一次查询同一实体时不再从数据库获取，而是从内存中获取，这就是缓存。<br>（3）一级缓存的生命周期和session相同;Session 销毁它也会销毁<br>（4）一级缓存中的数据可适用范围在当前会话之内</p><p>测试用例（1）：<br><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902171836974.png" alt="test1"></p><a id="more"></a><h3 id="2、-清理一级缓存"><a href="#2、-清理一级缓存" class="headerlink" title="2、 清理一级缓存"></a>2、 清理一级缓存</h3><p>一级缓存无法取消，用两个方法管理。<br>（1）session.evict(obj) ：会把指定的缓冲对象进行清除。<br>（2）  session.clear() ：把缓冲区内的全部对象清除，但不包括操作中的对象。</p><p>测试用例1session.evict(obj)  清理当前对象后，再次查询需要查询数据库：<br><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-2018090217192062.png" alt="hibernate_evict_test"></p><p>测试用例2 session.clear 后（需要从数据库中查询）：<br><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-2018090217195599.png" alt="hibernate_clear_test"></p><h3 id="3、一级缓存注意问题："><a href="#3、一级缓存注意问题：" class="headerlink" title="3、一级缓存注意问题："></a>3、一级缓存注意问题：</h3><p>（1）query.list()是不会使用一级缓存的<br>（2）query.iterate()会使用一级缓存，当缓存中有数据的时候，query.iterate()将所有对象的id查询出来然后到缓存中将所有对象都查询出来，如果缓存中没有数据，query.iterate()则把对象从数据库中一条一条的将数据查出来<br>（3）一级缓存也有些时候会对程序的性能产生影响，因为在对数据库进行增删改的时候同时也要更新缓存</p><p>测试用例1 query.list 不会使用缓存：<br><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902172130128.png" alt="hibernate_query_list"></p><p>测试用例2 query.iterate()会使用一级缓存：<br><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902172229735.png" alt="hibernate_query_iterate"><br>我们看到，当如果通过iterator()方法来获得我们对象的时候，hibernate首先会发出1条sql去查询出所有对象的 id 值，当我们如果需要查询到某个对象的具体信息的时候，hibernate此时会根据查询出来的 id 值再发sql语句去从数据库中查询对象的信息，这就是典型的 N+1 的问题。</p><h2 id="二、Hibernate二级缓存"><a href="#二、Hibernate二级缓存" class="headerlink" title="二、Hibernate二级缓存"></a>二、Hibernate二级缓存</h2><h3 id="1、-二级缓存简介"><a href="#1、-二级缓存简介" class="headerlink" title="1、 二级缓存简介"></a>1、 二级缓存简介</h3><p>二级缓存的生命周期是SessionFactory,当SessionFactory关闭时,缓存才会清空.<br>二级缓存是每个session共用的缓存,并不是默认开启的,需要手动去配置.</p><p><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902172334211.png" alt="introduce_hibernate_cache2"></p><h3 id="2-、二级缓存配置步骤"><a href="#2-、二级缓存配置步骤" class="headerlink" title="2 、二级缓存配置步骤"></a>2 、二级缓存配置步骤</h3><p>1.添加二级缓存对应的jar包.<br>jar包:commons-logging-1.1.3.jar、ehcache.jar</p><p>2.在Hibernate的配置文件中添加Provider类的描述(即添加二级缓存接口对应外部的实现类).</p><property name="cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</property><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">　　　　 <span class="comment">&lt;!-- 开启二级缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 二级缓存的提供类 在hibernate4.0版本以后我们都是配置这个属性来指定二级缓存的提供类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>org.hibernate.cache.ehcache.EhCacheRegionFactory<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 二级缓存配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.provider_configuration_file_resource_path"</span>&gt;</span>ehcache.xml<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.添加二级缓存的属性配置文件,直接放在src根目录即可.<br>ehcache.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ehcache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Sets the path to the directory where cache .data files are created.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         If the path is a Java System Property it is replaced by</span></span><br><span class="line"><span class="comment">         its value in the running VM.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         The following properties are translated:</span></span><br><span class="line"><span class="comment">         user.home - User's home directory</span></span><br><span class="line"><span class="comment">         user.dir - User's current working directory</span></span><br><span class="line"><span class="comment">         java.io.tmpdir - Default temp file path --&gt;</span></span><br><span class="line">　　</span><br><span class="line">　　<span class="comment">&lt;!--指定二级缓存存放在磁盘上的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"user.dir"</span>/&gt;</span>　　</span><br><span class="line"></span><br><span class="line">　　<span class="comment">&lt;!--我们可以给每个实体类指定一个对应的缓存，如果没有匹配到该类，则使用这个默认的缓存配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span>　　//在内存中存放的最大对象数</span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span>　　　　　　　　　//是否永久保存缓存，设置成<span class="attr">false</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span>　　　　</span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span>　　　　</span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span>　　　　　//如果对象数量超过内存中最大的数，是否将其保存到磁盘中，设置成<span class="attr">true</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">　　</span><br><span class="line">　　<span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">　　　　1、timeToLiveSeconds的定义是：以创建时间为基准开始计算的超时时长；</span></span><br><span class="line"><span class="comment">　　　　2、timeToIdleSeconds的定义是：在创建时间和最近访问时间中取出离现在最近的时间作为基准计算的超时时长；</span></span><br><span class="line"><span class="comment">　　　　3、如果仅设置了timeToLiveSeconds，则该对象的超时时间=创建时间+timeToLiveSeconds，假设为A；</span></span><br><span class="line"><span class="comment">　　　　4、如果没设置timeToLiveSeconds，则该对象的超时时间=max(创建时间，最近访问时间)+timeToIdleSeconds，假设为B；</span></span><br><span class="line"><span class="comment">　　　　5、如果两者都设置了，则取出A、B最少的值，即min(A,B)，表示只要有一个超时成立即算超时。</span></span><br><span class="line"><span class="comment">　　--&gt;</span></span><br><span class="line"></span><br><span class="line">　　<span class="comment">&lt;!--可以给每个实体类指定一个配置文件，通过name属性指定，要使用类的全名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"com.xiaoluo.bean.Student"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"600"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"sampleCache2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"0"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span> --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.如果使用xml配置，我们需要在 Student.hbm.xml 中加上一下配置。在需要被缓存的表所对应的映射文件中添加<cache>标签.</cache></p><h4 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h4><p>在<class>标签下添加<cache usage="read-only"></cache></class></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">"com.xiaoluo.bean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">"Student"</span> <span class="attr">table</span>=<span class="string">"t_student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 二级缓存一般设置为只读的 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">cache</span> <span class="attr">usage</span>=<span class="string">"read-only"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"int"</span> <span class="attr">column</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">"native"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">column</span>=<span class="string">"sex"</span> <span class="attr">type</span>=<span class="string">"string"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">"room"</span> <span class="attr">column</span>=<span class="string">"rid"</span> <span class="attr">fetch</span>=<span class="string">"join"</span>&gt;</span><span class="tag">&lt;/<span class="name">many-to-one</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><p>如果使用annotation配置，我们需要在Student这个类上加上这样一个注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name=<span class="string">"t_student"</span>)</span><br><span class="line"><span class="meta">@Cache</span>(usage=CacheConcurrencyStrategy.READ_ONLY)　　<span class="comment">//　　表示开启二级缓存，并使用read-only策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Classroom room;</span><br><span class="line">    .......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3、二级缓存注意事项"><a href="#3、二级缓存注意事项" class="headerlink" title="3、二级缓存注意事项"></a>3、二级缓存注意事项</h3><p>（1）二级缓存的使用策略一般有这几种：read-only、nonstrict-read-write、read-write、transactional。注意：我们通常使用二级缓存都是将其配置成 read-only ，即我们应当在那些不需要进行修改的实体类上使用二级缓存，否则如果对缓存进行读写的话，性能会变差，这样设置缓存就失去了意义。<br>（2）二级缓存缓存的仅仅是对象，如果查询出来的是对象的一些属性，则不会被加到缓存中去<br>（3）当我们如果通过 list() 去查询两次对象时，二级缓存虽然会缓存查询出来的对象，但是我们看到发出了两条相同的查询语句，这是因为二级缓存不会缓存我们的hql查询语句，要想解决这个问题，我们就要配置我们的查询缓存了。<br>（4）查询缓存(sessionFactory级别)</p><p>我们如果要配置查询缓存，只需要在hibernate.cfg.xml中加入一条配置即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">　　　　　<span class="comment">&lt;!-- 开启查询缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后我们如果在查询hql语句时要使用查询缓存，就需要在查询语句后面设置这样一个方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; ls = session.createQuery(<span class="string">"from Student where name like ?"</span>)</span><br><span class="line">                    .setCacheable(<span class="keyword">true</span>)　　<span class="comment">//开启查询缓存，查询缓存也是SessionFactory级别的缓存</span></span><br><span class="line">                    .setParameter(<span class="number">0</span>, <span class="string">"%王%"</span>)</span><br><span class="line">                    .setFirstResult(<span class="number">0</span>).setMaxResults(<span class="number">50</span>).list();</span><br></pre></td></tr></table></figure><p>如果是在annotation中，我们还需要在这个类上加上这样一个注解：@Cacheable</p><h3 id="4、-二级缓存使用场景"><a href="#4、-二级缓存使用场景" class="headerlink" title="4、 二级缓存使用场景"></a>4、 二级缓存使用场景</h3><p><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902172551857.png" alt="hibernate_cache2_use"></p><h2 id="三、Hibernate一级、二级缓存的对比"><a href="#三、Hibernate一级、二级缓存的对比" class="headerlink" title="三、Hibernate一级、二级缓存的对比"></a>三、Hibernate一级、二级缓存的对比</h2><p><img src="/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902172656770.png" alt="hibernate_cache_compare"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/xiaoluo501395377/p/3377604.html" target="_blank" rel="noopener">https://www.cnblogs.com/xiaoluo501395377/p/3377604.html</a><br><a href="https://www.imooc.com/learn/465" target="_blank" rel="noopener">https://www.imooc.com/learn/465</a></p><h2 id="欢迎关注米宝窝，持续更新中，谢谢！"><a href="#欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="欢迎关注米宝窝，持续更新中，谢谢！"></a>欢迎关注米宝窝，持续更新中，谢谢！</h2><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、什么是Hibernate一级缓存&quot;&gt;&lt;a href=&quot;#一、什么是Hibernate一级缓存&quot; class=&quot;headerlink&quot; title=&quot;一、什么是Hibernate一级缓存&quot;&gt;&lt;/a&gt;一、什么是Hibernate一级缓存&lt;/h2&gt;&lt;h3 id=&quot;1、-一级缓存范围&quot;&gt;&lt;a href=&quot;#1、-一级缓存范围&quot; class=&quot;headerlink&quot; title=&quot;1、 一级缓存范围&quot;&gt;&lt;/a&gt;1、 一级缓存范围&lt;/h3&gt;&lt;p&gt;（1）Hibernate 一级缓存又称之为”Session 缓存”、“会话级缓存”&lt;br&gt;（2）通过Session从数据库查询时会吧实体在内存中存储起来，下一次查询同一实体时不再从数据库获取，而是从内存中获取，这就是缓存。&lt;br&gt;（3）一级缓存的生命周期和session相同;Session 销毁它也会销毁&lt;br&gt;（4）一级缓存中的数据可适用范围在当前会话之内&lt;/p&gt;
&lt;p&gt;测试用例（1）：&lt;br&gt;&lt;img src=&quot;/2018/09/02/Hibernate缓存策略/markdown-img-paste-20180902171836974.png&quot; alt=&quot;test1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Hibernate" scheme="http://yoursite.com/categories/Hibernate/"/>
    
    
      <category term="Hibernate" scheme="http://yoursite.com/tags/Hibernate/"/>
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何将 Oracle WebLogic Server 使用的 JDK 升级到不同的版本 (文档 ID 1600832.1)</title>
    <link href="http://yoursite.com/2018/05/04/%E5%A6%82%E4%BD%95%E5%B0%86-Oracle-WebLogic-Server-%E4%BD%BF%E7%94%A8%E7%9A%84-JDK-%E5%8D%87%E7%BA%A7%E5%88%B0%E4%B8%8D%E5%90%8C%E7%9A%84%E7%89%88%E6%9C%AC-%E6%96%87%E6%A1%A3-ID-1600832-1/"/>
    <id>http://yoursite.com/2018/05/04/如何将-Oracle-WebLogic-Server-使用的-JDK-升级到不同的版本-文档-ID-1600832-1/</id>
    <published>2018-05-04T07:16:52.000Z</published>
    <updated>2018-09-25T00:38:16.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适用于"><a href="#适用于" class="headerlink" title="适用于:"></a>适用于:</h2><p>Oracle WebLogic Server - 版本 8.1 和更高版本<br>本文档所含信息适用于所有平台</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>本文的主要目标是说明将 Oracle WebLogic Server 安装所用的 JDK 升级到更新版本的步骤。<br>必须注意，支持将 Java SE（或分为 JDK/JRE）更新到最新版本的前提是，这样做仍然能得到认证。因此，用户应检查目标 JDK版本是否已经过相应 Weblogic Server 版本的认证，然后自行实施以下说明中的事项。<br>免责声明<br>Oracle WebLogic Server 可以作为独立产品使用，也可以作为许多其它多层产品的核心，例如对于 Oracle Fusion Middleware 11g 安装。本文不会考虑新 JDK 能否得到特定 Fusion Middleware 版本认证这一点，因此，用户应自己负责查看产品认证表，以确认您的安装类型是否支持所需的 JDK 版本。</p><p>1) 对于 Oracle Fusion Middleware 11g，查看以下两个文档中的认证信息：</p><p>Document 1492980.1 - How to Maintain the Java SE Installed or Used with FMW 11g Products<br>Document 431578.1 - How to Find Certification Details for Oracle Application Server 10g and Oracle Fusion Middleware.<br>2) 对于个别的 Oracle Weblogic Server 配置，涉及 10.3.0 之前版本的，查看以下位置的认证信息：<br><a href="http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/config_wls.html" target="_blank" rel="noopener">http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/config_wls.html</a><br>3) 对于 Weblogic Server 12.1.2 ，请参阅 Document 1616397.1 - After JDK Upgrade How To Change JDK References For WebLogic Server 12c<br>如果安装的是 Oracle Fusion Middleware 11g，请参阅以下文档：<br>Document 1492980.1 - How to Maintain the Java SE Installed or Used with FMW 11g Products</p><p>本文未涉及的两种情况：</p><p>1) 如果您的目标不是升级，而是从 Java SUN JDK 转换到 Oracle JRockit JDK，请参阅： <document 1058804.1=""> - How To Change Type of JDK (Sun / JRockit) for FMW 11g Domain.</document></p><p>2) 如果您的目标是将 32 位 JDK 版本替换为新的 64 位 JDK 版本，本文不适用。请参阅： <document 1312755.1=""> - How Re-Create, Copy, or Re-Use Existing WLS Domains from 32 bit to 64 bit Architecture</document></p><p>本文中的步骤通常适用于从安装过程中默认使用的 JDK 转换到更高的版本，甚至也可以同样地用来降低版本。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>备选方案<br>有两种不同方法可用来实现所需的目标。以下将分别简要介绍：<br>A) 安装新的 JDK 主目录，使用符号链接对现有的和新的 JDK 目录进行“重命名”。<br>按照这种方法，将不改变在安装过程中最初使用的 JDK 位置，因此只有很小的缺点，也即会保留带有版本的名称，例如 “$INSTALL_HOME/jdk_<version>“。<br>在任何情况下，这种方法都要比方法 B) 更为简单且不易出错。</version></p><p>B) 安装新的 JDK 主目录，替换所有引用 JAVA_HOME 环境变量的脚本中的该变量。</p><p>如果要进行部分升级（只影响特定域，或不影响节点管理器），这是首选的方法，但其难点在于如何知道哪些文件将会引用 JDK 位置。</p><p>要更改的初始文件列表将如下：</p><ul><li>$INSTALL_HOME/wlserver_10.3/common/bin/commEnv.sh</li><li>$INSTALL_HOME/user_projects/domains/<mydomain>/bin/setDomainEnv.sh</mydomain></li><li>$INSTALL_HOME/wlserver_10.3/common/nodemanager/nodemanager.properties</li><li>$INSTALL_HOME/utils/bsu/bsu.sh</li><li>$INSTALL_HOME/utils/quickstart/quickstart.sh</li><li>$INSTALL_HOME/utils/uninstall/uninstall.sh<br>还有更为详尽的方法来确定这些文件，即运行以下命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -name &quot;*.sh&quot; -exec grep -il JAVA_HOME &#123;&#125; \;</span><br></pre></td></tr></table></figure></li></ul><h2 id="逐步操作"><a href="#逐步操作" class="headerlink" title="逐步操作"></a>逐步操作</h2><h3 id="方法A"><a href="#方法A" class="headerlink" title="方法A)"></a>方法A)</h3><p>1) 假设源和目标位置如下：<br>sourceJDK: /oracle/wls1033/jdk160_18<br>targetJDK: /oracle/wls1033/jdk1.6.0_24<br>2) 停止使用当前 FMW_HOME 的所有进程。这指的是</p><ul><li>所有域中的全部 AdminServer 和 Managed_servers，</li><li>在该 FMW_HOME 中运行的所有 nodemanager 进程，以及</li><li>有可能在特定时刻运行 Bea SmartUpgrade 的进程。</li></ul><p>3) 重命名目录：</p><p>a) 转至源 JDK 的父目录：<br>% cd $INSTALL_HOME/<br>b) 您可以通过执行命令 “ls -ld jdk<version>“ 来确定其位置是否为符号链接：<br>% ls -ld jdk160_18</version></p><p>如果所列出内容中jdk160_18 的属性为lrwxrwxrwx (注意第一个字母为 ‘l’)，那它是一个链接。<br>如果所列出内容中jdk160_18 的属性为drwxrwxrwx (注意第一个字母为’d’) 那它是一个目录。<br>c) 将现有 JDK 位置转移到“备份名称”，例如：<br>% mv jdk160_18 jdk160_18.orig<br>这会将 jdk160_18 重命名为 jdk160_18.orig，无论其原来是目录还是链接。</p><p>d) 创建类似如下的符号链接：<br>% ln -s /oracle/wls1033/jdk1.6.0_24 jdk160_18<br>e) 通过运行以下命令，验证此步骤是否成功完成：<br>% $INSTALL_HOME/jdk160_18/bin/java -fullversion<br>如果没有返回已安装的 JSDK 的预期版本字符串，请检查<br>符号链接是否有效，或者向 UNIX 系统管理员寻求其它帮助。<br>4)只有在您使用的是 WLS 10.3.6 且目标 JDK 使用的是已认证的 JAVA 7 版本（版本 1.7.0_x）的情况下，才需要手动复制某些 jar 文件，如下所示：<br>将以下文件从 $INSTALL_HOME/modules 复制到 targetJDK/jre/lib/endorsed 目录<br>javax.annotation_1.0.0.0_1-0.jar<br>javax.xml.bind_2.1.1.jar<br>javax.xml.ws_2.1.1.jar<br>5) 像通常一样重新启动相应进程，它们将使用新的 JDK 版本。</p><h3 id="方法-B"><a href="#方法-B" class="headerlink" title="方法 B)"></a>方法 B)</h3><p>1) 找到涉及的 JDK 版本。<br>a) sourceJDK：假设使用的 JDK 为 $INSTALL_HOME/jdk<version></version></p><p>对于使用 WLS 平台安装程序（针对 32 位 Windows、Linux 和 Solaris）执行的安装，使用的 JDK 将是 $INSTALL_HOME/jdk<version>。<br>对于使用 WLS 通用安装程序（针对 64 位及所有其它平台）执行的安装，JDK 可能位于文件系统中的任何其它位置。</version></p><p>b) targetJDK： 假设新 JDK 位于 /opt/newjdk<br>对于以上示例，将使用以下命令：<br>sourceJDK: /oracle/wls1033/jdk160_18<br>targetJDK: /oracle/wls1033/jdk1.6.0_24<br>2) 停止使用当前 FMW_HOME 的所有进程。这指的是</p><ul><li>所有域中的全部 AdminServer 和 managed_servers，</li><li>在该 FMW_HOME 中运行的所有 nodemanager 进程，以及</li><li>有可能在特定时刻运行 Bea SmartUpgrade 的进程。</li></ul><p>3) 编辑 $INSTALL_HOME/wlserver_10.3/common/bin/commEnv.sh，更改 JAVA_HOME 位置。例如，从：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Reset JAVA_HOME, JAVA_VENDOR and PRODUCTION_MODE unless JAVA_HOME</span><br><span class="line"># and JAVA_VENDOR are pre-defined.</span><br><span class="line">if [ -z &quot;$&#123;JAVA_HOME&#125;&quot; -o -z &quot;$&#123;JAVA_VENDOR&#125;&quot; ]; then</span><br><span class="line"># Set up JAVA HOME</span><br><span class="line">JAVA_HOME=&quot;/oracle/wls1033/jdk160_18&quot;</span><br><span class="line"># Set up JAVA VENDOR, possible values are</span><br><span class="line">#Oracle, HP, IBM, Sun ...</span><br><span class="line">JAVA_VENDOR=Sun</span><br><span class="line"># PRODUCTION_MODE, default to the development mode</span><br><span class="line">PRODUCTION_MODE=&quot;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>更改为：:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Reset JAVA_HOME, JAVA_VENDOR and PRODUCTION_MODE unless JAVA_HOME</span><br><span class="line"># and JAVA_VENDOR are pre-defined.</span><br><span class="line">if [ -z &quot;$&#123;JAVA_HOME&#125;&quot; -o -z &quot;$&#123;JAVA_VENDOR&#125;&quot; ]; then</span><br><span class="line"># Set up JAVA HOME</span><br><span class="line">JAVA_HOME=&quot;/oracle/wls1033/jdk1.6.0_24&quot;</span><br><span class="line"># Set up JAVA VENDOR, possible values are</span><br><span class="line">#Oracle, HP, IBM, Sun ...</span><br><span class="line">JAVA_VENDOR=Sun</span><br><span class="line"># PRODUCTION_MODE, default to the development mode</span><br><span class="line">PRODUCTION_MODE=&quot;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></p><p>4) 对于每个域，更改其 “setDomainEnv.sh” 脚本以适应新的 JAVA_HOME。</p><p>对于默认位置和默认脚本，setDomainEnv.sh 将放在以下位置：<br>$INSTALL_HOME/user_projects/domains/<domainname>/bin/setDomainEnv.sh<br>仔细检查在何处、以何种方式更改了 JAVA_HOME 环境变量，因为这可能在不同版本之间发生变化。</domainname></p><p>例如在 WLS 10.3.3 中，这些信息如下所示：<br>BEA_JAVA_HOME=”/oracle/wls1033/jrockit_160_17_R28.0.0-679”<br>export BEA_JAVA_HOME</p><p>SUN_JAVA_HOME=”/oracle/wls1033/jdk160_18”<br>export SUN_JAVA_HOME</p><p>if [ “${JAVA_VENDOR}” = “Oracle” ] ; then<br>JAVA_HOME=”${BEA_JAVA_HOME}”<br>export JAVA_HOME<br>else<br>if [ “${JAVA_VENDOR}” = “Sun” ] ; then<br>JAVA_HOME=”${SUN_JAVA_HOME}”<br>export JAVA_HOME<br>else<br>JAVA_VENDOR=”Sun”<br>export JAVA_VENDOR<br>JAVA_HOME=”/oracle/wls1033/jdk160_18”<br>export JAVA_HOME<br>fi<br>fi<br>因此，必须对 SUN_JAVA_HOME 进行更改，以指定新的位置：<br>SUN_JAVA_HOME=”/oracle/wls1033/jdk1.6.0_24”<br>export SUN_JAVA_HOME<br>5) 对默认的以及任何其它现有的 nodemanager 进程，更改在 nodemanager.properties 中指定的 JDK 位置：</p><p>a) 为 $INSTALL_HOME/wlserver_10.3/common/nodemanager/nodemanager.properties 创建备份</p><p>从：<br>PropertiesVersion=10.3<br>javaHome=/oracle/wls1033/jdk160_18<br>AuthenticationEnabled=true<br>NodeManagerHome=/oracle/wls1033/wlserver_10.3/common/nodemanager<br>JavaHome=/oracle/wls1033/jdk160_18/jre<br>LogLevel=INFO<br>更改为：<br>PropertiesVersion=10.3<br>javaHome=/oracle/wls1033/jdk1.6.0_24<br>AuthenticationEnabled=true<br>NodeManagerHome=/oracle/wls1033/wlserver_10.3/common/nodemanager<br>JavaHome=/oracle/wls1033/jdk1.6.0_24/jre<br>LogLevel=INFO<br>6) 对于在相同 FMW_HOME 中使用的所有次要工具（如 BSU、uninstall.sh 等），均替换为新的 JDK 位置<br>对于 Bea SmartUpgrade 工具 $INSTALL_HOME/utils/bsu/bsu.sh</p><p>更新以下行：</p><p>from<br>JAVA_HOME=”/opt/JDK1.6.14”<br>to<br>JAVA_HOME=”/oracle/wls1033/jdk1.6.0_24”<br>类似地，更改其余三个文件的 JAVA_HOME 值</p><ul><li>$INSTALL_HOME/utils/quickstart/quickstart.sh</li><li>$INSTALL_HOME/utils/uninstall/uninstall.sh<br>7) 只有在您使用的是 WLS 10.3.6 且目标 JDK 使用的是已认证的 JAVA 7 版本（版本 1.7.0_x）的情况下，才需要手动复制某些 jar 文件，如下所示：<br>将以下文件从 $INSTALL_HOME/modules 复制到 targetJDK/jre/lib/endorsed 目录<br>javax.annotation_1.0.0.0_1-0.jar<br>javax.xml.bind_2.1.1.jar<br>javax.xml.ws_2.1.1.jar<br>8) 重新启动所有需要的进程。<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2>NOTE:1058804.1 - How To Change The JDK Type (Sun / JRockit) or JDK Version for a Given FMW 11g Domain<br>NOTE:1492980.1 - How to Maintain the Java SE Installed or Used with FMW 11g Products</li></ul><p>NOTE:1312755.1 - How Re-Create, Copy, or Re-Use Existing WLS Domains from 32-bit to 64-bit Architecture</p><h1 id="欢迎关注米宝窝，持续更新中，谢谢！"><a href="#欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title=".欢迎关注米宝窝，持续更新中，谢谢！"></a>.欢迎关注米宝窝，持续更新中，谢谢！</h1><p><a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;适用于&quot;&gt;&lt;a href=&quot;#适用于&quot; class=&quot;headerlink&quot; title=&quot;适用于:&quot;&gt;&lt;/a&gt;适用于:&lt;/h2&gt;&lt;p&gt;Oracle WebLogic Server - 版本 8.1 和更高版本&lt;br&gt;本文档所含信息适用于所有平台&lt;/p&gt;
&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;本文的主要目标是说明将 Oracle WebLogic Server 安装所用的 JDK 升级到更新版本的步骤。&lt;br&gt;必须注意，支持将 Java SE（或分为 JDK/JRE）更新到最新版本的前提是，这样做仍然能得到认证。因此，用户应检查目标 JDK版本是否已经过相应 Weblogic Server 版本的认证，然后自行实施以下说明中的事项。&lt;br&gt;免责声明&lt;br&gt;Oracle WebLogic Server 可以作为独立产品使用，也可以作为许多其它多层产品的核心，例如对于 Oracle Fusion Middleware 11g 安装。本文不会考虑新 JDK 能否得到特定 Fusion Middleware 版本认证这一点，因此，用户应自己负责查看产品认证表，以确认您的安装类型是否支持所需的 JDK 版本。&lt;/p&gt;
&lt;p&gt;1) 对于 Oracle Fusion Middleware 11g，查看以下两个文档中的认证信息：&lt;/p&gt;
&lt;p&gt;Document 1492980.1 - How to Maintain the Java SE Installed or Used with FMW 11g Products&lt;br&gt;Document 431578.1 - How to Find Certification Details for Oracle Application Server 10g and Oracle Fusion Middleware.&lt;br&gt;2) 对于个别的 Oracle Weblogic Server 配置，涉及 10.3.0 之前版本的，查看以下位置的认证信息：&lt;br&gt;&lt;a href=&quot;http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/config_wls.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://download.oracle.com/docs/cd/E13196_01/platform/suppconfigs/config_wls.html&lt;/a&gt;&lt;br&gt;3) 对于 Weblogic Server 12.1.2 ，请参阅 Document 1616397.1 - After JDK Upgrade How To Change JDK References For WebLogic Server 12c&lt;br&gt;如果安装的是 Oracle Fusion Middleware 11g，请参阅以下文档：&lt;br&gt;Document 1492980.1 - How to Maintain the Java SE Installed or Used with FMW 11g Products&lt;/p&gt;
&lt;p&gt;本文未涉及的两种情况：&lt;/p&gt;
&lt;p&gt;1) 如果您的目标不是升级，而是从 Java SUN JDK 转换到 Oracle JRockit JDK，请参阅： &lt;document 1058804.1=&quot;&quot;&gt; - How To Change Type of JDK (Sun / JRockit) for FMW 11g Domain.&lt;/document&gt;&lt;/p&gt;
&lt;p&gt;2) 如果您的目标是将 32 位 JDK 版本替换为新的 64 位 JDK 版本，本文不适用。请参阅： &lt;document 1312755.1=&quot;&quot;&gt; - How Re-Create, Copy, or Re-Use Existing WLS Domains from 32 bit to 64 bit Architecture&lt;/document&gt;&lt;/p&gt;
&lt;p&gt;本文中的步骤通常适用于从安装过程中默认使用的 JDK 转换到更高的版本，甚至也可以同样地用来降低版本。&lt;/p&gt;
    
    </summary>
    
      <category term="WebLogic" scheme="http://yoursite.com/categories/WebLogic/"/>
    
    
      <category term="weblogic" scheme="http://yoursite.com/tags/weblogic/"/>
    
      <category term="jdk" scheme="http://yoursite.com/tags/jdk/"/>
    
      <category term="升级" scheme="http://yoursite.com/tags/%E5%8D%87%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>windows平台npm install hexo-cli -g 卡住问题的解决办法</title>
    <link href="http://yoursite.com/2018/03/29/windows%E5%B9%B3%E5%8F%B0npm-install-hexo-cli-g-%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2018/03/29/windows平台npm-install-hexo-cli-g-卡住问题的解决办法/</id>
    <published>2018-03-29T08:35:59.000Z</published>
    <updated>2018-09-25T00:39:21.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-问题现象"><a href="#1-问题现象" class="headerlink" title="1 问题现象"></a>1 问题现象</h1><p>windows平台npm install hexo-cli -g 卡住问题的解决办法</p><h1 id="2-问题解决办法"><a href="#2-问题解决办法" class="headerlink" title="2 问题解决办法"></a>2 问题解决办法</h1><p>可以试试切换下你的NPM源。看是否能得到解决。<br>国内的NPM有CNPM和淘宝的NPM源比较稳定。<br>npm源切换和工具可参照站内贴 <a href="https://segmentfault.com/a/1190000000473869" target="_blank" rel="noopener">【nrm工具的使用】</a><br>或者是直接用命令切换:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h1 id="3-欢迎关注米宝窝，持续更新中，谢谢！"><a href="#3-欢迎关注米宝窝，持续更新中，谢谢！" class="headerlink" title="3.欢迎关注米宝窝，持续更新中，谢谢！"></a>3.欢迎关注米宝窝，持续更新中，谢谢！</h1><p> <a href="https://rocklei123.github.io/" title="https://rocklei123.github.io/" target="_blank" rel="noopener">米宝窝 https://rocklei123.github.io/ </a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-问题现象&quot;&gt;&lt;a href=&quot;#1-问题现象&quot; class=&quot;headerlink&quot; title=&quot;1 问题现象&quot;&gt;&lt;/a&gt;1 问题现象&lt;/h1&gt;&lt;p&gt;windows平台npm install hexo-cli -g 卡住问题的解决办法&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
      <category term="其他技术" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://yoursite.com/2018/03/28/hello-world-1/"/>
    <id>http://yoursite.com/2018/03/28/hello-world-1/</id>
    <published>2018-03-28T05:14:54.000Z</published>
    <updated>2018-09-02T07:52:47.986Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博客，从此开启点滴技术生活。</p><p>水滴石穿<br>合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。</p><p><img src="/2018/03/28/hello-world-1/zsy1.JPG" alt="zsy1.JPG"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.rocklei123.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Title</span>: sqlrobe</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: rocklei123</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2018/8/27 13:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintHeart</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(printHeart(<span class="string">"*"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">printHeart</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">StringBuffer pi = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">pi.append(<span class="string">"\n"</span>);</span><br><span class="line"><span class="keyword">if</span> (array[i] == <span class="number">0</span>)</span><br><span class="line">pi.append(<span class="string">"   "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (array[i] == <span class="number">4</span>)</span><br><span class="line">pi.append(<span class="string">"  "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (array[i] == <span class="number">5</span>)</span><br><span class="line">pi.append(<span class="string">" 周 "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (array[i] == <span class="number">2</span>)</span><br><span class="line">pi.append(<span class="string">" 书 "</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (array[i] == <span class="number">3</span>)</span><br><span class="line">pi.append(<span class="string">" 瑶 "</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pi.append(<span class="string">"  "</span> + input);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/03/28/hello-world-1/love.jpg" alt="love.jpg"></p><p> 谨以此文献给我的女儿周书瑶！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的第一篇博客，从此开启点滴技术生活。&lt;/p&gt;
&lt;p&gt;水滴石穿&lt;br&gt;合抱之木，生于毫末；九层之台，起于垒土；千里之行，始于足下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/28/hello-world-1/zsy1.JPG&quot; alt=&quot;zsy1.JPG&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="http://yoursite.com/tags/life/"/>
    
  </entry>
  
</feed>
